#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Buffer Definitions:
;
; cbuffer g_sceneCB
; {
;
;   struct g_sceneCB
;   {
;
;       struct struct.SceneConstantBuffer
;       {
;
;           row_major float4x4 projectionToWorld;     ; Offset:    0
;           float4 cameraPosition;                    ; Offset:   64
;           uint time;                                ; Offset:   80
;       
;       } g_sceneCB                                   ; Offset:    0
;
;   
;   } g_sceneCB                                       ; Offset:    0 Size:    84
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       struct struct.MaterialConstants
;       {
;
;           float Roughness;                          ; Offset:    0
;           float IndexOfRefraction;                  ; Offset:    4
;           float Padding;                            ; Offset:    8
;           uint HasDiffuseTexture;                   ; Offset:   12
;           float4 DiffuseColor;                      ; Offset:   16
;       
;       } Material                                    ; Offset:    0
;
;   
;   } Material                                        ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; g_sceneCB                         cbuffer      NA          NA     CB0            cb0     1
; Material                          cbuffer      NA          NA     CB1     cb0,space1     1
; LinearSampler                     sampler      NA          NA      S0             s0     1
; PointSampler                      sampler      NA          NA      S1             s1     1
; Scene                             texture     i32         ras      T0             t0     1
; EnvironmentMap                    texture     f32          2d      T1             t1     1
; IndexBuffer                       texture     u32         buf      T2      t0,space1     1
; AttributeBuffer                   texture    byte         r/o      T3      t1,space1     1
; DiffuseTexture                    texture     f32          2d      T4      t2,space1     1
; RenderTarget                          UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f:64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.RaytracingAccelerationStructure = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.SamplerState = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%g_sceneCB = type { %struct.SceneConstantBuffer }
%struct.SceneConstantBuffer = type { %class.matrix.float.4.4, <4 x float>, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%Material = type { %struct.MaterialConstants }
%struct.MaterialConstants = type { float, float, float, i32, <4 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.LightPayload = type { <4 x float>, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%struct.VertexAttribute = type { <3 x float>, <3 x float>, <2 x float> }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.BuiltInTriangleIntersectionAttributes = type { <2 x float> }
%struct.OcclusionPayload = type { i32 }
%struct.RayDesc = type { <3 x float>, float, <3 x float>, float }

@"\01?Scene@@3URaytracingAccelerationStructure@@A" = external global %struct.RaytracingAccelerationStructure, align 4
@"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A" = external global %"class.RWTexture2D<vector<float, 4> >", align 4
@"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A" = external global %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LinearSampler@@3USamplerState@@A" = external global %struct.SamplerState, align 4
@"\01?PointSampler@@3USamplerState@@A" = external global %struct.SamplerState, align 4
@"\01?IndexBuffer@@3V?$Buffer@I@@A" = external global %"class.Buffer<unsigned int>", align 4
@"\01?AttributeBuffer@@3UByteAddressBuffer@@A" = external global %struct.ByteAddressBuffer, align 4
@"\01?DiffuseTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external global %"class.Texture2D<vector<float, 4> >", align 4
@seed = internal unnamed_addr global i32 0, align 4
@g_sceneCB = external constant %g_sceneCB
@Material = external constant %Material

; Function Attrs: alwaysinline nounwind
define float @"\01?rand@@YAMXZ"() #0 {
  %1 = load %g_sceneCB, %g_sceneCB* @g_sceneCB, align 4
  %g_sceneCB = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32 160, %g_sceneCB %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %DispatchRaysIndex = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex4 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %DispatchRaysDimensions = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %2 = mul i32 %DispatchRaysDimensions, %DispatchRaysIndex4
  %3 = add i32 %2, %DispatchRaysIndex
  %4 = load i32, i32* @seed, align 4, !tbaa !89
  %5 = add i32 %4, 1
  store i32 %5, i32* @seed, align 4, !tbaa !89
  %6 = add i32 %3, %4
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %9 = add i32 %6, %8
  %10 = uitofp i32 %9 to float
  %Sin = call float @dx.op.unary.f32(i32 13, float %10)  ; Sin(value)
  %11 = fmul fast float %Sin, 0x40E55DD180000000
  %Frc = call float @dx.op.unary.f32(i32 22, float %11)  ; Frc(value)
  ret float %Frc
}

; Function Attrs: alwaysinline nounwind readonly
define <4 x float> @"\01?SampleEnvironmentMap@@YA?AV?$vector@M$03@@V?$vector@M$02@@@Z"(<3 x float> %dir) #1 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?LinearSampler@@3USamplerState@@A", align 4
  %2 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %3 = extractelement <3 x float> %dir, i32 0
  %4 = extractelement <3 x float> %dir, i32 2
  %5 = fdiv fast float %4, %3
  %Atan = call float @dx.op.unary.f32(i32 17, float %5)  ; Atan(value)
  %6 = fcmp fast ogt float %Atan, 0.000000e+00
  %7 = fadd fast float %Atan, 0x40191EB860000000
  %8 = select i1 %6, float %Atan, float %7
  %9 = fmul fast float %8, 0x3FC461D580000000
  %10 = extractelement <3 x float> %dir, i32 1
  %Acos = call float @dx.op.unary.f32(i32 15, float %10)  ; Acos(value)
  %11 = fmul fast float %Acos, 0x3FD461D580000000
  %12 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %2)  ; CreateHandleFromResourceStructForLib(Resource)
  %13 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %14 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %12, %dx.types.Handle %13, float %9, float %11, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %15 = extractvalue %dx.types.ResRet.f32 %14, 0
  %16 = insertelement <4 x float> undef, float %15, i64 0
  %17 = extractvalue %dx.types.ResRet.f32 %14, 1
  %18 = insertelement <4 x float> %16, float %17, i64 1
  %19 = extractvalue %dx.types.ResRet.f32 %14, 2
  %20 = insertelement <4 x float> %18, float %19, i64 2
  %21 = extractvalue %dx.types.ResRet.f32 %14, 3
  %22 = insertelement <4 x float> %20, float %21, i64 3
  ret <4 x float> %22
}

; Function Attrs: nounwind
define <3 x float> @"\01?GenerateCosineWeightedRay@@YA?AV?$vector@M$02@@XZ"() #2 {
  %1 = load %g_sceneCB, %g_sceneCB* @g_sceneCB, align 4
  %g_sceneCB15 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32 160, %g_sceneCB %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %DispatchRaysIndex13 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex12 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %DispatchRaysDimensions9 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %2 = mul i32 %DispatchRaysDimensions9, %DispatchRaysIndex12
  %3 = add i32 %2, %DispatchRaysIndex13
  %4 = load i32, i32* @seed, align 4, !tbaa !89
  %5 = add i32 %4, 1
  store i32 %5, i32* @seed, align 4, !tbaa !89
  %6 = add i32 %3, %4
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB15, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %9 = add i32 %6, %8
  %10 = uitofp i32 %9 to float
  %Sin2 = call float @dx.op.unary.f32(i32 13, float %10)  ; Sin(value)
  %11 = fmul fast float %Sin2, 0x40E55DD180000000
  %Frc1 = call float @dx.op.unary.f32(i32 22, float %11)  ; Frc(value)
  %12 = add i32 %4, 2
  store i32 %12, i32* @seed, align 4, !tbaa !89
  %13 = add i32 %3, %5
  %14 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB15, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.i32 %14, 0
  %16 = add i32 %13, %15
  %17 = uitofp i32 %16 to float
  %Sin = call float @dx.op.unary.f32(i32 13, float %17)  ; Sin(value)
  %18 = fmul fast float %Sin, 0x40E55DD180000000
  %Frc = call float @dx.op.unary.f32(i32 22, float %18)  ; Frc(value)
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %Frc1)  ; Sqrt(value)
  %19 = fmul fast float %Frc, 0x40191EB860000000
  %Cos = call float @dx.op.unary.f32(i32 12, float %19)  ; Cos(value)
  %20 = fmul fast float %Cos, %Sqrt
  %Sin4 = call float @dx.op.unary.f32(i32 13, float %19)  ; Sin(value)
  %21 = fmul fast float %Sin4, %Sqrt
  %22 = fsub fast float 1.000000e+00, %Frc1
  %FMax = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %22)  ; FMax(a,b)
  %Sqrt3 = call float @dx.op.unary.f32(i32 24, float %FMax)  ; Sqrt(value)
  %23 = insertelement <3 x float> undef, float %20, i64 0
  %24 = insertelement <3 x float> %23, float %21, i64 1
  %25 = insertelement <3 x float> %24, float %Sqrt3, i64 2
  ret <3 x float> %25
}

; Function Attrs: nounwind
define <3 x float> @"\01?GenerateRandomDirection@@YA?AV?$vector@M$02@@V1@@Z"(<3 x float> %normal) #2 {
  %1 = load %g_sceneCB, %g_sceneCB* @g_sceneCB, align 4
  %g_sceneCB14 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32 160, %g_sceneCB %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %DispatchRaysIndex12 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex11 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %DispatchRaysDimensions8 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %2 = mul i32 %DispatchRaysDimensions8, %DispatchRaysIndex11
  %3 = add i32 %2, %DispatchRaysIndex12
  %4 = load i32, i32* @seed, align 4, !tbaa !89
  %5 = add i32 %4, 1
  store i32 %5, i32* @seed, align 4, !tbaa !89
  %6 = add i32 %3, %4
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB14, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %9 = add i32 %6, %8
  %10 = uitofp i32 %9 to float
  %Sin2 = call float @dx.op.unary.f32(i32 13, float %10)  ; Sin(value)
  %11 = fmul fast float %Sin2, 0x40E55DD180000000
  %Frc1 = call float @dx.op.unary.f32(i32 22, float %11)  ; Frc(value)
  %12 = add i32 %4, 2
  store i32 %12, i32* @seed, align 4, !tbaa !89
  %13 = add i32 %3, %5
  %14 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB14, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.i32 %14, 0
  %16 = add i32 %13, %15
  %17 = uitofp i32 %16 to float
  %Sin = call float @dx.op.unary.f32(i32 13, float %17)  ; Sin(value)
  %18 = fmul fast float %Sin, 0x40E55DD180000000
  %Frc = call float @dx.op.unary.f32(i32 22, float %18)  ; Frc(value)
  %19 = fmul fast float %Frc1, %Frc1
  %20 = fsub fast float 1.000000e+00, %19
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %20)  ; Sqrt(value)
  %21 = fmul fast float %Frc, 0x40191EB860000000
  %Cos = call float @dx.op.unary.f32(i32 12, float %21)  ; Cos(value)
  %22 = fmul fast float %Cos, %Sqrt
  %Sin3 = call float @dx.op.unary.f32(i32 13, float %21)  ; Sin(value)
  %23 = fmul fast float %Sin3, %Sqrt
  %24 = extractelement <3 x float> %normal, i64 0
  %25 = extractelement <3 x float> %normal, i64 1
  %26 = extractelement <3 x float> %normal, i64 2
  %27 = call float @dx.op.dot3.f32(i32 55, float %24, float %25, float %26, float %22, float %23, float %Frc1)  ; Dot3(ax,ay,az,bx,by,bz)
  %28 = fcmp fast ogt float %27, 0.000000e+00
  %.i0 = fsub fast float -0.000000e+00, %22
  %.i1 = fsub fast float -0.000000e+00, %23
  %.i2 = fsub fast float -0.000000e+00, %Frc1
  %.0.i0 = select i1 %28, float %22, float %.i0
  %.0.i1 = select i1 %28, float %23, float %.i1
  %.0.i2 = select i1 %28, float %Frc1, float %.i2
  %.0.upto0 = insertelement <3 x float> undef, float %.0.i0, i32 0
  %.0.upto1 = insertelement <3 x float> %.0.upto0, float %.0.i1, i32 1
  %.0 = insertelement <3 x float> %.0.upto1, float %.0.i2, i32 2
  ret <3 x float> %.0
}

; Function Attrs: nounwind
define void @"\01?MyRaygenShader@@YAXXZ"() #2 {
  %1 = alloca %struct.LightPayload, align 8
  %2 = load %struct.RaytracingAccelerationStructure, %struct.RaytracingAccelerationStructure* @"\01?Scene@@3URaytracingAccelerationStructure@@A", align 4
  %3 = load %"class.RWTexture2D<vector<float, 4> >", %"class.RWTexture2D<vector<float, 4> >"* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A", align 4
  %4 = load %g_sceneCB, %g_sceneCB* @g_sceneCB, align 4
  %g_sceneCB33 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32 160, %g_sceneCB %4)  ; CreateHandleFromResourceStructForLib(Resource)
  %DispatchRaysIndex17 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex18 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %.i0 = uitofp i32 %DispatchRaysIndex17 to float
  %.i1 = uitofp i32 %DispatchRaysIndex18 to float
  %.i034 = fadd fast float %.i0, 5.000000e-01
  %.i135 = fadd fast float %.i1, 5.000000e-01
  %DispatchRaysDimensions15 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %DispatchRaysDimensions16 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 1)  ; DispatchRaysDimensions(col)
  %.i036 = uitofp i32 %DispatchRaysDimensions15 to float
  %.i137 = uitofp i32 %DispatchRaysDimensions16 to float
  %.i038 = fdiv fast float %.i034, %.i036
  %.i139 = fdiv fast float %.i135, %.i137
  %.i040 = fmul fast float %.i038, 2.000000e+00
  %.i141 = fmul fast float %.i139, 2.000000e+00
  %.i042 = fadd fast float %.i040, -1.000000e+00
  %.i046 = fdiv fast float 1.000000e+00, %.i036
  %.i147 = fdiv fast float 1.000000e+00, %.i137
  %5 = mul i32 %DispatchRaysDimensions15, %DispatchRaysIndex18
  %6 = add i32 %5, %DispatchRaysIndex17
  %7 = load i32, i32* @seed, align 4, !tbaa !89, !noalias !93
  %8 = add i32 %7, 1
  store i32 %8, i32* @seed, align 4, !tbaa !89, !noalias !93
  %9 = add i32 %6, %7
  %10 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %11 = extractvalue %dx.types.CBufRet.i32 %10, 0
  %12 = add i32 %9, %11
  %13 = uitofp i32 %12 to float
  %Sin2 = call float @dx.op.unary.f32(i32 13, float %13)  ; Sin(value)
  %14 = fmul fast float %Sin2, 0x40E55DD180000000
  %Frc1 = call float @dx.op.unary.f32(i32 22, float %14)  ; Frc(value)
  %15 = add i32 %7, 2
  store i32 %15, i32* @seed, align 4, !tbaa !89, !noalias !93
  %16 = add i32 %6, %8
  %17 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.i32 %17, 0
  %19 = add i32 %16, %18
  %20 = uitofp i32 %19 to float
  %Sin = call float @dx.op.unary.f32(i32 13, float %20)  ; Sin(value)
  %21 = fmul fast float %Sin, 0x40E55DD180000000
  %Frc = call float @dx.op.unary.f32(i32 22, float %21)  ; Frc(value)
  %.i048 = fmul fast float %Frc1, 2.000000e+00
  %.i149 = fmul fast float %Frc, 2.000000e+00
  %.i050 = fadd fast float %.i048, -1.000000e+00
  %.i151 = fadd fast float %.i149, -1.000000e+00
  %.i052 = fmul fast float %.i050, %.i046
  %.i153 = fmul fast float %.i151, %.i147
  %.i055 = fadd fast float %.i042, %.i052
  %.i143.neg = fsub fast float 1.000000e+00, %.i141
  %.i156 = fadd fast float %.i143.neg, %.i153
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %g_sceneCB33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %g_sceneCB33, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %g_sceneCB33, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.f32 %32, 0
  %34 = extractvalue %dx.types.CBufRet.f32 %32, 1
  %35 = extractvalue %dx.types.CBufRet.f32 %32, 2
  %36 = extractvalue %dx.types.CBufRet.f32 %32, 3
  %37 = fmul fast float %23, %.i055
  %FMad31 = call float @dx.op.tertiary.f32(i32 46, float %.i156, float %28, float %37)  ; FMad(a,b,c)
  %38 = fadd fast float %33, %FMad31
  %39 = fmul fast float %24, %.i055
  %FMad28 = call float @dx.op.tertiary.f32(i32 46, float %.i156, float %29, float %39)  ; FMad(a,b,c)
  %40 = fadd fast float %FMad28, %34
  %41 = fmul fast float %25, %.i055
  %FMad25 = call float @dx.op.tertiary.f32(i32 46, float %.i156, float %30, float %41)  ; FMad(a,b,c)
  %42 = fadd fast float %FMad25, %35
  %43 = fmul fast float %26, %.i055
  %FMad22 = call float @dx.op.tertiary.f32(i32 46, float %.i156, float %31, float %43)  ; FMad(a,b,c)
  %44 = fadd fast float %FMad22, %36
  %.i057 = fdiv fast float %38, %44
  %.i158 = fdiv fast float %40, %44
  %.i2 = fdiv fast float %42, %44
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %g_sceneCB33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %.i059 = fsub fast float %.i057, %46
  %.i160 = fsub fast float %.i158, %47
  %.i261 = fsub fast float %.i2, %48
  %49 = fmul fast float %.i059, %.i059
  %50 = fmul fast float %.i160, %.i160
  %51 = fadd fast float %49, %50
  %52 = fmul fast float %.i261, %.i261
  %53 = fadd fast float %51, %52
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %53)  ; Sqrt(value)
  %.i062 = fdiv fast float %.i059, %Sqrt
  %.i163 = fdiv fast float %.i160, %Sqrt
  %.i264 = fdiv fast float %.i261, %Sqrt
  %54 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %54, align 8
  %55 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 1
  store i32 1, i32* %55, align 8
  %56 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %2)  ; CreateHandleFromResourceStructForLib(Resource)
  call void @dx.op.traceRay.struct.LightPayload(i32 157, %dx.types.Handle %56, i32 0, i32 -1, i32 0, i32 1, i32 0, float %46, float %47, float %48, float 0x3F50624DE0000000, float %.i062, float %.i163, float %.i264, float 1.000000e+04, %struct.LightPayload* nonnull %1)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %57 = load <4 x float>, <4 x float>* %54, align 8
  %.i065 = extractelement <4 x float> %57, i32 0
  %.i167 = extractelement <4 x float> %57, i32 1
  %.i269 = extractelement <4 x float> %57, i32 2
  %.i3 = extractelement <4 x float> %57, i32 3
  %58 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.RWTexture2D<vector<float, 4> >"(i32 160, %"class.RWTexture2D<vector<float, 4> >" %3)  ; CreateHandleFromResourceStructForLib(Resource)
  %TextureLoad = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %58, i32 undef, i32 %DispatchRaysIndex17, i32 %DispatchRaysIndex18, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %59 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 0
  %60 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 1
  %61 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 2
  %62 = extractvalue %dx.types.ResRet.f32 %TextureLoad, 3
  %.i066 = fadd fast float %59, %.i065
  %.i168 = fadd fast float %60, %.i167
  %.i270 = fadd fast float %61, %.i269
  %.i371 = fadd fast float %62, %.i3
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %58, i32 %DispatchRaysIndex17, i32 %DispatchRaysIndex18, i32 undef, float %.i066, float %.i168, float %.i270, float %.i371, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  ret void
}

; Function Attrs: alwaysinline nounwind
define void @"\01?GetVertexAttribute@@YA?AUVertexAttribute@@I@Z"(%struct.VertexAttribute* noalias nocapture sret %agg.result, i32 %index) #0 {
  %1 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?AttributeBuffer@@3UByteAddressBuffer@@A", align 4
  %2 = shl i32 %index, 5
  %3 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %4 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3, i32 %2, i32 undef)  ; BufferLoad(srv,index,wot)
  %5 = extractvalue %dx.types.ResRet.i32 %4, 0
  %6 = extractvalue %dx.types.ResRet.i32 %4, 1
  %7 = extractvalue %dx.types.ResRet.i32 %4, 2
  %.i0 = bitcast i32 %5 to float
  %.i1 = bitcast i32 %6 to float
  %.i2 = bitcast i32 %7 to float
  %.upto0 = insertelement <3 x float> undef, float %.i0, i32 0
  %.upto1 = insertelement <3 x float> %.upto0, float %.i1, i32 1
  %8 = insertelement <3 x float> %.upto1, float %.i2, i32 2
  %9 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 0
  store <3 x float> %8, <3 x float>* %9, align 4, !tbaa !97
  %10 = or i32 %2, 12
  %11 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3, i32 %10, i32 undef)  ; BufferLoad(srv,index,wot)
  %12 = extractvalue %dx.types.ResRet.i32 %11, 0
  %13 = extractvalue %dx.types.ResRet.i32 %11, 1
  %14 = extractvalue %dx.types.ResRet.i32 %11, 2
  %.i03 = bitcast i32 %12 to float
  %.i14 = bitcast i32 %13 to float
  %.i25 = bitcast i32 %14 to float
  %.upto08 = insertelement <3 x float> undef, float %.i03, i32 0
  %.upto19 = insertelement <3 x float> %.upto08, float %.i14, i32 1
  %15 = insertelement <3 x float> %.upto19, float %.i25, i32 2
  %16 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 1
  store <3 x float> %15, <3 x float>* %16, align 4, !tbaa !97
  %17 = or i32 %2, 24
  %18 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3, i32 %17, i32 undef)  ; BufferLoad(srv,index,wot)
  %19 = extractvalue %dx.types.ResRet.i32 %18, 0
  %20 = extractvalue %dx.types.ResRet.i32 %18, 1
  %.i06 = bitcast i32 %19 to float
  %.i17 = bitcast i32 %20 to float
  %.upto010 = insertelement <2 x float> undef, float %.i06, i32 0
  %21 = insertelement <2 x float> %.upto010, float %.i17, i32 1
  %22 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 2
  store <2 x float> %21, <2 x float>* %22, align 4, !tbaa !97
  ret void
}

; Function Attrs: alwaysinline nounwind readnone
define <3 x float> @"\01?CalculateValueFromBarycentrics@@YA?AV?$vector@M$02@@V1@00V?$vector@M$01@@@Z"(<3 x float> %v0, <3 x float> %v1, <3 x float> %v2, <2 x float> %barycentrics) #3 {
  %v2.i0 = extractelement <3 x float> %v2, i32 0
  %v2.i1 = extractelement <3 x float> %v2, i32 1
  %v2.i2 = extractelement <3 x float> %v2, i32 2
  %v0.i0 = extractelement <3 x float> %v0, i32 0
  %v1.i0 = extractelement <3 x float> %v1, i32 0
  %v0.i1 = extractelement <3 x float> %v0, i32 1
  %v1.i1 = extractelement <3 x float> %v1, i32 1
  %v0.i2 = extractelement <3 x float> %v0, i32 2
  %v1.i2 = extractelement <3 x float> %v1, i32 2
  %1 = extractelement <2 x float> %barycentrics, i32 0
  %.i0 = fsub fast float %v1.i0, %v0.i0
  %.i1 = fsub fast float %v1.i1, %v0.i1
  %.i2 = fsub fast float %v1.i2, %v0.i2
  %.i01 = fmul fast float %1, %.i0
  %.i12 = fmul fast float %1, %.i1
  %.i23 = fmul fast float %1, %.i2
  %.i04 = fadd fast float %.i01, %v0.i0
  %.i15 = fadd fast float %.i12, %v0.i1
  %.i26 = fadd fast float %.i23, %v0.i2
  %2 = extractelement <2 x float> %barycentrics, i32 1
  %.i07 = fsub fast float %v2.i0, %v0.i0
  %.i18 = fsub fast float %v2.i1, %v0.i1
  %.i29 = fsub fast float %v2.i2, %v0.i2
  %.i010 = fmul fast float %2, %.i07
  %.i111 = fmul fast float %2, %.i18
  %.i212 = fmul fast float %2, %.i29
  %.i013 = fadd fast float %.i04, %.i010
  %.i114 = fadd fast float %.i15, %.i111
  %.i215 = fadd fast float %.i26, %.i212
  %.upto0 = insertelement <3 x float> undef, float %.i013, i32 0
  %.upto1 = insertelement <3 x float> %.upto0, float %.i114, i32 1
  %3 = insertelement <3 x float> %.upto1, float %.i215, i32 2
  ret <3 x float> %3
}

; Function Attrs: alwaysinline nounwind readnone
define <2 x float> @"\01?CalculateValueFromBarycentrics@@YA?AV?$vector@M$01@@V1@000@Z"(<2 x float> %v0, <2 x float> %v1, <2 x float> %v2, <2 x float> %barycentrics) #3 {
  %v2.i0 = extractelement <2 x float> %v2, i32 0
  %v2.i1 = extractelement <2 x float> %v2, i32 1
  %v0.i0 = extractelement <2 x float> %v0, i32 0
  %v1.i0 = extractelement <2 x float> %v1, i32 0
  %v0.i1 = extractelement <2 x float> %v0, i32 1
  %v1.i1 = extractelement <2 x float> %v1, i32 1
  %1 = extractelement <2 x float> %barycentrics, i32 0
  %.i0 = fsub fast float %v1.i0, %v0.i0
  %.i1 = fsub fast float %v1.i1, %v0.i1
  %.i01 = fmul fast float %1, %.i0
  %.i12 = fmul fast float %1, %.i1
  %.i03 = fadd fast float %.i01, %v0.i0
  %.i14 = fadd fast float %.i12, %v0.i1
  %2 = extractelement <2 x float> %barycentrics, i32 1
  %.i05 = fsub fast float %v2.i0, %v0.i0
  %.i16 = fsub fast float %v2.i1, %v0.i1
  %.i07 = fmul fast float %2, %.i05
  %.i18 = fmul fast float %2, %.i16
  %.i09 = fadd fast float %.i03, %.i07
  %.i110 = fadd fast float %.i14, %.i18
  %.upto0 = insertelement <2 x float> undef, float %.i09, i32 0
  %3 = insertelement <2 x float> %.upto0, float %.i110, i32 1
  ret <2 x float> %3
}

; Function Attrs: alwaysinline nounwind
define void @"\01?GetAttributes@@YA?AUVertexAttribute@@V?$vector@I$02@@V?$vector@M$01@@@Z"(%struct.VertexAttribute* noalias nocapture sret %agg.result, <3 x i32> %indicies, <2 x float> %barycentrics) #0 {
  %1 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?AttributeBuffer@@3UByteAddressBuffer@@A", align 4
  %2 = extractelement <3 x i32> %indicies, i32 0
  %3 = shl i32 %2, 5
  %4 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %5 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %3, i32 undef)  ; BufferLoad(srv,index,wot)
  %6 = extractvalue %dx.types.ResRet.i32 %5, 0
  %7 = extractvalue %dx.types.ResRet.i32 %5, 1
  %8 = extractvalue %dx.types.ResRet.i32 %5, 2
  %.i0 = bitcast i32 %6 to float
  %.i1 = bitcast i32 %7 to float
  %.i2 = bitcast i32 %8 to float
  %9 = or i32 %3, 12
  %10 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %9, i32 undef)  ; BufferLoad(srv,index,wot)
  %11 = extractvalue %dx.types.ResRet.i32 %10, 0
  %12 = extractvalue %dx.types.ResRet.i32 %10, 1
  %13 = extractvalue %dx.types.ResRet.i32 %10, 2
  %.i010 = bitcast i32 %11 to float
  %.i111 = bitcast i32 %12 to float
  %.i212 = bitcast i32 %13 to float
  %14 = or i32 %3, 24
  %15 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %14, i32 undef)  ; BufferLoad(srv,index,wot)
  %16 = extractvalue %dx.types.ResRet.i32 %15, 0
  %17 = extractvalue %dx.types.ResRet.i32 %15, 1
  %.i013 = bitcast i32 %16 to float
  %.i114 = bitcast i32 %17 to float
  %18 = extractelement <3 x i32> %indicies, i32 1
  %19 = shl i32 %18, 5
  %20 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %19, i32 undef)  ; BufferLoad(srv,index,wot)
  %21 = extractvalue %dx.types.ResRet.i32 %20, 0
  %22 = extractvalue %dx.types.ResRet.i32 %20, 1
  %23 = extractvalue %dx.types.ResRet.i32 %20, 2
  %.i015 = bitcast i32 %21 to float
  %.i116 = bitcast i32 %22 to float
  %.i217 = bitcast i32 %23 to float
  %24 = or i32 %19, 12
  %25 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %24, i32 undef)  ; BufferLoad(srv,index,wot)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 0
  %27 = extractvalue %dx.types.ResRet.i32 %25, 1
  %28 = extractvalue %dx.types.ResRet.i32 %25, 2
  %.i018 = bitcast i32 %26 to float
  %.i119 = bitcast i32 %27 to float
  %.i220 = bitcast i32 %28 to float
  %29 = or i32 %19, 24
  %30 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %29, i32 undef)  ; BufferLoad(srv,index,wot)
  %31 = extractvalue %dx.types.ResRet.i32 %30, 0
  %32 = extractvalue %dx.types.ResRet.i32 %30, 1
  %.i021 = bitcast i32 %31 to float
  %.i122 = bitcast i32 %32 to float
  %33 = extractelement <3 x i32> %indicies, i32 2
  %34 = shl i32 %33, 5
  %35 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %34, i32 undef)  ; BufferLoad(srv,index,wot)
  %36 = extractvalue %dx.types.ResRet.i32 %35, 0
  %37 = extractvalue %dx.types.ResRet.i32 %35, 1
  %38 = extractvalue %dx.types.ResRet.i32 %35, 2
  %.i023 = bitcast i32 %36 to float
  %.i124 = bitcast i32 %37 to float
  %.i225 = bitcast i32 %38 to float
  %39 = or i32 %34, 12
  %40 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %39, i32 undef)  ; BufferLoad(srv,index,wot)
  %41 = extractvalue %dx.types.ResRet.i32 %40, 0
  %42 = extractvalue %dx.types.ResRet.i32 %40, 1
  %43 = extractvalue %dx.types.ResRet.i32 %40, 2
  %.i026 = bitcast i32 %41 to float
  %.i127 = bitcast i32 %42 to float
  %.i228 = bitcast i32 %43 to float
  %44 = or i32 %34, 24
  %45 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %4, i32 %44, i32 undef)  ; BufferLoad(srv,index,wot)
  %46 = extractvalue %dx.types.ResRet.i32 %45, 0
  %47 = extractvalue %dx.types.ResRet.i32 %45, 1
  %.i029 = bitcast i32 %46 to float
  %.i130 = bitcast i32 %47 to float
  %48 = extractelement <2 x float> %barycentrics, i32 0
  %.i031 = fsub fast float %.i015, %.i0
  %.i132 = fsub fast float %.i116, %.i1
  %.i233 = fsub fast float %.i217, %.i2
  %.i034 = fmul fast float %.i031, %48
  %.i135 = fmul fast float %.i132, %48
  %.i236 = fmul fast float %.i233, %48
  %.i037 = fadd fast float %.i034, %.i0
  %.i138 = fadd fast float %.i135, %.i1
  %.i239 = fadd fast float %.i236, %.i2
  %49 = extractelement <2 x float> %barycentrics, i32 1
  %.i040 = fsub fast float %.i023, %.i0
  %.i141 = fsub fast float %.i124, %.i1
  %.i242 = fsub fast float %.i225, %.i2
  %.i043 = fmul fast float %.i040, %49
  %.i144 = fmul fast float %.i141, %49
  %.i245 = fmul fast float %.i242, %49
  %.i046 = fadd fast float %.i037, %.i043
  %.i147 = fadd fast float %.i138, %.i144
  %.i248 = fadd fast float %.i239, %.i245
  %50 = fmul fast float %.i046, %.i046
  %51 = fmul fast float %.i147, %.i147
  %52 = fadd fast float %50, %51
  %53 = fmul fast float %.i248, %.i248
  %54 = fadd fast float %52, %53
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %54)  ; Sqrt(value)
  %.i049 = fdiv fast float %.i046, %Sqrt
  %.i150 = fdiv fast float %.i147, %Sqrt
  %.i251 = fdiv fast float %.i248, %Sqrt
  %.upto085 = insertelement <3 x float> undef, float %.i049, i32 0
  %.upto186 = insertelement <3 x float> %.upto085, float %.i150, i32 1
  %55 = insertelement <3 x float> %.upto186, float %.i251, i32 2
  %56 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 0
  store <3 x float> %55, <3 x float>* %56, align 4, !tbaa !97
  %.i052 = fsub fast float %.i018, %.i010
  %.i153 = fsub fast float %.i119, %.i111
  %.i254 = fsub fast float %.i220, %.i212
  %.i055 = fmul fast float %.i052, %48
  %.i156 = fmul fast float %.i153, %48
  %.i257 = fmul fast float %.i254, %48
  %.i058 = fadd fast float %.i055, %.i010
  %.i159 = fadd fast float %.i156, %.i111
  %.i260 = fadd fast float %.i257, %.i212
  %.i061 = fsub fast float %.i026, %.i010
  %.i162 = fsub fast float %.i127, %.i111
  %.i263 = fsub fast float %.i228, %.i212
  %.i064 = fmul fast float %.i061, %49
  %.i165 = fmul fast float %.i162, %49
  %.i266 = fmul fast float %.i263, %49
  %.i067 = fadd fast float %.i058, %.i064
  %.i168 = fadd fast float %.i159, %.i165
  %.i269 = fadd fast float %.i260, %.i266
  %57 = fmul fast float %.i067, %.i067
  %58 = fmul fast float %.i168, %.i168
  %59 = fadd fast float %57, %58
  %60 = fmul fast float %.i269, %.i269
  %61 = fadd fast float %59, %60
  %Sqrt9 = call float @dx.op.unary.f32(i32 24, float %61)  ; Sqrt(value)
  %.i070 = fdiv fast float %.i067, %Sqrt9
  %.i171 = fdiv fast float %.i168, %Sqrt9
  %.i272 = fdiv fast float %.i269, %Sqrt9
  %.upto089 = insertelement <3 x float> undef, float %.i070, i32 0
  %.upto190 = insertelement <3 x float> %.upto089, float %.i171, i32 1
  %62 = insertelement <3 x float> %.upto190, float %.i272, i32 2
  %63 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 1
  store <3 x float> %62, <3 x float>* %63, align 4, !tbaa !97
  %.i073 = fsub fast float %.i021, %.i013
  %.i174 = fsub fast float %.i122, %.i114
  %.i075 = fmul fast float %.i073, %48
  %.i176 = fmul fast float %.i174, %48
  %.i077 = fadd fast float %.i075, %.i013
  %.i178 = fadd fast float %.i176, %.i114
  %.i079 = fsub fast float %.i029, %.i013
  %.i180 = fsub fast float %.i130, %.i114
  %.i081 = fmul fast float %.i079, %49
  %.i182 = fmul fast float %.i180, %49
  %.i083 = fadd fast float %.i077, %.i081
  %.i184 = fadd fast float %.i178, %.i182
  %.upto091 = insertelement <2 x float> undef, float %.i083, i32 0
  %64 = insertelement <2 x float> %.upto091, float %.i184, i32 1
  %65 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %agg.result, i32 0, i32 2
  store <2 x float> %64, <2 x float>* %65, align 4, !tbaa !97
  ret void
}

; Function Attrs: alwaysinline nounwind readonly
define <4 x float> @"\01?GetDiffuseColor@@YA?AV?$vector@M$03@@UVertexAttribute@@@Z"(%struct.VertexAttribute* nocapture readonly %attributes) #1 {
  %1 = load %Material, %Material* @Material, align 4
  %Material = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.Material(i32 160, %Material %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %2 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %Material, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3 = extractvalue %dx.types.CBufRet.i32 %2, 3
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

; <label>:5                                       ; preds = %0
  %6 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?DiffuseTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?PointSampler@@3USamplerState@@A", align 4
  %8 = getelementptr inbounds %struct.VertexAttribute, %struct.VertexAttribute* %attributes, i32 0, i32 2
  %9 = load <2 x float>, <2 x float>* %8, align 4, !tbaa !97
  %10 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %6)  ; CreateHandleFromResourceStructForLib(Resource)
  %11 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleFromResourceStructForLib(Resource)
  %12 = extractelement <2 x float> %9, i64 0
  %13 = extractelement <2 x float> %9, i64 1
  %14 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %10, %dx.types.Handle %11, float %12, float %13, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %15 = extractvalue %dx.types.ResRet.f32 %14, 0
  %16 = extractvalue %dx.types.ResRet.f32 %14, 1
  %17 = extractvalue %dx.types.ResRet.f32 %14, 2
  %18 = extractvalue %dx.types.ResRet.f32 %14, 3
  br label %25

; <label>:19                                      ; preds = %0
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %Material, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = extractvalue %dx.types.CBufRet.f32 %20, 3
  br label %25

; <label>:25                                      ; preds = %19, %5
  %.0.i0 = phi float [ %15, %5 ], [ %21, %19 ]
  %.0.i1 = phi float [ %16, %5 ], [ %22, %19 ]
  %.0.i2 = phi float [ %17, %5 ], [ %23, %19 ]
  %.0.i3 = phi float [ %18, %5 ], [ %24, %19 ]
  %.0.upto0 = insertelement <4 x float> undef, float %.0.i0, i32 0
  %.0.upto1 = insertelement <4 x float> %.0.upto0, float %.0.i1, i32 1
  %.0.upto2 = insertelement <4 x float> %.0.upto1, float %.0.i2, i32 2
  %.0 = insertelement <4 x float> %.0.upto2, float %.0.i3, i32 3
  ret <4 x float> %.0
}

; Function Attrs: alwaysinline nounwind readonly
define <3 x float> @"\01?HitPosition@@YA?AV?$vector@M$02@@XZ"() #1 {
  %WorldRayOrigin = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %WorldRayOrigin3 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %WorldRayOrigin4 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %RayTCurrent = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %WorldRayDirection = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %WorldRayDirection1 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %WorldRayDirection2 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %.i0 = fmul fast float %WorldRayDirection, %RayTCurrent
  %.i1 = fmul fast float %WorldRayDirection1, %RayTCurrent
  %.i2 = fmul fast float %WorldRayDirection2, %RayTCurrent
  %.i05 = fadd fast float %.i0, %WorldRayOrigin
  %.i16 = fadd fast float %.i1, %WorldRayOrigin3
  %.i27 = fadd fast float %.i2, %WorldRayOrigin4
  %.upto0 = insertelement <3 x float> undef, float %.i05, i32 0
  %.upto1 = insertelement <3 x float> %.upto0, float %.i16, i32 1
  %1 = insertelement <3 x float> %.upto1, float %.i27, i32 2
  ret <3 x float> %1
}

; Function Attrs: alwaysinline nounwind
define <4 x float> @"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z"(<3 x float> %origin, <3 x float> %direction, i32 %recursionLevel) #0 {
  %1 = alloca %struct.LightPayload, align 8
  %2 = add i32 %recursionLevel, 1
  %3 = icmp ult i32 %2, 3
  br i1 %3, label %4, label %16

; <label>:4                                       ; preds = %0
  %5 = load %struct.RaytracingAccelerationStructure, %struct.RaytracingAccelerationStructure* @"\01?Scene@@3URaytracingAccelerationStructure@@A", align 4
  %6 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %6, align 8
  %7 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %5)  ; CreateHandleFromResourceStructForLib(Resource)
  %9 = extractelement <3 x float> %origin, i64 0
  %10 = extractelement <3 x float> %origin, i64 1
  %11 = extractelement <3 x float> %origin, i64 2
  %12 = extractelement <3 x float> %direction, i64 0
  %13 = extractelement <3 x float> %direction, i64 1
  %14 = extractelement <3 x float> %direction, i64 2
  call void @dx.op.traceRay.struct.LightPayload(i32 157, %dx.types.Handle %8, i32 16, i32 255, i32 0, i32 1, i32 0, float %9, float %10, float %11, float 0x3F50624DE0000000, float %12, float %13, float %14, float 1.000000e+04, %struct.LightPayload* nonnull %1)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %15 = load <4 x float>, <4 x float>* %6, align 8
  %.i0 = extractelement <4 x float> %15, i32 0
  %.i1 = extractelement <4 x float> %15, i32 1
  %.i2 = extractelement <4 x float> %15, i32 2
  %.i3 = extractelement <4 x float> %15, i32 3
  br label %35

; <label>:16                                      ; preds = %0
  %17 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %18 = load %struct.SamplerState, %struct.SamplerState* @"\01?LinearSampler@@3USamplerState@@A", align 4
  %19 = extractelement <3 x float> %direction, i32 0
  %20 = extractelement <3 x float> %direction, i32 2
  %21 = fdiv fast float %20, %19
  %Atan = call float @dx.op.unary.f32(i32 17, float %21)  ; Atan(value)
  %22 = fcmp fast ogt float %Atan, 0.000000e+00
  %23 = fadd fast float %Atan, 0x40191EB860000000
  %24 = select i1 %22, float %Atan, float %23
  %25 = fmul fast float %24, 0x3FC461D580000000
  %26 = extractelement <3 x float> %direction, i32 1
  %Acos = call float @dx.op.unary.f32(i32 15, float %26)  ; Acos(value)
  %27 = fmul fast float %Acos, 0x3FD461D580000000
  %28 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %17)  ; CreateHandleFromResourceStructForLib(Resource)
  %29 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %18)  ; CreateHandleFromResourceStructForLib(Resource)
  %30 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %28, %dx.types.Handle %29, float %25, float %27, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 0
  %32 = extractvalue %dx.types.ResRet.f32 %30, 1
  %33 = extractvalue %dx.types.ResRet.f32 %30, 2
  %34 = extractvalue %dx.types.ResRet.f32 %30, 3
  br label %35

; <label>:35                                      ; preds = %16, %4
  %.0.i0 = phi float [ %.i0, %4 ], [ %31, %16 ]
  %.0.i1 = phi float [ %.i1, %4 ], [ %32, %16 ]
  %.0.i2 = phi float [ %.i2, %4 ], [ %33, %16 ]
  %.0.i3 = phi float [ %.i3, %4 ], [ %34, %16 ]
  %.0.upto0 = insertelement <4 x float> undef, float %.0.i0, i32 0
  %.0.upto1 = insertelement <4 x float> %.0.upto0, float %.0.i1, i32 1
  %.0.upto2 = insertelement <4 x float> %.0.upto1, float %.0.i2, i32 2
  %.0 = insertelement <4 x float> %.0.upto2, float %.0.i3, i32 3
  ret <4 x float> %.0
}

; Function Attrs: nounwind
define void @"\01?MyClosestHitShader@@YAXULightPayload@@UBuiltInTriangleIntersectionAttributes@@@Z"(%struct.LightPayload* noalias nocapture %payload, %struct.BuiltInTriangleIntersectionAttributes* nocapture readonly %attr) #2 {
  %1 = alloca %struct.LightPayload, align 8
  %2 = alloca %struct.LightPayload, align 8
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?PointSampler@@3USamplerState@@A", align 4
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?LinearSampler@@3USamplerState@@A", align 4
  %5 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?DiffuseTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %6 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?AttributeBuffer@@3UByteAddressBuffer@@A", align 4
  %7 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?IndexBuffer@@3V?$Buffer@I@@A", align 4
  %8 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %9 = load %struct.RaytracingAccelerationStructure, %struct.RaytracingAccelerationStructure* @"\01?Scene@@3URaytracingAccelerationStructure@@A", align 4
  %10 = load %Material, %Material* @Material, align 4
  %11 = load %g_sceneCB, %g_sceneCB* @g_sceneCB, align 4
  %Material93 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.Material(i32 160, %Material %10)  ; CreateHandleFromResourceStructForLib(Resource)
  %g_sceneCB92 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32 160, %g_sceneCB %11)  ; CreateHandleFromResourceStructForLib(Resource)
  %12 = alloca %struct.OcclusionPayload, align 8
  %PrimitiveID = call i32 @dx.op.primitiveID.i32(i32 108)  ; PrimitiveID()
  %13 = mul i32 %PrimitiveID, 3
  %14 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %7)  ; CreateHandleFromResourceStructForLib(Resource)
  %BufferLoad = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %13, i32 undef)  ; BufferLoad(srv,index,wot)
  %15 = extractvalue %dx.types.ResRet.i32 %BufferLoad, 0
  %16 = add i32 %13, 1
  %BufferLoad84 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %16, i32 undef)  ; BufferLoad(srv,index,wot)
  %17 = extractvalue %dx.types.ResRet.i32 %BufferLoad84, 0
  %18 = add i32 %13, 2
  %BufferLoad85 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %18, i32 undef)  ; BufferLoad(srv,index,wot)
  %19 = extractvalue %dx.types.ResRet.i32 %BufferLoad85, 0
  %20 = getelementptr inbounds %struct.BuiltInTriangleIntersectionAttributes, %struct.BuiltInTriangleIntersectionAttributes* %attr, i32 0, i32 0
  %21 = load <2 x float>, <2 x float>* %20, align 4, !tbaa !97
  %22 = shl i32 %15, 5
  %23 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %6)  ; CreateHandleFromResourceStructForLib(Resource)
  %24 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %22, i32 undef)  ; BufferLoad(srv,index,wot)
  %25 = extractvalue %dx.types.ResRet.i32 %24, 0
  %26 = extractvalue %dx.types.ResRet.i32 %24, 1
  %27 = extractvalue %dx.types.ResRet.i32 %24, 2
  %.i0 = bitcast i32 %25 to float
  %.i1 = bitcast i32 %26 to float
  %.i2 = bitcast i32 %27 to float
  %28 = or i32 %22, 24
  %29 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %28, i32 undef)  ; BufferLoad(srv,index,wot)
  %30 = extractvalue %dx.types.ResRet.i32 %29, 0
  %31 = extractvalue %dx.types.ResRet.i32 %29, 1
  %.i094 = bitcast i32 %30 to float
  %.i195 = bitcast i32 %31 to float
  %32 = shl i32 %17, 5
  %33 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %32, i32 undef)  ; BufferLoad(srv,index,wot)
  %34 = extractvalue %dx.types.ResRet.i32 %33, 0
  %35 = extractvalue %dx.types.ResRet.i32 %33, 1
  %36 = extractvalue %dx.types.ResRet.i32 %33, 2
  %.i096 = bitcast i32 %34 to float
  %.i197 = bitcast i32 %35 to float
  %.i298 = bitcast i32 %36 to float
  %37 = or i32 %32, 24
  %38 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %37, i32 undef)  ; BufferLoad(srv,index,wot)
  %39 = extractvalue %dx.types.ResRet.i32 %38, 0
  %40 = extractvalue %dx.types.ResRet.i32 %38, 1
  %.i099 = bitcast i32 %39 to float
  %.i1100 = bitcast i32 %40 to float
  %41 = shl i32 %19, 5
  %42 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %41, i32 undef)  ; BufferLoad(srv,index,wot)
  %43 = extractvalue %dx.types.ResRet.i32 %42, 0
  %44 = extractvalue %dx.types.ResRet.i32 %42, 1
  %45 = extractvalue %dx.types.ResRet.i32 %42, 2
  %.i0101 = bitcast i32 %43 to float
  %.i1102 = bitcast i32 %44 to float
  %.i2103 = bitcast i32 %45 to float
  %46 = or i32 %41, 24
  %47 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %23, i32 %46, i32 undef)  ; BufferLoad(srv,index,wot)
  %48 = extractvalue %dx.types.ResRet.i32 %47, 0
  %49 = extractvalue %dx.types.ResRet.i32 %47, 1
  %.i0104 = bitcast i32 %48 to float
  %.i1105 = bitcast i32 %49 to float
  %50 = extractelement <2 x float> %21, i32 0
  %.i0106 = fsub fast float %.i096, %.i0
  %.i1107 = fsub fast float %.i197, %.i1
  %.i2108 = fsub fast float %.i298, %.i2
  %.i0109 = fmul fast float %.i0106, %50
  %.i1110 = fmul fast float %.i1107, %50
  %.i2111 = fmul fast float %.i2108, %50
  %.i0112 = fadd fast float %.i0109, %.i0
  %.i1113 = fadd fast float %.i1110, %.i1
  %.i2114 = fadd fast float %.i2111, %.i2
  %51 = extractelement <2 x float> %21, i32 1
  %.i0115 = fsub fast float %.i0101, %.i0
  %.i1116 = fsub fast float %.i1102, %.i1
  %.i2117 = fsub fast float %.i2103, %.i2
  %.i0118 = fmul fast float %.i0115, %51
  %.i1119 = fmul fast float %.i1116, %51
  %.i2120 = fmul fast float %.i2117, %51
  %.i0121 = fadd fast float %.i0112, %.i0118
  %.i1122 = fadd fast float %.i1113, %.i1119
  %.i2123 = fadd fast float %.i2114, %.i2120
  %52 = fmul fast float %.i0121, %.i0121
  %53 = fmul fast float %.i1122, %.i1122
  %54 = fadd fast float %52, %53
  %55 = fmul fast float %.i2123, %.i2123
  %56 = fadd fast float %54, %55
  %Sqrt = call float @dx.op.unary.f32(i32 24, float %56)  ; Sqrt(value)
  %.i0124 = fdiv fast float %.i0121, %Sqrt
  %.i1125 = fdiv fast float %.i1122, %Sqrt
  %.i2126 = fdiv fast float %.i2123, %Sqrt
  %.i0127 = fsub fast float %.i099, %.i094
  %.i1128 = fsub fast float %.i1100, %.i195
  %.i0129 = fmul fast float %.i0127, %50
  %.i1130 = fmul fast float %.i1128, %50
  %.i0131 = fadd fast float %.i0129, %.i094
  %.i1132 = fadd fast float %.i1130, %.i195
  %.i0133 = fsub fast float %.i0104, %.i094
  %.i1134 = fsub fast float %.i1105, %.i195
  %.i0135 = fmul fast float %.i0133, %51
  %.i1136 = fmul fast float %.i1134, %51
  %.i0137 = fadd fast float %.i0131, %.i0135
  %.i1138 = fadd fast float %.i1132, %.i1136
  %57 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %payload, i32 0, i32 1
  %58 = load i32, i32* %57, align 4, !tbaa !89
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %.preheader, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %0
  %.pre = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %.pre229 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %.pre230 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  br label %.loopexit

.preheader:                                       ; preds = %0
  %WorldRayOrigin76 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %WorldRayOrigin77 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %WorldRayOrigin78 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %WorldRayDirection73 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %WorldRayDirection74 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %WorldRayDirection75 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %DispatchRaysIndex53 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex52 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %DispatchRaysDimensions49 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %60 = mul i32 %DispatchRaysDimensions49, %DispatchRaysIndex52
  %61 = add i32 %60, %DispatchRaysIndex53
  %62 = getelementptr inbounds %struct.OcclusionPayload, %struct.OcclusionPayload* %12, i32 0, i32 0
  br label %63

; <label>:63                                      ; preds = %63, %.preheader
  %i.09 = phi i32 [ %95, %63 ], [ 0, %.preheader ]
  %percentVisible.08 = phi float [ %.percentVisible.08, %63 ], [ 1.000000e+00, %.preheader ]
  %RayTCurrent83 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %.i0139 = fmul fast float %WorldRayDirection73, %RayTCurrent83
  %.i1140 = fmul fast float %WorldRayDirection74, %RayTCurrent83
  %.i2141 = fmul fast float %WorldRayDirection75, %RayTCurrent83
  %.i0142 = fadd fast float %.i0139, %WorldRayOrigin76
  %.i1143 = fadd fast float %.i1140, %WorldRayOrigin77
  %.i2144 = fadd fast float %.i2141, %WorldRayOrigin78
  %64 = load i32, i32* @seed, align 4, !tbaa !89
  %65 = add i32 %64, 1
  store i32 %65, i32* @seed, align 4, !tbaa !89
  %66 = add i32 %61, %64
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = add i32 %66, %68
  %70 = uitofp i32 %69 to float
  %Sin20 = call float @dx.op.unary.f32(i32 13, float %70)  ; Sin(value)
  %71 = fmul fast float %Sin20, 0x40E55DD180000000
  %Frc19 = call float @dx.op.unary.f32(i32 22, float %71)  ; Frc(value)
  %72 = add i32 %64, 2
  store i32 %72, i32* @seed, align 4, !tbaa !89
  %73 = add i32 %61, %65
  %74 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.i32 %74, 0
  %76 = add i32 %73, %75
  %77 = uitofp i32 %76 to float
  %Sin18 = call float @dx.op.unary.f32(i32 13, float %77)  ; Sin(value)
  %78 = fmul fast float %Sin18, 0x40E55DD180000000
  %Frc17 = call float @dx.op.unary.f32(i32 22, float %78)  ; Frc(value)
  %79 = add i32 %64, 3
  store i32 %79, i32* @seed, align 4, !tbaa !89
  %80 = add i32 %61, %72
  %81 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.i32 %81, 0
  %83 = add i32 %80, %82
  %84 = uitofp i32 %83 to float
  %Sin16 = call float @dx.op.unary.f32(i32 13, float %84)  ; Sin(value)
  %85 = fmul fast float %Sin16, 0x40E55DD180000000
  %Frc15 = call float @dx.op.unary.f32(i32 22, float %85)  ; Frc(value)
  %.i0145 = fadd fast float %Frc19, %.i0124
  %.i1146 = fadd fast float %Frc17, %.i1125
  %.i2147 = fadd fast float %Frc15, %.i2126
  %86 = fmul fast float %.i0145, %.i0145
  %87 = fmul fast float %.i1146, %.i1146
  %88 = fadd fast float %87, %86
  %89 = fmul fast float %.i2147, %.i2147
  %90 = fadd fast float %88, %89
  %Sqrt61 = call float @dx.op.unary.f32(i32 24, float %90)  ; Sqrt(value)
  %.i0148 = fdiv fast float %.i0145, %Sqrt61
  %.i1149 = fdiv fast float %.i1146, %Sqrt61
  %.i2150 = fdiv fast float %.i2147, %Sqrt61
  store i32 1, i32* %62, align 8
  %91 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %9)  ; CreateHandleFromResourceStructForLib(Resource)
  call void @dx.op.traceRay.struct.OcclusionPayload(i32 157, %dx.types.Handle %91, i32 28, i32 255, i32 0, i32 1, i32 1, float %.i0142, float %.i1143, float %.i2144, float 0x3F50624DE0000000, float %.i0148, float %.i1149, float %.i2150, float 1.000000e+04, %struct.OcclusionPayload* nonnull %12)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %92 = load i32, i32* %62, align 8
  %93 = icmp ne i32 %92, 0
  %94 = fadd fast float %percentVisible.08, -1.250000e-01
  %.percentVisible.08 = select i1 %93, float %94, float %percentVisible.08
  %95 = add nuw nsw i32 %i.09, 1
  %exitcond = icmp eq i32 %95, 4
  br i1 %exitcond, label %.loopexit.loopexit, label %63

.loopexit.loopexit:                               ; preds = %63
  %.percentVisible.08.lcssa = phi float [ %.percentVisible.08, %63 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %..loopexit_crit_edge
  %WorldRayDirection81.pre-phi = phi float [ %.pre230, %..loopexit_crit_edge ], [ %WorldRayDirection75, %.loopexit.loopexit ]
  %WorldRayDirection80.pre-phi = phi float [ %.pre229, %..loopexit_crit_edge ], [ %WorldRayDirection74, %.loopexit.loopexit ]
  %WorldRayDirection79.pre-phi = phi float [ %.pre, %..loopexit_crit_edge ], [ %WorldRayDirection73, %.loopexit.loopexit ]
  %percentVisible.2 = phi float [ 1.000000e+00, %..loopexit_crit_edge ], [ %.percentVisible.08.lcssa, %.loopexit.loopexit ]
  %96 = call float @dx.op.dot3.f32(i32 55, float %WorldRayDirection79.pre-phi, float %WorldRayDirection80.pre-phi, float %WorldRayDirection81.pre-phi, float %.i0124, float %.i1125, float %.i2126)  ; Dot3(ax,ay,az,bx,by,bz)
  %97 = fmul fast float %96, 2.000000e+00
  %.i0151 = fmul fast float %97, %.i0124
  %.i1152 = fmul fast float %97, %.i1125
  %.i2153 = fmul fast float %97, %.i2126
  %.i0154 = fsub fast float %WorldRayDirection79.pre-phi, %.i0151
  %.i1155 = fsub fast float %WorldRayDirection80.pre-phi, %.i1152
  %.i2156 = fsub fast float %WorldRayDirection81.pre-phi, %.i2153
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %Material93, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %100 = fadd fast float %99, -1.000000e+00
  %101 = fmul fast float %100, %100
  %102 = fadd fast float %99, 1.000000e+00
  %103 = fmul fast float %102, %102
  %104 = fdiv fast float %101, %103
  %105 = fsub fast float 1.000000e+00, %104
  %106 = call float @dx.op.dot3.f32(i32 55, float %.i0154, float %.i1155, float %.i2156, float %.i0124, float %.i1125, float %.i2126)  ; Dot3(ax,ay,az,bx,by,bz)
  %Saturate = call float @dx.op.unary.f32(i32 7, float %106)  ; Saturate(value)
  %107 = fsub fast float 1.000000e+00, %Saturate
  %Log = call float @dx.op.unary.f32(i32 23, float %107)  ; Log(value)
  %108 = fmul fast float %Log, 5.000000e+00
  %Exp = call float @dx.op.unary.f32(i32 21, float %108)  ; Exp(value)
  %109 = fmul fast float %Exp, %105
  %110 = fadd fast float %109, %104
  %111 = fcmp fast ogt float %110, 0x3F50624DE0000000
  br i1 %111, label %112, label %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge"

".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge": ; preds = %.loopexit
  %.pre231 = add i32 %58, 1
  br label %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit"

; <label>:112                                     ; preds = %.loopexit
  %RayTCurrent82 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %113 = add i32 %58, 1
  %114 = icmp ult i32 %113, 3
  br i1 %114, label %115, label %120

; <label>:115                                     ; preds = %112
  %WorldRayOrigin70 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %.i0157 = fmul fast float %WorldRayDirection79.pre-phi, %RayTCurrent82
  %.i0160 = fadd fast float %.i0157, %WorldRayOrigin70
  %WorldRayOrigin71 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %.i1158 = fmul fast float %WorldRayDirection80.pre-phi, %RayTCurrent82
  %.i1161 = fadd fast float %.i1158, %WorldRayOrigin71
  %WorldRayOrigin72 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %.i2159 = fmul fast float %WorldRayDirection81.pre-phi, %RayTCurrent82
  %.i2162 = fadd fast float %.i2159, %WorldRayOrigin72
  %116 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %2, i32 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %116, align 8
  %117 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %2, i32 0, i32 1
  store i32 %113, i32* %117, align 8
  %118 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %9)  ; CreateHandleFromResourceStructForLib(Resource)
  call void @dx.op.traceRay.struct.LightPayload(i32 157, %dx.types.Handle %118, i32 16, i32 255, i32 0, i32 1, i32 0, float %.i0160, float %.i1161, float %.i2162, float 0x3F50624DE0000000, float %.i0154, float %.i1155, float %.i2156, float 1.000000e+04, %struct.LightPayload* nonnull %2)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %119 = load <4 x float>, <4 x float>* %116, align 8
  %.i0163 = extractelement <4 x float> %119, i32 0
  %.i1164 = extractelement <4 x float> %119, i32 1
  %.i2165 = extractelement <4 x float> %119, i32 2
  %.i3 = extractelement <4 x float> %119, i32 3
  br label %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit"

; <label>:120                                     ; preds = %112
  %121 = fdiv fast float %.i2156, %.i0154
  %Atan55 = call float @dx.op.unary.f32(i32 17, float %121)  ; Atan(value)
  %122 = fcmp fast ogt float %Atan55, 0.000000e+00
  %123 = fadd fast float %Atan55, 0x40191EB860000000
  %124 = select i1 %122, float %Atan55, float %123
  %125 = fmul fast float %124, 0x3FC461D580000000
  %Acos14 = call float @dx.op.unary.f32(i32 15, float %.i1155)  ; Acos(value)
  %126 = fmul fast float %Acos14, 0x3FD461D580000000
  %127 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %8)  ; CreateHandleFromResourceStructForLib(Resource)
  %128 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleFromResourceStructForLib(Resource)
  %129 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %127, %dx.types.Handle %128, float %125, float %126, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %130 = extractvalue %dx.types.ResRet.f32 %129, 0
  %131 = extractvalue %dx.types.ResRet.f32 %129, 1
  %132 = extractvalue %dx.types.ResRet.f32 %129, 2
  %133 = extractvalue %dx.types.ResRet.f32 %129, 3
  br label %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit"

"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit": ; preds = %120, %115, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge"
  %.pre-phi = phi i32 [ %.pre231, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge" ], [ %113, %120 ], [ %113, %115 ]
  %reflectedlightColor.0.i0 = phi float [ 0.000000e+00, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge" ], [ %130, %120 ], [ %.i0163, %115 ]
  %reflectedlightColor.0.i1 = phi float [ 0.000000e+00, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge" ], [ %131, %120 ], [ %.i1164, %115 ]
  %reflectedlightColor.0.i2 = phi float [ 0.000000e+00, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge" ], [ %132, %120 ], [ %.i2165, %115 ]
  %reflectedlightColor.0.i3 = phi float [ 0.000000e+00, %".loopexit.\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit_crit_edge" ], [ %133, %120 ], [ %.i3, %115 ]
  %DispatchRaysIndex35 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 0)  ; DispatchRaysIndex(col)
  %DispatchRaysIndex34 = call i32 @dx.op.dispatchRaysIndex.i32(i32 145, i8 1)  ; DispatchRaysIndex(col)
  %DispatchRaysDimensions31 = call i32 @dx.op.dispatchRaysDimensions.i32(i32 146, i8 0)  ; DispatchRaysDimensions(col)
  %134 = mul i32 %DispatchRaysDimensions31, %DispatchRaysIndex34
  %135 = add i32 %134, %DispatchRaysIndex35
  %136 = load i32, i32* @seed, align 4, !tbaa !89
  %137 = add i32 %136, 1
  store i32 %137, i32* @seed, align 4, !tbaa !89
  %138 = add i32 %135, %136
  %139 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.i32 %139, 0
  %141 = add i32 %138, %140
  %142 = uitofp i32 %141 to float
  %Sin13 = call float @dx.op.unary.f32(i32 13, float %142)  ; Sin(value)
  %143 = fmul fast float %Sin13, 0x40E55DD180000000
  %Frc12 = call float @dx.op.unary.f32(i32 22, float %143)  ; Frc(value)
  %144 = add i32 %136, 2
  store i32 %144, i32* @seed, align 4, !tbaa !89
  %145 = add i32 %135, %137
  %146 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.i32 %146, 0
  %148 = add i32 %145, %147
  %149 = uitofp i32 %148 to float
  %Sin11 = call float @dx.op.unary.f32(i32 13, float %149)  ; Sin(value)
  %150 = fmul fast float %Sin11, 0x40E55DD180000000
  %Frc10 = call float @dx.op.unary.f32(i32 22, float %150)  ; Frc(value)
  %151 = add i32 %136, 3
  store i32 %151, i32* @seed, align 4, !tbaa !89
  %152 = add i32 %135, %144
  %153 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %g_sceneCB92, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.i32 %153, 0
  %155 = add i32 %152, %154
  %156 = uitofp i32 %155 to float
  %Sin = call float @dx.op.unary.f32(i32 13, float %156)  ; Sin(value)
  %157 = fmul fast float %Sin, 0x40E55DD180000000
  %Frc = call float @dx.op.unary.f32(i32 22, float %157)  ; Frc(value)
  %.i0166 = fadd fast float %Frc12, %.i0124
  %.i1167 = fadd fast float %Frc10, %.i1125
  %.i2168 = fadd fast float %Frc, %.i2126
  %158 = fmul fast float %.i0166, %.i0166
  %159 = fmul fast float %.i1167, %.i1167
  %160 = fadd fast float %159, %158
  %161 = fmul fast float %.i2168, %.i2168
  %162 = fadd fast float %160, %161
  %Sqrt62 = call float @dx.op.unary.f32(i32 24, float %162)  ; Sqrt(value)
  %.i0169 = fdiv fast float %.i0166, %Sqrt62
  %.i1170 = fdiv fast float %.i1167, %Sqrt62
  %.i2171 = fdiv fast float %.i2168, %Sqrt62
  %RayTCurrent = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %163 = icmp ult i32 %.pre-phi, 3
  br i1 %163, label %164, label %169

; <label>:164                                     ; preds = %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit"
  %WorldRayOrigin = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %.i0172 = fmul fast float %WorldRayDirection79.pre-phi, %RayTCurrent
  %.i0175 = fadd fast float %.i0172, %WorldRayOrigin
  %WorldRayOrigin65 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %.i1173 = fmul fast float %WorldRayDirection80.pre-phi, %RayTCurrent
  %.i1176 = fadd fast float %.i1173, %WorldRayOrigin65
  %WorldRayOrigin66 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %.i2174 = fmul fast float %WorldRayDirection81.pre-phi, %RayTCurrent
  %.i2177 = fadd fast float %.i2174, %WorldRayOrigin66
  %165 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %165, align 8
  %166 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %1, i32 0, i32 1
  store i32 %.pre-phi, i32* %166, align 8
  %167 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32 160, %struct.RaytracingAccelerationStructure %9)  ; CreateHandleFromResourceStructForLib(Resource)
  call void @dx.op.traceRay.struct.LightPayload(i32 157, %dx.types.Handle %167, i32 16, i32 255, i32 0, i32 1, i32 0, float %.i0175, float %.i1176, float %.i2177, float 0x3F50624DE0000000, float %.i0169, float %.i1170, float %.i2171, float 1.000000e+04, %struct.LightPayload* nonnull %1)  ; TraceRay(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)
  %168 = load <4 x float>, <4 x float>* %165, align 8
  %.i0178 = extractelement <4 x float> %168, i32 0
  %.i1179 = extractelement <4 x float> %168, i32 1
  %.i2180 = extractelement <4 x float> %168, i32 2
  %.i3181 = extractelement <4 x float> %168, i32 3
  br label %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit5"

; <label>:169                                     ; preds = %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit"
  %170 = fdiv fast float %.i2171, %.i0169
  %Atan = call float @dx.op.unary.f32(i32 17, float %170)  ; Atan(value)
  %171 = fcmp fast ogt float %Atan, 0.000000e+00
  %172 = fadd fast float %Atan, 0x40191EB860000000
  %173 = select i1 %171, float %Atan, float %172
  %174 = fmul fast float %173, 0x3FC461D580000000
  %Acos = call float @dx.op.unary.f32(i32 15, float %.i1170)  ; Acos(value)
  %175 = fmul fast float %Acos, 0x3FD461D580000000
  %176 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %8)  ; CreateHandleFromResourceStructForLib(Resource)
  %177 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleFromResourceStructForLib(Resource)
  %178 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %176, %dx.types.Handle %177, float %174, float %175, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %179 = extractvalue %dx.types.ResRet.f32 %178, 0
  %180 = extractvalue %dx.types.ResRet.f32 %178, 1
  %181 = extractvalue %dx.types.ResRet.f32 %178, 2
  %182 = extractvalue %dx.types.ResRet.f32 %178, 3
  br label %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit5"

"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit5": ; preds = %169, %164
  %.06.i0 = phi float [ %.i0178, %164 ], [ %179, %169 ]
  %.06.i1 = phi float [ %.i1179, %164 ], [ %180, %169 ]
  %.06.i2 = phi float [ %.i2180, %164 ], [ %181, %169 ]
  %.06.i3 = phi float [ %.i3181, %164 ], [ %182, %169 ]
  %183 = call float @dx.op.dot3.f32(i32 55, float %.i0124, float %.i1125, float %.i2126, float %.i0169, float %.i1170, float %.i2171)  ; Dot3(ax,ay,az,bx,by,bz)
  %184 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %Material93, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.i32 %184, 3
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %195, label %187

; <label>:187                                     ; preds = %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit5"
  %188 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %5)  ; CreateHandleFromResourceStructForLib(Resource)
  %189 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleFromResourceStructForLib(Resource)
  %190 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %188, %dx.types.Handle %189, float %.i0137, float %.i1138, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %191 = extractvalue %dx.types.ResRet.f32 %190, 0
  %192 = extractvalue %dx.types.ResRet.f32 %190, 1
  %193 = extractvalue %dx.types.ResRet.f32 %190, 2
  %194 = extractvalue %dx.types.ResRet.f32 %190, 3
  br label %"\01?GetDiffuseColor@@YA?AV?$vector@M$03@@UVertexAttribute@@@Z.exit"

; <label>:195                                     ; preds = %"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z.exit5"
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %Material93, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 0
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 1
  %199 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %200 = extractvalue %dx.types.CBufRet.f32 %196, 3
  br label %"\01?GetDiffuseColor@@YA?AV?$vector@M$03@@UVertexAttribute@@@Z.exit"

"\01?GetDiffuseColor@@YA?AV?$vector@M$03@@UVertexAttribute@@@Z.exit": ; preds = %195, %187
  %.07.i0 = phi float [ %191, %187 ], [ %197, %195 ]
  %.07.i1 = phi float [ %192, %187 ], [ %198, %195 ]
  %.07.i2 = phi float [ %193, %187 ], [ %199, %195 ]
  %.07.i3 = phi float [ %194, %187 ], [ %200, %195 ]
  %.i0182 = fmul fast float %183, %.06.i0
  %.i0186 = fmul fast float %.i0182, %.07.i0
  %.i1183 = fmul fast float %183, %.06.i1
  %.i1187 = fmul fast float %.i1183, %.07.i1
  %.i2184 = fmul fast float %183, %.06.i2
  %.i2188 = fmul fast float %.i2184, %.07.i2
  %.i3185 = fmul fast float %183, %.06.i3
  %.i3189 = fmul fast float %.i3185, %.07.i3
  %.i0190 = fsub fast float %reflectedlightColor.0.i0, %.i0186
  %.i1191 = fsub fast float %reflectedlightColor.0.i1, %.i1187
  %.i2192 = fsub fast float %reflectedlightColor.0.i2, %.i2188
  %.i3193 = fsub fast float %reflectedlightColor.0.i3, %.i3189
  %.i0194 = fmul fast float %.i0190, %110
  %.i1195 = fmul fast float %.i1191, %110
  %.i2196 = fmul fast float %.i2192, %110
  %.i3197 = fmul fast float %.i3193, %110
  %.i0198 = fadd fast float %.i0194, %.i0186
  %.i1199 = fadd fast float %.i1195, %.i1187
  %.i2200 = fadd fast float %.i2196, %.i2188
  %.i3201 = fadd fast float %.i3197, %.i3189
  %.i0202 = fmul fast float %.i0198, %percentVisible.2
  %.i1203 = fmul fast float %.i1199, %percentVisible.2
  %.i2204 = fmul fast float %.i2200, %percentVisible.2
  %.i3205 = fmul fast float %.i3201, %percentVisible.2
  %.upto0226 = insertelement <4 x float> undef, float %.i0202, i32 0
  %.upto1227 = insertelement <4 x float> %.upto0226, float %.i1203, i32 1
  %.upto2 = insertelement <4 x float> %.upto1227, float %.i2204, i32 2
  %201 = insertelement <4 x float> %.upto2, float %.i3205, i32 3
  %202 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %payload, i32 0, i32 0
  store <4 x float> %201, <4 x float>* %202, align 4, !tbaa !97
  ret void
}

; Function Attrs: nounwind
define void @"\01?LightingMiss@@YAXULightPayload@@@Z"(%struct.LightPayload* noalias nocapture %payload) #2 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?LinearSampler@@3USamplerState@@A", align 4
  %2 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %WorldRayDirection = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %WorldRayDirection1 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %WorldRayDirection2 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %3 = fdiv fast float %WorldRayDirection2, %WorldRayDirection
  %Atan = call float @dx.op.unary.f32(i32 17, float %3)  ; Atan(value)
  %4 = fcmp fast ogt float %Atan, 0.000000e+00
  %5 = fadd fast float %Atan, 0x40191EB860000000
  %6 = select i1 %4, float %Atan, float %5
  %7 = fmul fast float %6, 0x3FC461D580000000
  %Acos = call float @dx.op.unary.f32(i32 15, float %WorldRayDirection1)  ; Acos(value)
  %8 = fmul fast float %Acos, 0x3FD461D580000000
  %9 = call %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %2)  ; CreateHandleFromResourceStructForLib(Resource)
  %10 = call %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleFromResourceStructForLib(Resource)
  %11 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %9, %dx.types.Handle %10, float %7, float %8, float undef, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %12 = extractvalue %dx.types.ResRet.f32 %11, 0
  %13 = insertelement <4 x float> undef, float %12, i64 0
  %14 = extractvalue %dx.types.ResRet.f32 %11, 1
  %15 = insertelement <4 x float> %13, float %14, i64 1
  %16 = extractvalue %dx.types.ResRet.f32 %11, 2
  %17 = insertelement <4 x float> %15, float %16, i64 2
  %18 = extractvalue %dx.types.ResRet.f32 %11, 3
  %19 = insertelement <4 x float> %17, float %18, i64 3
  %20 = getelementptr inbounds %struct.LightPayload, %struct.LightPayload* %payload, i32 0, i32 0
  store <4 x float> %19, <4 x float>* %20, align 4
  ret void
}

; Function Attrs: nounwind
define void @"\01?OcclusionMiss@@YAXUOcclusionPayload@@@Z"(%struct.OcclusionPayload* noalias nocapture %payload) #2 {
  %1 = getelementptr inbounds %struct.OcclusionPayload, %struct.OcclusionPayload* %payload, i32 0, i32 0
  store i32 0, i32* %1, align 4
  ret void
}

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #4

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #4

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #5

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysDimensions.i32(i32, i8) #5

; Function Attrs: nounwind readnone
declare i32 @dx.op.dispatchRaysIndex.i32(i32, i8) #5

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #5

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #4

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #5

; Function Attrs: nounwind
declare void @dx.op.traceRay.struct.LightPayload(i32, %dx.types.Handle, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, %struct.LightPayload*) #6

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #4

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #6

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #5

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #5

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #4

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #4

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveID.i32(i32) #5

; Function Attrs: nounwind
declare void @dx.op.traceRay.struct.OcclusionPayload(i32, %dx.types.Handle, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, %struct.OcclusionPayload*) #6

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #5

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.g_sceneCB(i32, %g_sceneCB) #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.Material(i32, %Material) #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.SamplerState(i32, %struct.SamplerState) #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.RaytracingAccelerationStructure(i32, %struct.RaytracingAccelerationStructure) #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.RWTexture2D<vector<float, 4> >"(i32, %"class.RWTexture2D<vector<float, 4> >") #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleFromResourceStructForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #4

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleFromResourceStructForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #4

attributes #0 = { alwaysinline nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { alwaysinline nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { alwaysinline nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-realign-stack" "stack-protector-buffer-size"="0" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.typeAnnotations = !{!22, !64}
!dx.entryPoints = !{!84}
!dx.func.props = !{!85, !86, !87, !88}
!dx.func.signatures = !{}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 1}
!2 = !{i32 0, i32 0}
!3 = !{!"lib", i32 6, i32 1}
!4 = !{!5, !14, !16, !19}
!5 = !{!6, !8, !10, !12, !13}
!6 = !{i32 0, %struct.RaytracingAccelerationStructure* @"\01?Scene@@3URaytracingAccelerationStructure@@A", !"Scene", i32 0, i32 0, i32 1, i32 16, i32 0, !7}
!7 = !{i32 0, i32 4}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* @"\01?EnvironmentMap@@3V?$Texture2D@V?$vector@M$03@@@@A", !"EnvironmentMap", i32 0, i32 1, i32 1, i32 2, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Buffer<unsigned int>"* @"\01?IndexBuffer@@3V?$Buffer@I@@A", !"IndexBuffer", i32 1, i32 0, i32 1, i32 10, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{i32 3, %struct.ByteAddressBuffer* @"\01?AttributeBuffer@@3UByteAddressBuffer@@A", !"AttributeBuffer", i32 1, i32 1, i32 1, i32 11, i32 0, null}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* @"\01?DiffuseTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"DiffuseTexture", i32 1, i32 2, i32 1, i32 2, i32 0, !9}
!14 = !{!15}
!15 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* @"\01?RenderTarget@@3V?$RWTexture2D@V?$vector@M$03@@@@A", !"RenderTarget", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !9}
!16 = !{!17, !18}
!17 = !{i32 0, %g_sceneCB* @g_sceneCB, !"g_sceneCB", i32 0, i32 0, i32 1, i32 84, null}
!18 = !{i32 1, %Material* @Material, !"Material", i32 1, i32 0, i32 1, i32 32, null}
!19 = !{!20, !21}
!20 = !{i32 0, %struct.SamplerState* @"\01?LinearSampler@@3USamplerState@@A", !"LinearSampler", i32 0, i32 0, i32 1, i32 0, null}
!21 = !{i32 1, %struct.SamplerState* @"\01?PointSampler@@3USamplerState@@A", !"PointSampler", i32 0, i32 1, i32 1, i32 0, null}
!22 = !{i32 0, %struct.RaytracingAccelerationStructure undef, !23, %"class.RWTexture2D<vector<float, 4> >" undef, !25, %struct.SceneConstantBuffer undef, !27, %"class.Texture2D<vector<float, 4> >" undef, !32, %"class.Texture2D<vector<float, 4> >::mips_type" undef, !34, %"class.Buffer<unsigned int>" undef, !36, %struct.ByteAddressBuffer undef, !23, %struct.MaterialConstants undef, !38, %struct.RayDesc undef, !44, %struct.LightPayload undef, !49, %struct.VertexAttribute undef, !52, %struct.BuiltInTriangleIntersectionAttributes undef, !56, %struct.OcclusionPayload undef, !58, %g_sceneCB undef, !60, %Material undef, !62}
!23 = !{i32 4, !24}
!24 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 4}
!25 = !{i32 16, !26}
!26 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 9}
!27 = !{i32 84, !28, !30, !31}
!28 = !{i32 6, !"projectionToWorld", i32 2, !29, i32 3, i32 0, i32 7, i32 9}
!29 = !{i32 4, i32 4, i32 1}
!30 = !{i32 6, !"cameraPosition", i32 3, i32 64, i32 7, i32 9}
!31 = !{i32 6, !"time", i32 3, i32 80, i32 7, i32 5}
!32 = !{i32 20, !26, !33}
!33 = !{i32 6, !"mips", i32 3, i32 16}
!34 = !{i32 4, !35}
!35 = !{i32 6, !"handle", i32 3, i32 0, i32 7, i32 5}
!36 = !{i32 4, !37}
!37 = !{i32 6, !"h", i32 3, i32 0, i32 7, i32 5}
!38 = !{i32 32, !39, !40, !41, !42, !43}
!39 = !{i32 6, !"Roughness", i32 3, i32 0, i32 7, i32 9}
!40 = !{i32 6, !"IndexOfRefraction", i32 3, i32 4, i32 7, i32 9}
!41 = !{i32 6, !"Padding", i32 3, i32 8, i32 7, i32 9}
!42 = !{i32 6, !"HasDiffuseTexture", i32 3, i32 12, i32 7, i32 5}
!43 = !{i32 6, !"DiffuseColor", i32 3, i32 16, i32 7, i32 9}
!44 = !{i32 32, !45, !46, !47, !48}
!45 = !{i32 6, !"Origin", i32 3, i32 0, i32 7, i32 9}
!46 = !{i32 6, !"TMin", i32 3, i32 12, i32 7, i32 9}
!47 = !{i32 6, !"Direction", i32 3, i32 16, i32 7, i32 9}
!48 = !{i32 6, !"TMax", i32 3, i32 28, i32 7, i32 9}
!49 = !{i32 20, !50, !51}
!50 = !{i32 6, !"Color", i32 3, i32 0, i32 7, i32 9}
!51 = !{i32 6, !"RecursionLevel", i32 3, i32 16, i32 7, i32 5}
!52 = !{i32 40, !53, !54, !55}
!53 = !{i32 6, !"Normal", i32 3, i32 0, i32 7, i32 9}
!54 = !{i32 6, !"Tangent", i32 3, i32 16, i32 7, i32 9}
!55 = !{i32 6, !"UV", i32 3, i32 32, i32 7, i32 9}
!56 = !{i32 8, !57}
!57 = !{i32 6, !"barycentrics", i32 3, i32 0, i32 7, i32 9}
!58 = !{i32 4, !59}
!59 = !{i32 6, !"HitFound", i32 3, i32 0, i32 7, i32 5}
!60 = !{i32 84, !61}
!61 = !{i32 6, !"g_sceneCB", i32 3, i32 0}
!62 = !{i32 32, !63}
!63 = !{i32 6, !"Material", i32 3, i32 0}
!64 = !{i32 1, float ()* @"\01?rand@@YAMXZ", !65, <4 x float> (<3 x float>)* @"\01?SampleEnvironmentMap@@YA?AV?$vector@M$03@@V?$vector@M$02@@@Z", !69, <3 x float> ()* @"\01?GenerateCosineWeightedRay@@YA?AV?$vector@M$02@@XZ", !65, <3 x float> (<3 x float>)* @"\01?GenerateRandomDirection@@YA?AV?$vector@M$02@@V1@@Z", !69, void ()* @"\01?MyRaygenShader@@YAXXZ", !71, void (%struct.VertexAttribute*, i32)* @"\01?GetVertexAttribute@@YA?AUVertexAttribute@@I@Z", !73, <3 x float> (<3 x float>, <3 x float>, <3 x float>, <2 x float>)* @"\01?CalculateValueFromBarycentrics@@YA?AV?$vector@M$02@@V1@00V?$vector@M$01@@@Z", !77, <2 x float> (<2 x float>, <2 x float>, <2 x float>, <2 x float>)* @"\01?CalculateValueFromBarycentrics@@YA?AV?$vector@M$01@@V1@000@Z", !77, void (%struct.VertexAttribute*, <3 x i32>, <2 x float>)* @"\01?GetAttributes@@YA?AUVertexAttribute@@V?$vector@I$02@@V?$vector@M$01@@@Z", !78, <4 x float> (%struct.VertexAttribute*)* @"\01?GetDiffuseColor@@YA?AV?$vector@M$03@@UVertexAttribute@@@Z", !79, <3 x float> ()* @"\01?HitPosition@@YA?AV?$vector@M$02@@XZ", !65, <4 x float> (<3 x float>, <3 x float>, i32)* @"\01?GetLightColor@@YA?AV?$vector@M$03@@V?$vector@M$02@@0I@Z", !80, void (%struct.LightPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?MyClosestHitShader@@YAXULightPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", !81, void (%struct.LightPayload*)* @"\01?LightingMiss@@YAXULightPayload@@@Z", !83, void (%struct.OcclusionPayload*)* @"\01?OcclusionMiss@@YAXUOcclusionPayload@@@Z", !83}
!65 = !{!66}
!66 = !{i32 1, !67, !68}
!67 = !{i32 7, i32 9}
!68 = !{}
!69 = !{!66, !70}
!70 = !{i32 0, !67, !68}
!71 = !{!72}
!72 = !{i32 1, !68, !68}
!73 = !{!74, !72, !75}
!74 = !{i32 0, !68, !68}
!75 = !{i32 0, !76, !68}
!76 = !{i32 7, i32 5}
!77 = !{!66, !70, !70, !70, !70}
!78 = !{!74, !72, !75, !70}
!79 = !{!66, !74}
!80 = !{!66, !70, !70, !75}
!81 = !{!72, !82, !74}
!82 = !{i32 2, !68, !68}
!83 = !{!72, !82}
!84 = !{null, !"lib.no::entry", null, !4, null}
!85 = !{void (%struct.LightPayload*)* @"\01?LightingMiss@@YAXULightPayload@@@Z", i32 11, i32 20}
!86 = !{void (%struct.LightPayload*, %struct.BuiltInTriangleIntersectionAttributes*)* @"\01?MyClosestHitShader@@YAXULightPayload@@UBuiltInTriangleIntersectionAttributes@@@Z", i32 10, i32 20, i32 8}
!87 = !{void ()* @"\01?MyRaygenShader@@YAXXZ", i32 7}
!88 = !{void (%struct.OcclusionPayload*)* @"\01?OcclusionMiss@@YAXUOcclusionPayload@@@Z", i32 11, i32 4}
!89 = !{!90, !90, i64 0}
!90 = !{!"int", !91, i64 0}
!91 = !{!"omnipotent char", !92, i64 0}
!92 = !{!"Simple C/C++ TBAA"}
!93 = !{!94, !96}
!94 = distinct !{!94, !95, !"\01?GenerateCameraRay@@YAXV?$vector@I$01@@AIAV?$vector@M$02@@1@Z: %origin"}
!95 = distinct !{!95, !"\01?GenerateCameraRay@@YAXV?$vector@I$01@@AIAV?$vector@M$02@@1@Z"}
!96 = distinct !{!96, !95, !"\01?GenerateCameraRay@@YAXV?$vector@I$01@@AIAV?$vector@M$02@@1@Z: %direction"}
!97 = !{!91, !91, i64 0}

#endif

const unsigned char g_pRaytracing[] = {
  0x44, 0x58, 0x42, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xa4, 0x54, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
  0xac, 0x09, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x52, 0x44, 0x41, 0x54, 0x40, 0x09, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
  0xd4, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00,
  0x14, 0x06, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
  0xa8, 0x08, 0x00, 0x00, 0x67, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x43,
  0x42, 0x00, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x00, 0x4c,
  0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
  0x00, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
  0x72, 0x00, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x00, 0x45, 0x6e, 0x76, 0x69,
  0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x00, 0x49,
  0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x41,
  0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66,
  0x65, 0x72, 0x00, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x54, 0x65,
  0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
  0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x01, 0x3f, 0x72, 0x61, 0x6e,
  0x64, 0x40, 0x40, 0x59, 0x41, 0x4d, 0x58, 0x5a, 0x00, 0x72, 0x61, 0x6e,
  0x64, 0x00, 0x01, 0x3f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x40, 0x40, 0x59, 0x41, 0x3f, 0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63,
  0x74, 0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x33, 0x40, 0x40, 0x56, 0x3f,
  0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x32,
  0x40, 0x40, 0x40, 0x5a, 0x00, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45,
  0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
  0x70, 0x00, 0x01, 0x3f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
  0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
  0x65, 0x64, 0x52, 0x61, 0x79, 0x40, 0x40, 0x59, 0x41, 0x3f, 0x41, 0x56,
  0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30,
  0x32, 0x40, 0x40, 0x58, 0x5a, 0x00, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
  0x74, 0x65, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x57, 0x65, 0x69, 0x67,
  0x68, 0x74, 0x65, 0x64, 0x52, 0x61, 0x79, 0x00, 0x01, 0x3f, 0x47, 0x65,
  0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
  0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x40, 0x59,
  0x41, 0x3f, 0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
  0x40, 0x4d, 0x24, 0x30, 0x32, 0x40, 0x40, 0x56, 0x31, 0x40, 0x40, 0x5a,
  0x00, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
  0x64, 0x6f, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
  0x00, 0x01, 0x3f, 0x4d, 0x79, 0x52, 0x61, 0x79, 0x67, 0x65, 0x6e, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x40, 0x40, 0x59, 0x41, 0x58, 0x58, 0x5a,
  0x00, 0x4d, 0x79, 0x52, 0x61, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x68, 0x61,
  0x64, 0x65, 0x72, 0x00, 0x01, 0x3f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
  0x74, 0x65, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
  0x40, 0x40, 0x59, 0x41, 0x3f, 0x41, 0x55, 0x56, 0x65, 0x72, 0x74, 0x65,
  0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x40, 0x40,
  0x49, 0x40, 0x5a, 0x00, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65,
  0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x01,
  0x3f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61,
  0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x72, 0x79, 0x63,
  0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x73, 0x40, 0x40, 0x59, 0x41, 0x3f,
  0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d,
  0x24, 0x30, 0x32, 0x40, 0x40, 0x56, 0x31, 0x40, 0x30, 0x30, 0x56, 0x3f,
  0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x31,
  0x40, 0x40, 0x40, 0x5a, 0x00, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
  0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42,
  0x61, 0x72, 0x79, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x73, 0x00,
  0x01, 0x3f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56,
  0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x72, 0x79,
  0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x73, 0x40, 0x40, 0x59, 0x41,
  0x3f, 0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40,
  0x4d, 0x24, 0x30, 0x31, 0x40, 0x40, 0x56, 0x31, 0x40, 0x30, 0x30, 0x30,
  0x40, 0x5a, 0x00, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
  0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x72,
  0x79, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x63, 0x73, 0x00, 0x01, 0x3f,
  0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
  0x73, 0x40, 0x40, 0x59, 0x41, 0x3f, 0x41, 0x55, 0x56, 0x65, 0x72, 0x74,
  0x65, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x40,
  0x40, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x49,
  0x24, 0x30, 0x32, 0x40, 0x40, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74,
  0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x31, 0x40, 0x40, 0x40, 0x5a, 0x00,
  0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
  0x73, 0x00, 0x01, 0x3f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x75,
  0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x40, 0x40, 0x59, 0x41, 0x3f,
  0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d,
  0x24, 0x30, 0x33, 0x40, 0x40, 0x55, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
  0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x40, 0x40, 0x40,
  0x5a, 0x00, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65,
  0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x01, 0x3f, 0x48, 0x69, 0x74, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x40, 0x59, 0x41, 0x3f,
  0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d,
  0x24, 0x30, 0x32, 0x40, 0x40, 0x58, 0x5a, 0x00, 0x48, 0x69, 0x74, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x01, 0x3f, 0x47, 0x65,
  0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x40,
  0x40, 0x59, 0x41, 0x3f, 0x41, 0x56, 0x3f, 0x24, 0x76, 0x65, 0x63, 0x74,
  0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x33, 0x40, 0x40, 0x56, 0x3f, 0x24,
  0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x40, 0x4d, 0x24, 0x30, 0x32, 0x40,
  0x40, 0x30, 0x49, 0x40, 0x5a, 0x00, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x01, 0x3f, 0x4d, 0x79,
  0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x53, 0x68,
  0x61, 0x64, 0x65, 0x72, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x4c, 0x69,
  0x67, 0x68, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40,
  0x55, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x69, 0x61,
  0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
  0x65, 0x73, 0x40, 0x40, 0x40, 0x5a, 0x00, 0x4d, 0x79, 0x43, 0x6c, 0x6f,
  0x73, 0x65, 0x73, 0x74, 0x48, 0x69, 0x74, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x00, 0x01, 0x3f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x4d, 0x69, 0x73, 0x73, 0x40, 0x40, 0x59, 0x41, 0x58, 0x55, 0x4c, 0x69,
  0x67, 0x68, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40,
  0x40, 0x5a, 0x00, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d,
  0x69, 0x73, 0x73, 0x00, 0x01, 0x3f, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73,
  0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x40, 0x40, 0x59, 0x41, 0x58,
  0x55, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
  0x79, 0x6c, 0x6f, 0x61, 0x64, 0x40, 0x40, 0x40, 0x5a, 0x00, 0x4f, 0x63,
  0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe2, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x65, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7d, 0x01, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa4, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00,
  0x35, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb2, 0x02, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x03, 0x00, 0x00,
  0x46, 0x03, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x56, 0x03, 0x00, 0x00, 0x7c, 0x03, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x03, 0x00, 0x00, 0xc2, 0x03, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00,
  0x23, 0x04, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x5b, 0x04, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x68, 0x04, 0x00, 0x00, 0x92, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0xf0, 0x4a, 0x00, 0x00,
  0x61, 0x00, 0x06, 0x00, 0xbc, 0x12, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x01, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xd8, 0x4a, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xb3, 0x12, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x20, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0x04, 0x11, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x82, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x24, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x41, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x53, 0x01, 0x00, 0x00,
  0x1b, 0xc4, 0x23, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x10, 0x00, 0x89,
  0x20, 0x87, 0x74, 0x98, 0x87, 0x70, 0x10, 0x07, 0x76, 0x28, 0x87, 0x36,
  0xa0, 0x87, 0x70, 0x48, 0x07, 0x76, 0x68, 0x83, 0x71, 0x08, 0x07, 0x76,
  0x60, 0x87, 0x79, 0x00, 0xcc, 0x21, 0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01,
  0x20, 0xd8, 0xa1, 0x1c, 0xe6, 0x61, 0x1e, 0xda, 0x00, 0x1e, 0xe4, 0xa1,
  0x1c, 0xc6, 0x21, 0x1d, 0xe6, 0xa1, 0x1c, 0xda, 0xc0, 0x1c, 0xe0, 0xa1,
  0x1d, 0xc2, 0x81, 0x1c, 0x00, 0x73, 0x08, 0x07, 0x76, 0x98, 0x87, 0x72,
  0x00, 0x08, 0x77, 0x78, 0x87, 0x36, 0x30, 0x07, 0x79, 0x08, 0x87, 0x76,
  0x28, 0x87, 0x36, 0x80, 0x87, 0x77, 0x48, 0x07, 0x77, 0xa0, 0x87, 0x72,
  0x90, 0x87, 0x36, 0x28, 0x07, 0x76, 0x48, 0x87, 0x76, 0x00, 0xcc, 0x21,
  0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01, 0x20, 0xdc, 0xe1, 0x1d, 0xda, 0x20,
  0x1d, 0xdc, 0xc1, 0x1c, 0xe6, 0xa1, 0x0d, 0xcc, 0x01, 0x1e, 0xda, 0xa0,
  0x1d, 0xc2, 0x81, 0x1e, 0xd0, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79,
  0x28, 0x07, 0x80, 0x70, 0x87, 0x77, 0x68, 0x03, 0x77, 0x08, 0x07, 0x77,
  0x98, 0x87, 0x36, 0x30, 0x07, 0x78, 0x68, 0x83, 0x76, 0x08, 0x07, 0x7a,
  0x40, 0x07, 0xc0, 0x1c, 0xc2, 0x81, 0x1d, 0xe6, 0xa1, 0x1c, 0x80, 0xc1,
  0x1d, 0xde, 0xa1, 0x0d, 0xe4, 0xa1, 0x1c, 0xc2, 0x81, 0x1d, 0xd2, 0xe1,
  0x1c, 0xdc, 0xa1, 0x0d, 0xe6, 0x81, 0x1e, 0xc2, 0x61, 0x1c, 0xd6, 0x01,
  0x20, 0xe6, 0x81, 0x1e, 0xc2, 0x61, 0x1c, 0xd6, 0xa1, 0x0d, 0xe0, 0x41,
  0x1e, 0xde, 0x81, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0xa1,
  0x0d, 0xc4, 0xa1, 0x1e, 0xcc, 0xc1, 0x1c, 0xca, 0x41, 0x1e, 0xda, 0x60,
  0x1e, 0xd2, 0x41, 0x1f, 0xca, 0x01, 0x80, 0x03, 0x80, 0xa8, 0x07, 0x77,
  0x98, 0x87, 0x70, 0x30, 0x87, 0x72, 0x68, 0x03, 0x73, 0x80, 0x87, 0x36,
  0x68, 0x87, 0x70, 0xa0, 0x07, 0x74, 0x00, 0xcc, 0x21, 0x1c, 0xd8, 0x61,
  0x1e, 0xca, 0x01, 0x20, 0xea, 0x61, 0x1e, 0xca, 0xa1, 0x0d, 0xe6, 0xe1,
  0x1d, 0xcc, 0x81, 0x1e, 0xda, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81,
  0x1e, 0x00, 0x73, 0x08, 0x07, 0x76, 0x98, 0x87, 0x72, 0x00, 0x36, 0x90,
  0x87, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x00, 0x12, 0x50, 0x11,
  0xe4, 0x90, 0x0e, 0xf3, 0x10, 0x0e, 0xe2, 0xc0, 0x0e, 0xe5, 0xd0, 0x06,
  0xf4, 0x10, 0x0e, 0xe9, 0xc0, 0x0e, 0x6d, 0x30, 0x0e, 0xe1, 0xc0, 0x0e,
  0xec, 0x30, 0x0f, 0x80, 0x39, 0x84, 0x03, 0x3b, 0xcc, 0x43, 0x39, 0x00,
  0x04, 0x3b, 0x94, 0xc3, 0x3c, 0xcc, 0x43, 0x1b, 0xc0, 0x83, 0x3c, 0x94,
  0xc3, 0x38, 0xa4, 0xc3, 0x3c, 0x94, 0x43, 0x1b, 0x98, 0x03, 0x3c, 0xb4,
  0x43, 0x38, 0x90, 0x03, 0x60, 0x0e, 0xe1, 0xc0, 0x0e, 0xf3, 0x50, 0x0e,
  0x00, 0xe1, 0x0e, 0xef, 0xd0, 0x06, 0xe6, 0x20, 0x0f, 0xe1, 0xd0, 0x0e,
  0xe5, 0xd0, 0x06, 0xf0, 0xf0, 0x0e, 0xe9, 0xe0, 0x0e, 0xf4, 0x50, 0x0e,
  0xf2, 0xd0, 0x06, 0xe5, 0xc0, 0x0e, 0xe9, 0xd0, 0x0e, 0x80, 0x39, 0x84,
  0x03, 0x3b, 0xcc, 0x43, 0x39, 0x00, 0x84, 0x3b, 0xbc, 0x43, 0x1b, 0xa4,
  0x83, 0x3b, 0x98, 0xc3, 0x3c, 0xb4, 0x81, 0x39, 0xc0, 0x43, 0x1b, 0xb4,
  0x43, 0x38, 0xd0, 0x03, 0x3a, 0x00, 0xe6, 0x10, 0x0e, 0xec, 0x30, 0x0f,
  0xe5, 0x00, 0x10, 0xee, 0xf0, 0x0e, 0x6d, 0xe0, 0x0e, 0xe1, 0xe0, 0x0e,
  0xf3, 0xd0, 0x06, 0xe6, 0x00, 0x0f, 0x6d, 0xd0, 0x0e, 0xe1, 0x40, 0x0f,
  0xe8, 0x00, 0x98, 0x43, 0x38, 0xb0, 0xc3, 0x3c, 0x94, 0x03, 0x30, 0xb8,
  0xc3, 0x3b, 0xb4, 0x81, 0x3c, 0x94, 0x43, 0x38, 0xb0, 0x43, 0x3a, 0x9c,
  0x83, 0x3b, 0xb4, 0xc1, 0x3c, 0xd0, 0x43, 0x38, 0x8c, 0xc3, 0x3a, 0x00,
  0xc4, 0x3c, 0xd0, 0x43, 0x38, 0x8c, 0xc3, 0x3a, 0xb4, 0x01, 0x3c, 0xc8,
  0xc3, 0x3b, 0xd0, 0x43, 0x39, 0x8c, 0x03, 0x3d, 0xbc, 0x83, 0x3c, 0xb4,
  0x81, 0x38, 0xd4, 0x83, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x1b, 0xcc,
  0x43, 0x3a, 0xe8, 0x43, 0x39, 0x00, 0x70, 0x00, 0x10, 0xf5, 0xe0, 0x0e,
  0xf3, 0x10, 0x0e, 0xe6, 0x50, 0x0e, 0x6d, 0x60, 0x0e, 0xf0, 0xd0, 0x06,
  0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x80, 0x39, 0x84, 0x03, 0x3b, 0xcc,
  0x43, 0x39, 0x00, 0x44, 0x3d, 0xcc, 0x43, 0x39, 0xb4, 0xc1, 0x3c, 0xbc,
  0x83, 0x39, 0xd0, 0x43, 0x1b, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0,
  0x03, 0x60, 0x0e, 0xe1, 0xc0, 0x0e, 0xf3, 0x50, 0x0e, 0xc0, 0x06, 0xf0,
  0x18, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x24, 0x82, 0x1c, 0xd2, 0x61,
  0x1e, 0xc2, 0x41, 0x1c, 0xd8, 0xa1, 0x1c, 0xda, 0x80, 0x1e, 0xc2, 0x21,
  0x1d, 0xd8, 0xa1, 0x0d, 0xc6, 0x21, 0x1c, 0xd8, 0x81, 0x1d, 0xe6, 0x01,
  0x30, 0x87, 0x70, 0x60, 0x87, 0x79, 0x28, 0x07, 0x80, 0x60, 0x87, 0x72,
  0x98, 0x87, 0x79, 0x68, 0x03, 0x78, 0x90, 0x87, 0x72, 0x18, 0x87, 0x74,
  0x98, 0x87, 0x72, 0x68, 0x03, 0x73, 0x80, 0x87, 0x76, 0x08, 0x07, 0x72,
  0x00, 0xcc, 0x21, 0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01, 0x20, 0xdc, 0xe1,
  0x1d, 0xda, 0xc0, 0x1c, 0xe4, 0x21, 0x1c, 0xda, 0xa1, 0x1c, 0xda, 0x00,
  0x1e, 0xde, 0x21, 0x1d, 0xdc, 0x81, 0x1e, 0xca, 0x41, 0x1e, 0xda, 0xa0,
  0x1c, 0xd8, 0x21, 0x1d, 0xda, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79,
  0x28, 0x07, 0x80, 0x70, 0x87, 0x77, 0x68, 0x83, 0x74, 0x70, 0x07, 0x73,
  0x98, 0x87, 0x36, 0x30, 0x07, 0x78, 0x68, 0x83, 0x76, 0x08, 0x07, 0x7a,
  0x40, 0x07, 0xc0, 0x1c, 0xc2, 0x81, 0x1d, 0xe6, 0xa1, 0x1c, 0x00, 0xc2,
  0x1d, 0xde, 0xa1, 0x0d, 0xdc, 0x21, 0x1c, 0xdc, 0x61, 0x1e, 0xda, 0xc0,
  0x1c, 0xe0, 0xa1, 0x0d, 0xda, 0x21, 0x1c, 0xe8, 0x01, 0x1d, 0x00, 0x73,
  0x08, 0x07, 0x76, 0x98, 0x87, 0x72, 0x00, 0x06, 0x77, 0x78, 0x87, 0x36,
  0x90, 0x87, 0x72, 0x08, 0x07, 0x76, 0x48, 0x87, 0x73, 0x70, 0x87, 0x36,
  0x98, 0x07, 0x7a, 0x08, 0x87, 0x71, 0x58, 0x07, 0x80, 0x98, 0x07, 0x7a,
  0x08, 0x87, 0x71, 0x58, 0x87, 0x36, 0x80, 0x07, 0x79, 0x78, 0x07, 0x7a,
  0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x87, 0x36, 0x10, 0x87, 0x7a,
  0x30, 0x07, 0x73, 0x28, 0x07, 0x79, 0x68, 0x83, 0x79, 0x48, 0x07, 0x7d,
  0x28, 0x07, 0x00, 0x0e, 0x00, 0xa2, 0x1e, 0xdc, 0x61, 0x1e, 0xc2, 0xc1,
  0x1c, 0xca, 0xa1, 0x0d, 0xcc, 0x01, 0x1e, 0xda, 0xa0, 0x1d, 0xc2, 0x81,
  0x1e, 0xd0, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79, 0x28, 0x07, 0x80,
  0xa8, 0x87, 0x79, 0x28, 0x87, 0x36, 0x98, 0x87, 0x77, 0x30, 0x07, 0x7a,
  0x68, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x00, 0xcc, 0x21,
  0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01, 0xd8, 0x80, 0x10, 0x01, 0x90, 0x00,
  0x0b, 0xd0, 0x6d, 0x20, 0x8f, 0xe2, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40,
  0x00, 0x24, 0x80, 0x22, 0xc8, 0x21, 0x1d, 0xe6, 0x21, 0x1c, 0xc4, 0x81,
  0x1d, 0xca, 0xa1, 0x0d, 0xe8, 0x21, 0x1c, 0xd2, 0x81, 0x1d, 0xda, 0x60,
  0x1c, 0xc2, 0x81, 0x1d, 0xd8, 0x61, 0x1e, 0x00, 0x73, 0x08, 0x07, 0x76,
  0x98, 0x87, 0x72, 0x00, 0x08, 0x76, 0x28, 0x87, 0x79, 0x98, 0x87, 0x36,
  0x80, 0x07, 0x79, 0x28, 0x87, 0x71, 0x48, 0x87, 0x79, 0x28, 0x87, 0x36,
  0x30, 0x07, 0x78, 0x68, 0x87, 0x70, 0x20, 0x07, 0xc0, 0x1c, 0xc2, 0x81,
  0x1d, 0xe6, 0xa1, 0x1c, 0x00, 0xc2, 0x1d, 0xde, 0xa1, 0x0d, 0xcc, 0x41,
  0x1e, 0xc2, 0xa1, 0x1d, 0xca, 0xa1, 0x0d, 0xe0, 0xe1, 0x1d, 0xd2, 0xc1,
  0x1d, 0xe8, 0xa1, 0x1c, 0xe4, 0xa1, 0x0d, 0xca, 0x81, 0x1d, 0xd2, 0xa1,
  0x1d, 0x00, 0x73, 0x08, 0x07, 0x76, 0x98, 0x87, 0x72, 0x00, 0x08, 0x77,
  0x78, 0x87, 0x36, 0x48, 0x07, 0x77, 0x30, 0x87, 0x79, 0x68, 0x03, 0x73,
  0x80, 0x87, 0x36, 0x68, 0x87, 0x70, 0xa0, 0x07, 0x74, 0x00, 0xcc, 0x21,
  0x1c, 0xd8, 0x61, 0x1e, 0xca, 0x01, 0x20, 0xdc, 0xe1, 0x1d, 0xda, 0xc0,
  0x1d, 0xc2, 0xc1, 0x1d, 0xe6, 0xa1, 0x0d, 0xcc, 0x01, 0x1e, 0xda, 0xa0,
  0x1d, 0xc2, 0x81, 0x1e, 0xd0, 0x01, 0x30, 0x87, 0x70, 0x60, 0x87, 0x79,
  0x28, 0x07, 0x60, 0x70, 0x87, 0x77, 0x68, 0x03, 0x79, 0x28, 0x87, 0x70,
  0x60, 0x87, 0x74, 0x38, 0x07, 0x77, 0x68, 0x83, 0x79, 0xa0, 0x87, 0x70,
  0x18, 0x87, 0x75, 0x00, 0x88, 0x79, 0xa0, 0x87, 0x70, 0x18, 0x87, 0x75,
  0x68, 0x03, 0x78, 0x90, 0x87, 0x77, 0xa0, 0x87, 0x72, 0x18, 0x07, 0x7a,
  0x78, 0x07, 0x79, 0x68, 0x03, 0x71, 0xa8, 0x07, 0x73, 0x30, 0x87, 0x72,
  0x90, 0x87, 0x36, 0x98, 0x87, 0x74, 0xd0, 0x87, 0x72, 0x00, 0xe0, 0x00,
  0x20, 0xea, 0xc1, 0x1d, 0xe6, 0x21, 0x1c, 0xcc, 0xa1, 0x1c, 0xda, 0xc0,
  0x1c, 0xe0, 0xa1, 0x0d, 0xda, 0x21, 0x1c, 0xe8, 0x01, 0x1d, 0x00, 0x73,
  0x08, 0x07, 0x76, 0x98, 0x87, 0x72, 0x00, 0x88, 0x7a, 0x98, 0x87, 0x72,
  0x68, 0x83, 0x79, 0x78, 0x07, 0x73, 0xa0, 0x87, 0x36, 0x30, 0x07, 0x76,
  0x78, 0x87, 0x70, 0xa0, 0x07, 0xc0, 0x1c, 0xc2, 0x81, 0x1d, 0xe6, 0xa1,
  0x1c, 0x80, 0x0d, 0x86, 0x11, 0x00, 0x0b, 0x50, 0x6d, 0x30, 0x8e, 0x00,
  0x48, 0x80, 0x65, 0x83, 0x81, 0x08, 0xc0, 0x02, 0x54, 0x1b, 0x8c, 0xe4,
  0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xaa, 0x0d, 0x86, 0xf2, 0xff,
  0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0xd4, 0x06, 0x62, 0xf9, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x90, 0x36, 0x10, 0x0c, 0x04, 0x9c, 0x01, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x86, 0x09, 0x02, 0x11, 0x4c, 0x08, 0x8a, 0x09, 0x82,
  0x21, 0x4c, 0x18, 0x0e, 0x64, 0x98, 0x20, 0x1c, 0xc3, 0x84, 0x20, 0x99,
  0x10, 0x28, 0x13, 0x82, 0x65, 0x42, 0xc0, 0x00, 0x89, 0x20, 0x00, 0x00,
  0xf7, 0x00, 0x00, 0x00, 0x32, 0x22, 0x08, 0x0a, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x24, 0xa4, 0x84, 0x04, 0x13, 0x24, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x90, 0x8c, 0x0b, 0x84, 0x04, 0x4d, 0x10, 0x80, 0xc4, 0x1c,
  0x01, 0x18, 0x9c, 0x19, 0x48, 0x53, 0x44, 0x09, 0x93, 0xbf, 0x02, 0xd8,
  0x14, 0x01, 0x02, 0xd2, 0x18, 0x9a, 0x20, 0x10, 0x0b, 0x11, 0x01, 0x13,
  0xe2, 0x34, 0xec, 0x14, 0x51, 0xc2, 0x44, 0x45, 0x04, 0x0a, 0x00, 0x28,
  0x60, 0x06, 0x60, 0x18, 0x81, 0x18, 0x66, 0x22, 0x83, 0x71, 0x60, 0x87,
  0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x59, 0xb8, 0x05, 0x5a, 0x28, 0x07,
  0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03,
  0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07,
  0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a, 0xf0, 0x03,
  0x30, 0xf0, 0x03, 0x14, 0x10, 0x50, 0xc1, 0x4c, 0x6d, 0x30, 0x0e, 0xec,
  0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4,
  0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5,
  0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef,
  0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x40, 0x07, 0x7e, 0x00, 0x06, 0x7e,
  0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4,
  0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x00, 0x98, 0x49, 0x0c, 0xc6, 0x81,
  0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81,
  0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1,
  0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1,
  0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0,
  0x0f, 0x90, 0x40, 0x70, 0x40, 0x08, 0x37, 0x49, 0x53, 0x44, 0x09, 0x93,
  0xcf, 0x02, 0xcc, 0xb3, 0x10, 0x11, 0x3b, 0x01, 0x13, 0x81, 0x02, 0x00,
  0x52, 0x98, 0x49, 0x1b, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37,
  0x10, 0x85, 0x7a, 0x30, 0x07, 0x73, 0x28, 0x07, 0x79, 0xe0, 0x83, 0x7a,
  0x70, 0x87, 0x79, 0x48, 0x87, 0x73, 0x70, 0x87, 0x72, 0x20, 0x07, 0x30,
  0x48, 0x07, 0x77, 0xa0, 0x07, 0x3f, 0x40, 0x01, 0x00, 0x31, 0x1c, 0x26,
  0x4d, 0x11, 0x25, 0x4c, 0xfe, 0x86, 0x4d, 0x84, 0x36, 0x0c, 0x11, 0x21,
  0x49, 0x1b, 0x55, 0x14, 0x44, 0x84, 0x02, 0x00, 0x72, 0x20, 0x80, 0x24,
  0x20, 0x38, 0x4b, 0x58, 0x00, 0x49, 0xf2, 0x19, 0x60, 0x8a, 0x90, 0xcb,
  0x2f, 0x16, 0x07, 0x98, 0x7c, 0xdc, 0xc7, 0x51, 0x10, 0x71, 0x9a, 0x34,
  0x45, 0x94, 0x30, 0xf9, 0xac, 0x40, 0x34, 0x04, 0xe7, 0x34, 0xd2, 0x04,
  0x34, 0xd3, 0x46, 0x15, 0x05, 0x11, 0xa1, 0x41, 0x82, 0x00, 0xe0, 0x12,
  0xe3, 0x97, 0x04, 0xa2, 0x21, 0xb8, 0x0d, 0x05, 0x13, 0x44, 0x71, 0x98,
  0x34, 0x45, 0x94, 0x30, 0xf9, 0x26, 0x30, 0x11, 0x11, 0x02, 0x2c, 0x9c,
  0xd3, 0x48, 0x13, 0xd0, 0x4c, 0x12, 0x2a, 0x06, 0x06, 0x06, 0x00, 0x08,
  0x0e, 0x31, 0x81, 0x89, 0x88, 0x10, 0x60, 0x41, 0x81, 0x05, 0x5d, 0x94,
  0x60, 0x80, 0x32, 0x86, 0x11, 0x86, 0xa1, 0x08, 0x04, 0x1b, 0xc4, 0x51,
  0x82, 0x0d, 0xf2, 0x28, 0xc2, 0xc6, 0x06, 0x81, 0x8c, 0x00, 0x94, 0x40,
  0x84, 0x46, 0x86, 0x11, 0x84, 0xe1, 0x2c, 0x69, 0x8a, 0x28, 0x61, 0xf2,
  0x5f, 0x22, 0x9a, 0x88, 0x4b, 0x9b, 0xa6, 0x08, 0x09, 0xa8, 0x89, 0x40,
  0xc3, 0xc6, 0x46, 0x09, 0x99, 0x94, 0x41, 0xe4, 0x04, 0x80, 0x50, 0x4a,
  0xb1, 0xb1, 0xb1, 0xb1, 0x51, 0x42, 0x2a, 0xa5, 0x28, 0x29, 0x29, 0x29,
  0x29, 0x21, 0x96, 0x61, 0x84, 0x01, 0x28, 0x84, 0xc8, 0x89, 0x4b, 0x09,
  0xbd, 0x14, 0x81, 0xe0, 0x84, 0x62, 0x0a, 0x41, 0xb0, 0xb1, 0x01, 0x40,
  0x33, 0x37, 0x49, 0x53, 0x44, 0x09, 0x93, 0x5f, 0x22, 0xc6, 0x31, 0xa5,
  0x00, 0xb6, 0x38, 0xc0, 0x80, 0x04, 0x02, 0x00, 0xaa, 0x39, 0x36, 0x90,
  0xa6, 0x88, 0x12, 0x26, 0x7f, 0xa3, 0x90, 0x65, 0x12, 0x9b, 0x36, 0x42,
  0x80, 0xc6, 0x58, 0x08, 0xb1, 0x99, 0x88, 0x48, 0x22, 0x84, 0x09, 0x71,
  0x1a, 0x6d, 0x9a, 0x22, 0x24, 0xa0, 0x26, 0x42, 0x42, 0x41, 0x09, 0xdd,
  0x94, 0x41, 0xc4, 0x06, 0x87, 0x72, 0x8a, 0x20, 0x62, 0x43, 0x3b, 0x77,
  0x49, 0x53, 0x44, 0x09, 0x93, 0x8f, 0x0a, 0xc2, 0x42, 0x49, 0x88, 0xd3,
  0xa4, 0x00, 0xb6, 0x38, 0xc0, 0x80, 0x02, 0x00, 0xea, 0x29, 0x82, 0x88,
  0x0f, 0xfd, 0x1c, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b,
  0x55, 0xac, 0xc4, 0xe4, 0x23, 0xb7, 0x8d, 0x08, 0x00, 0x00, 0x00, 0x80,
  0x39, 0x02, 0x84, 0x84, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0x43, 0xa0, 0x19, 0x16, 0x02, 0x05, 0x43, 0x85, 0x08, 0x02, 0x20, 0x02,
  0xa0, 0xa2, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3,
  0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x30, 0x30, 0x30, 0x50,
  0x88, 0x23, 0x00, 0x22, 0x00, 0x42, 0x2a, 0xc3, 0x00, 0xc0, 0x00, 0x29,
  0x95, 0x01, 0x00, 0x40, 0x88, 0x98, 0x0a, 0x31, 0x00, 0x30, 0x30, 0x40,
  0x4e, 0x37, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad,
  0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x8a, 0x81, 0x81, 0x81, 0x01, 0x80, 0xc2,
  0x40, 0x01, 0x10, 0x11, 0x0d, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x0c,
  0x50, 0x54, 0x41, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x68,
  0xaa, 0x44, 0x22, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x36, 0x54, 0x55, 0x14, 0x28, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x2a, 0x8b, 0x08,
  0x00, 0x11, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x10, 0x65, 0x95,
  0x61, 0x00, 0x40, 0x88, 0xb6, 0x8a, 0x30, 0x00, 0x40, 0x5d, 0x37, 0x0d,
  0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x2b, 0x21, 0xad, 0xc4, 0xe4, 0x23,
  0xb7, 0x8d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x80, 0x52, 0x7c, 0x01, 0x10,
  0x01, 0x00, 0x10, 0x58, 0x11, 0x00, 0x00, 0x48, 0xac, 0x44, 0x22, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x03, 0x3e, 0x44, 0x56, 0x8a, 0x01, 0x80, 0x81, 0x81, 0x01, 0x32,
  0x2b, 0x03, 0x11, 0x00, 0x05, 0xa1, 0x95, 0x81, 0x08, 0xe0, 0x82, 0xd4,
  0xca, 0x40, 0x04, 0x80, 0x40, 0x6c, 0x65, 0x20, 0x02, 0x50, 0x20, 0xb7,
  0x32, 0x10, 0x01, 0x04, 0x10, 0x5c, 0x19, 0x88, 0x00, 0x0a, 0x48, 0xae,
  0x0c, 0x44, 0x00, 0x0e, 0x44, 0x57, 0x06, 0x22, 0x00, 0x06, 0xb2, 0x1b,
  0x08, 0x98, 0x23, 0x08, 0xce, 0x91, 0xa6, 0x88, 0x12, 0x26, 0x7f, 0x05,
  0xb0, 0x8e, 0x90, 0x04, 0x44, 0x6c, 0x0c, 0x6c, 0x0c, 0xcc, 0x11, 0x80,
  0x02, 0x11, 0xd0, 0x06, 0x95, 0x4c, 0x01, 0x00, 0x13, 0x14, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0,
  0x87, 0x0d, 0xb0, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74,
  0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xa0, 0xf3, 0x40, 0x0a, 0x19, 0x32, 0x52, 0x44, 0x04,
  0x60, 0x10, 0x00, 0x30, 0x8b, 0x00, 0x80, 0x89, 0x04, 0x00, 0x4c, 0x25,
  0x00, 0x60, 0x2a, 0x01, 0x00, 0x93, 0x09, 0x00, 0x98, 0x4e, 0x00, 0xc0,
  0x44, 0x02, 0x00, 0xde, 0xc1, 0x00, 0x42, 0x1d, 0x0c, 0x03, 0x00, 0x00,
  0x01, 0x00, 0x00, 0xa4, 0x03, 0x00, 0xe0, 0x1d, 0x00, 0xc0, 0x90, 0x27,
  0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x0f, 0x07, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x1e, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x60, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x43, 0x9e, 0x31, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x1a, 0x00, 0x00, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x47, 0x0d, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xc3, 0x06,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4,
  0x79, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0xc4, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x3c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0xcc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0xf2, 0x00, 0x00, 0x80, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x7b, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x3f,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x29, 0x00, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x90, 0x07, 0x15, 0x80, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x60, 0xc8, 0xa3, 0x0a, 0x40, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x05, 0x20, 0x00, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xb0, 0x02, 0x10, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x5c, 0x01,
  0x08, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c,
  0xb1, 0x00, 0x04, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x59, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x21, 0x4f, 0x2d, 0x00, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x90, 0xe7, 0x16, 0x80, 0x00, 0x48, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x0b, 0x40, 0x00, 0x2c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xd9, 0x05, 0x20,
  0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0xec,
  0x02, 0x10, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x79, 0x7a, 0x01, 0x08, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0xe0, 0x00, 0x04, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x43, 0x1e, 0x71, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x39, 0x00, 0x01, 0xb0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xc7, 0x1c, 0x80, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x83, 0x0e,
  0x40, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4,
  0x51, 0x07, 0x20, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0xf2, 0xb0, 0x03, 0x10, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0xdc, 0x01, 0x08, 0x80, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0xf0, 0x00, 0x04, 0x40, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x79, 0x00, 0x02, 0x20,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x0f, 0x3d, 0x00,
  0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xc7,
  0x1e, 0x80, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
  0x0b, 0x04, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x1c,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02,
  0x18, 0x01, 0x28, 0x81, 0x62, 0x28, 0x90, 0x42, 0x28, 0x82, 0x92, 0x28,
  0x8a, 0x52, 0x28, 0x83, 0xb2, 0x28, 0xd4, 0x80, 0x02, 0x2a, 0x87, 0x02,
  0x0c, 0x28, 0xd0, 0x80, 0x42, 0x29, 0x88, 0xc2, 0x28, 0x9c, 0x82, 0xa2,
  0xbd, 0x11, 0x00, 0xca, 0x1b, 0x01, 0xa0, 0x83, 0x19, 0x00, 0x42, 0x98,
  0x01, 0x20, 0x86, 0x19, 0x00, 0x72, 0x98, 0x01, 0xa0, 0x89, 0x19, 0x00,
  0xa2, 0x98, 0x01, 0x20, 0x8b, 0x19, 0x00, 0xba, 0x98, 0x01, 0x20, 0x93,
  0x19, 0x00, 0xaa, 0x99, 0x01, 0xa0, 0x9b, 0x19, 0x00, 0xea, 0x99, 0x01,
  0xa0, 0x82, 0x19, 0x00, 0xd2, 0x9b, 0x01, 0xa0, 0x80, 0x19, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1,
  0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41,
  0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a,
  0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9,
  0x10, 0x04, 0x13, 0x04, 0xa0, 0x0e, 0x36, 0x08, 0xc3, 0x30, 0x41, 0x00,
  0xe8, 0x60, 0x83, 0x50, 0x14, 0x1c, 0xd8, 0xd2, 0xc4, 0x26, 0x08, 0x80,
  0x1d, 0x6c, 0x18, 0x0e, 0x64, 0x98, 0x20, 0x08, 0x00, 0x8b, 0xa9, 0xb1,
  0x32, 0xb7, 0xb2, 0x09, 0x02, 0x70, 0x07, 0x13, 0x04, 0x00, 0x0f, 0x36,
  0x08, 0x45, 0xb3, 0x21, 0x29, 0x94, 0xa5, 0x28, 0x06, 0xa6, 0x70, 0x26,
  0x08, 0x89, 0x40, 0xa7, 0xc8, 0xcd, 0x2e, 0x4d, 0xee, 0xcd, 0xad, 0xad,
  0xcc, 0x8d, 0xae, 0x29, 0x0c, 0x6e, 0x82, 0x00, 0xe4, 0xc1, 0x04, 0x01,
  0xd0, 0x83, 0x0d, 0x42, 0x31, 0x6d, 0x48, 0x06, 0x28, 0x2a, 0x86, 0x41,
  0x2a, 0xa8, 0x09, 0x42, 0x53, 0x70, 0x49, 0x72, 0x23, 0x2b, 0xc3, 0x13,
  0xaa, 0x33, 0x33, 0x2b, 0x93, 0x9b, 0x20, 0x00, 0x7b, 0x30, 0x41, 0x00,
  0xf8, 0x60, 0x83, 0x50, 0x64, 0x1b, 0x12, 0xc9, 0xba, 0x86, 0x62, 0xc0,
  0x0a, 0x6d, 0x82, 0x00, 0xf4, 0xc1, 0x04, 0xe1, 0x31, 0xf8, 0x04, 0xd1,
  0xd1, 0xc9, 0xa5, 0x89, 0xd5, 0xd1, 0x95, 0x09, 0xd5, 0x99, 0x99, 0x95,
  0xc9, 0x4d, 0x10, 0x00, 0x3f, 0xd8, 0x90, 0x70, 0x9d, 0x37, 0x0c, 0xc3,
  0x57, 0x00, 0x13, 0x84, 0xe4, 0xa0, 0x43, 0x94, 0x66, 0x66, 0x56, 0x37,
  0x57, 0x46, 0x55, 0x86, 0x47, 0x57, 0x27, 0x57, 0xb6, 0x21, 0x69, 0xc2,
  0x40, 0x0c, 0x06, 0x69, 0x90, 0x0a, 0x6a, 0x43, 0xf1, 0x54, 0x1b, 0x18,
  0x8c, 0xc1, 0x04, 0xc1, 0x08, 0xc8, 0x48, 0x95, 0xb9, 0x91, 0x95, 0xc9,
  0x51, 0x85, 0xc9, 0x9d, 0x95, 0xd1, 0x4d, 0x10, 0xf2, 0x41, 0x15, 0x36,
  0x2c, 0x45, 0x19, 0x98, 0x41, 0x51, 0x0c, 0xd2, 0x19, 0x9c, 0xc1, 0x19,
  0x50, 0x1b, 0x02, 0x34, 0x98, 0x20, 0x54, 0x09, 0x93, 0xb3, 0xaf, 0xb9,
  0xb1, 0x32, 0xb7, 0xb2, 0x21, 0xa1, 0x09, 0x02, 0xf0, 0x07, 0x1b, 0x90,
  0x42, 0x0d, 0xd6, 0xa0, 0x28, 0x06, 0x36, 0x00, 0x26, 0x08, 0x98, 0x42,
  0xa4, 0x29, 0x8c, 0xae, 0x4c, 0x2e, 0x2d, 0x8c, 0x6d, 0x82, 0x00, 0x80,
  0xc2, 0x06, 0x64, 0x70, 0x83, 0x37, 0x18, 0x8a, 0x01, 0x0e, 0x80, 0x0d,
  0x42, 0x1b, 0xc4, 0xc1, 0x04, 0x61, 0x19, 0xd8, 0x30, 0xa5, 0xb9, 0x95,
  0x85, 0xc9, 0x4d, 0x85, 0xb5, 0xc1, 0xb1, 0x95, 0xc9, 0x6d, 0x40, 0x8a,
  0x39, 0xa0, 0x83, 0xa2, 0x18, 0x0a, 0x60, 0x82, 0xb0, 0x10, 0x64, 0xa0,
  0xde, 0xd2, 0xdc, 0xe8, 0xa6, 0xc2, 0xda, 0xe0, 0xd8, 0xca, 0xe4, 0x36,
  0x20, 0x83, 0x1d, 0xdc, 0x41, 0x31, 0x0c, 0x05, 0xb0, 0x41, 0xa8, 0x03,
  0x3c, 0xd8, 0x40, 0x90, 0x41, 0x1a, 0xc8, 0x41, 0x1e, 0x4c, 0x10, 0x82,
  0x5c, 0x60, 0x80, 0x36, 0x41, 0x00, 0x42, 0x61, 0x83, 0x81, 0xf0, 0x01,
  0x57, 0xf4, 0x41, 0xb3, 0x41, 0x68, 0xfc, 0x60, 0x82, 0x50, 0xdc, 0xc2,
  0x06, 0x03, 0xe1, 0x03, 0xae, 0xe8, 0x83, 0x69, 0x83, 0xc0, 0x84, 0xc2,
  0x04, 0x61, 0x7a, 0x05, 0x46, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
  0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x1b, 0x86,
  0xa6, 0x19, 0x36, 0x20, 0x08, 0x29, 0x48, 0xa5, 0xc0, 0x15, 0x7d, 0x30,
  0xd1, 0x19, 0x0b, 0x6b, 0x2b, 0x93, 0x0b, 0x83, 0x7a, 0x9b, 0x4b, 0xa3,
  0x4b, 0x7b, 0x73, 0x9b, 0x20, 0x00, 0xa2, 0xb0, 0xc1, 0x40, 0x4e, 0x81,
  0x43, 0x85, 0x3e, 0x98, 0x48, 0xd0, 0xa5, 0xb5, 0x95, 0x4d, 0x10, 0x80,
  0x51, 0xd8, 0x60, 0x20, 0xaa, 0xc0, 0xad, 0x42, 0x1f, 0x64, 0x1b, 0x08,
  0x36, 0x30, 0x85, 0x54, 0x60, 0x85, 0x09, 0x02, 0xc2, 0x0a, 0x13, 0x04,
  0x80, 0x14, 0x48, 0xb4, 0xa5, 0xc1, 0xcd, 0x6d, 0x20, 0x10, 0x58, 0xe0,
  0x98, 0x0d, 0xc3, 0x2b, 0x84, 0x42, 0x2c, 0x4c, 0x10, 0x8e, 0x55, 0xa0,
  0x81, 0x16, 0xe6, 0x46, 0xc6, 0x56, 0xb6, 0xc1, 0x40, 0x68, 0x81, 0x2b,
  0xfa, 0x20, 0xdb, 0x20, 0x34, 0xb5, 0x30, 0x41, 0x60, 0x5a, 0x61, 0x83,
  0x81, 0xf0, 0x01, 0x57, 0xf4, 0x41, 0xb6, 0x41, 0x68, 0x70, 0x61, 0x82,
  0xe0, 0xb8, 0xc2, 0x04, 0xc1, 0x8a, 0x05, 0x26, 0x52, 0x6f, 0x75, 0x67,
  0x68, 0x6e, 0x65, 0x73, 0x73, 0x1b, 0x0c, 0x84, 0x17, 0xb8, 0xa2, 0x0f,
  0x26, 0x46, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x52, 0x65, 0x66,
  0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1b, 0x0c, 0xc4, 0x17, 0xb8,
  0xa6, 0x0f, 0x26, 0x1e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x13,
  0x04, 0xa0, 0x14, 0x36, 0x18, 0x08, 0x38, 0x70, 0xe1, 0xd0, 0x07, 0x13,
  0x23, 0xa4, 0xb0, 0x39, 0xa2, 0x34, 0x33, 0xb3, 0xba, 0xb9, 0x32, 0xaa,
  0x32, 0x3c, 0xba, 0x3a, 0xb9, 0xb2, 0x09, 0x02, 0x60, 0x0a, 0x1b, 0x0c,
  0x64, 0x1c, 0x38, 0x72, 0xe8, 0x83, 0x8c, 0x0c, 0x51, 0x9a, 0x99, 0x59,
  0xdd, 0x5c, 0xd9, 0xd0, 0x1b, 0xdb, 0x9b, 0xdc, 0x06, 0x03, 0x31, 0x07,
  0x8e, 0xe9, 0x83, 0x69, 0x83, 0x01, 0x07, 0xbd, 0xf0, 0x0b, 0xe2, 0x50,
  0x0e, 0xe7, 0x30, 0x41, 0xd0, 0x07, 0x5c, 0xa0, 0xf1, 0x24, 0x97, 0x76,
  0x96, 0xe6, 0xb6, 0xc1, 0x40, 0xd4, 0x81, 0x2b, 0xfa, 0x60, 0x22, 0x41,
  0xd5, 0x94, 0xe6, 0xb6, 0xc1, 0x40, 0xd8, 0x81, 0x23, 0x87, 0x3e, 0x98,
  0x98, 0x10, 0xa5, 0xc9, 0x95, 0x8d, 0xd1, 0xa5, 0xbd, 0xb9, 0x6d, 0x30,
  0x10, 0x77, 0xe0, 0x98, 0x3e, 0x98, 0x48, 0x50, 0x35, 0x85, 0xe1, 0x4d,
  0x10, 0x80, 0x53, 0xd8, 0x60, 0x20, 0xf0, 0xc0, 0xc5, 0x43, 0x1f, 0x4c,
  0x1b, 0x0a, 0x38, 0x58, 0x87, 0x76, 0x78, 0x07, 0x79, 0x98, 0x20, 0xd4,
  0x01, 0x2d, 0xb0, 0x18, 0x7a, 0x63, 0x7b, 0x93, 0xdb, 0x60, 0x20, 0xf5,
  0xc0, 0x15, 0x7d, 0x30, 0xd1, 0x91, 0x2a, 0x1b, 0xab, 0x93, 0x9b, 0x4b,
  0x7b, 0x73, 0x63, 0x2a, 0xb3, 0x2b, 0x63, 0xdb, 0x60, 0x20, 0xf7, 0xc0,
  0x31, 0x7d, 0x90, 0x6d, 0x18, 0x5e, 0xc1, 0x1e, 0xf0, 0x61, 0x82, 0x60,
  0x06, 0xb3, 0x30, 0x41, 0x00, 0x50, 0x81, 0x86, 0xd3, 0x9b, 0x5c, 0x5b,
  0x18, 0xdb, 0x06, 0x03, 0xe1, 0x07, 0xae, 0xe8, 0x83, 0x89, 0x07, 0x55,
  0x98, 0xdb, 0x59, 0x99, 0x1b, 0xdd, 0x06, 0x03, 0xf1, 0x07, 0x8e, 0xe9,
  0x83, 0x89, 0x42, 0x95, 0xd5, 0x06, 0x03, 0x01, 0x09, 0x0e, 0x0e, 0xfa,
  0x60, 0xda, 0x40, 0xec, 0x43, 0x3f, 0xfc, 0x43, 0x48, 0x4c, 0x10, 0xee,
  0xa0, 0x16, 0xc8, 0x88, 0x85, 0xc9, 0xe5, 0x8d, 0x95, 0xb9, 0xd1, 0xc9,
  0xa5, 0x8d, 0xcd, 0x6d, 0x30, 0x10, 0x92, 0xe0, 0x8a, 0x3e, 0x98, 0x36,
  0x08, 0xe1, 0x50, 0x12, 0x13, 0x84, 0x3e, 0xb0, 0x05, 0x22, 0x48, 0x69,
  0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1b, 0x0c, 0x04, 0x25, 0xb8, 0xa2,
  0x0f, 0xb2, 0x0d, 0x42, 0x93, 0x12, 0x13, 0x04, 0x0a, 0x16, 0x36, 0x10,
  0xc8, 0x1a, 0x70, 0xc5, 0x06, 0x81, 0x0d, 0x58, 0x62, 0x82, 0x70, 0xc9,
  0xc2, 0x06, 0x02, 0x79, 0x03, 0xae, 0xd8, 0x20, 0xc0, 0xc1, 0x4b, 0x6c,
  0xf8, 0x8a, 0x3d, 0xf8, 0x03, 0x50, 0x10, 0x85, 0x51, 0x68, 0x05, 0x57,
  0x90, 0x85, 0x59, 0xb0, 0x85, 0x5b, 0xc8, 0x05, 0x5d, 0xf8, 0x83, 0x5d,
  0x40, 0x87, 0x74, 0x98, 0x07, 0x7a, 0xc8, 0x07, 0x7d, 0x10, 0x89, 0x91,
  0x30, 0x89, 0x93, 0x50, 0x89, 0x95, 0x68, 0x09, 0x97, 0x80, 0x89, 0x09,
  0x82, 0xb6, 0x6c, 0x10, 0xfa, 0x60, 0xda, 0x00, 0x6c, 0x18, 0x86, 0x99,
  0xa0, 0x89, 0x0d, 0x41, 0x4d, 0x4c, 0x10, 0x3a, 0x66, 0xc3, 0x50, 0xcc,
  0x04, 0x4d, 0x6c, 0x10, 0x6a, 0x02, 0x27, 0x26, 0x08, 0x5f, 0x33, 0x41,
  0x08, 0x03, 0x67, 0x82, 0x40, 0x06, 0xcf, 0x86, 0x61, 0xa0, 0x09, 0x9a,
  0xd8, 0x10, 0xf4, 0xc4, 0x04, 0x21, 0x0d, 0xa0, 0x0d, 0x43, 0x41, 0x13,
  0x34, 0xb1, 0x41, 0xe8, 0x83, 0x6c, 0xc3, 0x50, 0x84, 0x05, 0x4d, 0x6c,
  0x18, 0xc0, 0xa2, 0x27, 0xc4, 0x62, 0x82, 0xb0, 0x06, 0xd1, 0x86, 0xa2,
  0x26, 0x70, 0x02, 0x27, 0x70, 0x02, 0x27, 0x26, 0x08, 0x6d, 0x20, 0x4d,
  0x10, 0xe0, 0x60, 0xda, 0x40, 0x80, 0x45, 0x4f, 0x88, 0x05, 0x4e, 0x4c,
  0x10, 0xe4, 0x80, 0xda, 0x20, 0xd4, 0x04, 0x58, 0x4c, 0x10, 0xbe, 0x6a,
  0x82, 0x40, 0x07, 0xd6, 0x06, 0xa2, 0x26, 0x70, 0x02, 0x27, 0xc4, 0x62,
  0x82, 0xa0, 0x07, 0xd7, 0x86, 0x41, 0xa2, 0x09, 0x9a, 0xd8, 0x30, 0xf4,
  0xc4, 0x5b, 0x80, 0xc5, 0x04, 0x81, 0x0f, 0xb0, 0x0d, 0x42, 0x4f, 0xbc,
  0xc5, 0x04, 0x01, 0x14, 0xb2, 0x0d, 0xdf, 0x20, 0x13, 0x36, 0x71, 0x13,
  0x39, 0xa1, 0x13, 0x36, 0xb1, 0x13, 0x39, 0xc1, 0x13, 0x3e, 0xf1, 0x13,
  0x63, 0x41, 0x16, 0x65, 0x61, 0x16, 0x65, 0x71, 0x16, 0x68, 0x91, 0x16,
  0x6a, 0xb1, 0x16, 0x36, 0xc1, 0x16, 0x6d, 0xe1, 0x16, 0x70, 0x11, 0x17,
  0x72, 0x31, 0x17, 0x72, 0xc1, 0x86, 0x2d, 0x4d, 0xcc, 0xc5, 0xed, 0x4d,
  0x47, 0xa7, 0xcc, 0x8d, 0x4e, 0x2e, 0x6f, 0x43, 0x01, 0xd4, 0x05, 0xa0,
  0x07, 0xc0, 0x86, 0x21, 0x2e, 0xbe, 0x57, 0xd8, 0x40, 0xb8, 0x05, 0xf6,
  0x0a, 0xe1, 0xb0, 0x41, 0xe0, 0x89, 0x3e, 0xd8, 0x30, 0xcc, 0xc5, 0xd7,
  0x70, 0x48, 0x73, 0xa3, 0xe3, 0xf3, 0xd6, 0xe6, 0x96, 0x06, 0xf7, 0x46,
  0x57, 0xe6, 0x46, 0x07, 0x32, 0x86, 0x16, 0x26, 0xc7, 0x68, 0x2a, 0xad,
  0x0d, 0x8e, 0xad, 0x0c, 0x64, 0xe8, 0x65, 0x68, 0x65, 0x05, 0x84, 0x4a,
  0x28, 0x28, 0x68, 0x43, 0xd0, 0x17, 0x13, 0x84, 0x7d, 0x48, 0x85, 0x0d,
  0x03, 0x5f, 0xf8, 0xc5, 0x5f, 0x6c, 0x18, 0xf6, 0x02, 0x34, 0xfe, 0x62,
  0xc3, 0x10, 0x1a, 0xa1, 0xf1, 0x17, 0xf4, 0x83, 0x80, 0x9f, 0xa3, 0x32,
  0xb7, 0x32, 0xb9, 0x30, 0xba, 0xb2, 0xa1, 0xb0, 0xb6, 0x32, 0xb9, 0x30,
  0xa9, 0xb0, 0x3c, 0x20, 0xa0, 0xac, 0x20, 0x2c, 0xab, 0x1f, 0x12, 0xbb,
  0xb2, 0x31, 0xba, 0x37, 0x39, 0xa0, 0x24, 0x12, 0x98, 0x18, 0x20, 0xa0,
  0xa0, 0xa4, 0x20, 0xab, 0x1f, 0x12, 0xbb, 0xb2, 0x31, 0xba, 0x37, 0x39,
  0xa0, 0x26, 0x12, 0x18, 0x19, 0x20, 0xa0, 0x18, 0x20, 0xad, 0x15, 0x02,
  0x69, 0x8c, 0x06, 0x4f, 0x21, 0xe0, 0xe7, 0xa8, 0xcc, 0xad, 0x4c, 0x2e,
  0x8c, 0xae, 0x6c, 0x28, 0xac, 0xad, 0x4c, 0x2e, 0x4c, 0x2a, 0x2c, 0x0f,
  0x08, 0x28, 0x2b, 0x08, 0xcb, 0xea, 0x87, 0xc4, 0xae, 0x6c, 0x8c, 0xee,
  0x4d, 0x0e, 0x28, 0x89, 0x04, 0x26, 0x06, 0x08, 0x28, 0x28, 0x29, 0xc8,
  0xea, 0x87, 0xc4, 0xae, 0x6c, 0x8c, 0xee, 0x4d, 0x0e, 0xa8, 0x89, 0x04,
  0x46, 0x06, 0x08, 0x28, 0x06, 0x48, 0x4b, 0x07, 0xa4, 0xe4, 0x4d, 0x2e,
  0xed, 0x2c, 0xcd, 0x6d, 0xc5, 0x60, 0x1a, 0xa4, 0x51, 0x1a, 0x54, 0x85,
  0x80, 0x9f, 0xa3, 0x32, 0xb7, 0x32, 0xb9, 0x30, 0xba, 0xb2, 0xa1, 0xb0,
  0xb6, 0x32, 0xb9, 0x30, 0xa9, 0xb0, 0x3c, 0x20, 0xa0, 0xac, 0x20, 0x2c,
  0xab, 0x1f, 0x12, 0xbb, 0xb2, 0x31, 0xba, 0x37, 0x39, 0xa0, 0x24, 0x12,
  0x98, 0x18, 0x20, 0xa0, 0xa0, 0xa4, 0x20, 0xab, 0x1f, 0x12, 0xbb, 0xb2,
  0x31, 0xba, 0x37, 0x39, 0xa0, 0x26, 0x12, 0x18, 0x19, 0x20, 0xa0, 0x18,
  0x20, 0x2d, 0x1d, 0x90, 0x12, 0xb2, 0x34, 0xb9, 0xb2, 0x31, 0xba, 0xb4,
  0x37, 0xb7, 0x15, 0x03, 0x6a, 0x90, 0xc6, 0x69, 0x6c, 0x10, 0x4c, 0x03,
  0x35, 0x36, 0x0c, 0xa0, 0x01, 0x1a, 0x7f, 0x51, 0x85, 0x8d, 0xcd, 0xae,
  0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x10, 0x54, 0x21, 0xc3,
  0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x0c, 0x4d,
  0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6, 0x04, 0x45,
  0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37,
  0xb2, 0x32, 0xb6, 0x29, 0x01, 0x52, 0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c,
  0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0x90, 0x07, 0x95, 0xc8,
  0xf0, 0x5c, 0xe8, 0xf2, 0xe0, 0xca, 0x82, 0xdc, 0xdc, 0xde, 0xe8, 0xc2,
  0xe8, 0xd2, 0xde, 0xdc, 0xe6, 0xa6, 0x08, 0x30, 0x31, 0x17, 0x75, 0xc8,
  0xf0, 0x5c, 0xca, 0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8,
  0xe6, 0xa6, 0x04, 0x75, 0xd1, 0x86, 0x0c, 0xcf, 0xc5, 0xac, 0xce, 0x6d,
  0xcc, 0x05, 0x4e, 0xee, 0x0d, 0x6e, 0x6e, 0x0a, 0x61, 0x17, 0x77, 0x81,
  0x17, 0x79, 0x51, 0x89, 0x0c, 0xcf, 0xc5, 0xac, 0xce, 0x6d, 0xcc, 0x65,
  0x2e, 0xed, 0xcc, 0x2d, 0x8c, 0xae, 0x4e, 0xae, 0x6c, 0x6e, 0x0a, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x8c, 0xcc, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x74, 0x60, 0x07, 0x37, 0x90, 0x87, 0x72, 0x98, 0x87, 0x77, 0xa8,
  0x07, 0x79, 0x18, 0x87, 0x72, 0x70, 0x83, 0x70, 0xa0, 0x07, 0x7a, 0x90,
  0x87, 0x74, 0x10, 0x87, 0x7a, 0xa0, 0x87, 0x72, 0x98, 0xb1, 0x3c, 0xe4,
  0x80, 0x0f, 0x6e, 0x00, 0x0f, 0xf2, 0x50, 0x0e, 0xe3, 0x90, 0x0e, 0xf3,
  0x50, 0x0e, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00,
  0xb6, 0xb1, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44,
  0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x5d, 0x14,
  0x7b, 0x10, 0xf8, 0x1d, 0xcb, 0x74, 0x62, 0xda, 0x6c, 0xae, 0xcf, 0xcb,
  0xc3, 0x37, 0xfb, 0x2d, 0x07, 0x02, 0xb3, 0xc1, 0x5f, 0xd0, 0xfa, 0x23,
  0xd9, 0xcb, 0x63, 0xfa, 0x5b, 0x0e, 0x6c, 0x92, 0x60, 0x33, 0x20, 0xb0,
  0x6a, 0x2d, 0xcb, 0xe9, 0x65, 0x7c, 0x90, 0x4e, 0x97, 0xa7, 0xc5, 0x75,
  0x7a, 0x19, 0x08, 0x04, 0x6a, 0x8d, 0xe3, 0x19, 0x2e, 0xdf, 0x79, 0x7c,
  0xaa, 0x01, 0x22, 0xcc, 0x2f, 0x6e, 0xdb, 0x60, 0x62, 0x61, 0xb8, 0x7c,
  0xe7, 0xf1, 0x85, 0x88, 0x00, 0x26, 0x22, 0x04, 0x9a, 0x61, 0x21, 0xbe,
  0xc8, 0x61, 0x56, 0x42, 0x72, 0xa8, 0x48, 0x20, 0xd8, 0x29, 0xa2, 0x84,
  0xe9, 0x73, 0xa2, 0x12, 0x09, 0x7c, 0x69, 0x8a, 0x28, 0x61, 0xf2, 0x57,
  0x00, 0x9b, 0x22, 0x40, 0x40, 0x1a, 0x43, 0x13, 0x04, 0x62, 0x21, 0x22,
  0x60, 0x42, 0x9c, 0x86, 0x9d, 0x22, 0x4a, 0x98, 0xa8, 0x88, 0xa8, 0x87,
  0x2b, 0xf0, 0x6b, 0xe6, 0xa5, 0xe1, 0xfc, 0xb9, 0xec, 0x9e, 0xa2, 0xc3,
  0xe4, 0xb2, 0x1c, 0x08, 0xcc, 0x06, 0xb1, 0x58, 0x6d, 0x31, 0xf8, 0x41,
  0xe0, 0x37, 0x0d, 0xb7, 0xe1, 0xec, 0x72, 0xd1, 0x6d, 0x4f, 0xcb, 0xdf,
  0xee, 0x76, 0xd9, 0x4d, 0x6f, 0x86, 0xe1, 0x40, 0x60, 0x36, 0xf8, 0x0b,
  0x5a, 0x7f, 0x24, 0x7b, 0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x4d, 0x12, 0x6c,
  0x06, 0x04, 0x5a, 0x7f, 0x24, 0x7b, 0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x4d,
  0x12, 0x4c, 0x06, 0x04, 0x02, 0xb5, 0xb6, 0x22, 0x0d, 0x97, 0xef, 0x3c,
  0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0xc9, 0x8c,
  0xc2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34,
  0xc3, 0x42, 0x7c, 0x91, 0xc3, 0xac, 0x84, 0xe4, 0x50, 0x91, 0x40, 0xb0,
  0x53, 0x44, 0x09, 0xd3, 0xe7, 0x44, 0x25, 0x12, 0xf8, 0xd2, 0x14, 0x51,
  0xc2, 0xe4, 0x6f, 0xd8, 0x44, 0x68, 0xc3, 0x10, 0x11, 0x92, 0xb4, 0x51,
  0x45, 0x41, 0x44, 0x66, 0x82, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0xe5, 0x44,
  0xcb, 0xb0, 0x02, 0x18, 0x1a, 0x21, 0x06, 0xd2, 0xf8, 0xc5, 0x6d, 0xd7,
  0x80, 0x18, 0x04, 0x7e, 0xcc, 0xb4, 0xbb, 0x1c, 0x96, 0x4f, 0xc3, 0x6d,
  0x38, 0xbb, 0x2c, 0x07, 0x02, 0x67, 0xd5, 0x69, 0xb8, 0x0d, 0x67, 0x97,
  0xe5, 0x53, 0x7a, 0x98, 0x5e, 0x06, 0x02, 0x83, 0x46, 0x62, 0x0d, 0x97,
  0xef, 0x3c, 0xfe, 0x44, 0x5c, 0x13, 0x15, 0x11, 0xec, 0xe4, 0x44, 0x84,
  0x5f, 0xdc, 0xb6, 0x79, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x20, 0xd2,
  0x03, 0x4c, 0xc2, 0xb1, 0x02, 0x98, 0x24, 0x36, 0x03, 0x71, 0xf9, 0xc8,
  0x6d, 0xdb, 0x49, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x80, 0xb5, 0x1c,
  0x15, 0x45, 0x44, 0x33, 0xf9, 0xc5, 0x6d, 0x5b, 0x4a, 0x35, 0x5c, 0xbe,
  0xf3, 0xf8, 0x4f, 0x84, 0x30, 0xc8, 0x84, 0x54, 0x84, 0xd8, 0xf9, 0xc8,
  0x6d, 0x57, 0xcc, 0x2b, 0x90, 0xf1, 0xae, 0x37, 0xdc, 0x35, 0x96, 0x97,
  0xc3, 0xf4, 0x32, 0x32, 0xec, 0x26, 0xb3, 0xcb, 0x46, 0xf9, 0xbb, 0x2d,
  0x2d, 0xcf, 0xdf, 0x75, 0xf9, 0xb8, 0x3c, 0xa5, 0xcb, 0xeb, 0x63, 0xba,
  0xf1, 0x2d, 0x67, 0xa6, 0xc5, 0xae, 0x31, 0x3b, 0x3c, 0x9f, 0xbb, 0xa4,
  0x57, 0x6a, 0x19, 0x4f, 0xaf, 0xcb, 0xcb, 0x32, 0x22, 0xcf, 0x5e, 0x1e,
  0xd3, 0xdf, 0x72, 0x9e, 0x99, 0xfd, 0x0e, 0xd3, 0x59, 0x20, 0x9a, 0x0f,
  0xe4, 0x33, 0x04, 0x42, 0x22, 0x88, 0xa1, 0x2c, 0xf2, 0x20, 0xf0, 0x3b,
  0x96, 0xe9, 0xcc, 0xf4, 0x19, 0x4d, 0x1f, 0xbe, 0xd9, 0x6f, 0x39, 0x10,
  0x98, 0x0d, 0xfe, 0x82, 0xd6, 0x1f, 0xc9, 0x5e, 0x1e, 0xd3, 0xdf, 0x72,
  0x60, 0x93, 0x04, 0x9b, 0x01, 0x81, 0xd6, 0x1f, 0xc9, 0x5e, 0x1e, 0xd3,
  0xdf, 0x72, 0x60, 0x93, 0x04, 0x93, 0x01, 0x81, 0xb0, 0x24, 0x50, 0x5b,
  0x15, 0x65, 0x10, 0xf8, 0x21, 0xd3, 0x74, 0xe8, 0x7b, 0x9e, 0xa6, 0xa7,
  0xdf, 0x6e, 0x20, 0x30, 0x1b, 0xfc, 0x05, 0xad, 0x3f, 0x92, 0xbd, 0x3c,
  0xa6, 0xbf, 0xe5, 0xc0, 0x26, 0x09, 0x26, 0x03, 0x02, 0xb1, 0xda, 0x12,
  0x98, 0x83, 0xc0, 0xaf, 0xe8, 0xb6, 0xa7, 0xe5, 0x6f, 0x77, 0xbb, 0xec,
  0xa6, 0x37, 0xc3, 0x70, 0x20, 0x70, 0x66, 0xfd, 0x91, 0xa8, 0x65, 0x3c,
  0xbd, 0x2e, 0x2f, 0xcb, 0x88, 0x40, 0xeb, 0x8f, 0x64, 0x2f, 0x8f, 0xe9,
  0x6f, 0x39, 0xb0, 0x49, 0x82, 0xcd, 0x80, 0x40, 0x20, 0x30, 0x58, 0x0e,
  0x74, 0x10, 0xf8, 0x1d, 0xcb, 0xee, 0xb2, 0x3c, 0x4c, 0x2f, 0x4b, 0xc3,
  0x6e, 0xf2, 0xbb, 0x4d, 0x4c, 0xcb, 0xcb, 0x63, 0x7a, 0xfa, 0xed, 0x06,
  0x02, 0xb3, 0xc1, 0x5f, 0xd0, 0xfa, 0x23, 0xd9, 0xcb, 0x63, 0xfa, 0x5b,
  0x0e, 0x6c, 0x92, 0x60, 0x32, 0x20, 0xd0, 0x1a, 0x03, 0x02, 0xb5, 0x75,
  0x30, 0x07, 0x81, 0x1f, 0x31, 0x6d, 0x36, 0xd7, 0xe7, 0x65, 0x6a, 0x19,
  0x4f, 0xaf, 0xcb, 0xcb, 0x40, 0xe0, 0xcc, 0xfa, 0x23, 0x51, 0xcb, 0x78,
  0x7a, 0x5d, 0x5e, 0x96, 0x11, 0x81, 0xd6, 0x1f, 0xc9, 0x5e, 0x1e, 0xd3,
  0xdf, 0x72, 0x60, 0x93, 0x04, 0x9b, 0x01, 0x81, 0x40, 0x60, 0xd0, 0x50,
  0xa8, 0xe1, 0xf2, 0x9d, 0xc7, 0x0f, 0xa8, 0xa2, 0x20, 0xa2, 0xd2, 0x01,
  0x06, 0x1f, 0xb9, 0xed, 0x72, 0x69, 0x05, 0x32, 0xde, 0xf5, 0x86, 0xbb,
  0xc6, 0xf2, 0x72, 0x98, 0x5e, 0x46, 0x86, 0xdd, 0x64, 0x76, 0xd9, 0x28,
  0x7f, 0xb7, 0xa5, 0xe5, 0xf9, 0xbb, 0x2e, 0x1f, 0x97, 0xa7, 0x74, 0x79,
  0x7d, 0x4c, 0x37, 0xbe, 0xe5, 0xcc, 0xb4, 0xd8, 0x35, 0x66, 0x87, 0xe7,
  0x73, 0x17, 0xb5, 0x8c, 0xa7, 0xd7, 0xe5, 0x65, 0x19, 0x91, 0x67, 0x2f,
  0x8f, 0xe9, 0x6f, 0x39, 0xcf, 0xcc, 0x7e, 0x87, 0xe9, 0x2c, 0x10, 0xcd,
  0x07, 0xf2, 0x95, 0x84, 0x1f, 0x04, 0x7e, 0xc3, 0x30, 0x7b, 0x5c, 0x67,
  0x87, 0xe9, 0x65, 0x6b, 0x98, 0x5d, 0x2f, 0x1b, 0xe5, 0xef, 0xb6, 0x30,
  0x2c, 0xcf, 0x8f, 0xcb, 0x6e, 0xba, 0x3c, 0x3d, 0x9e, 0x03, 0x81, 0xd9,
  0xe0, 0x2f, 0x68, 0xfd, 0x91, 0xec, 0xe5, 0x31, 0xfd, 0x2d, 0x07, 0x36,
  0x49, 0xb0, 0x18, 0x10, 0x68, 0x8d, 0x01, 0x61, 0x30, 0x18, 0x50, 0x5b,
  0x0d, 0x73, 0x10, 0xf8, 0x1d, 0xcb, 0xee, 0xb2, 0x3c, 0x4c, 0x2f, 0x0f,
  0xdf, 0xf3, 0xb4, 0xbb, 0x7c, 0x2d, 0xa7, 0xcf, 0x68, 0x7a, 0x99, 0x2c,
  0x0d, 0xe7, 0x81, 0xc0, 0x6c, 0xf0, 0x17, 0xb4, 0xfe, 0x48, 0xf6, 0xf2,
  0x98, 0xfe, 0x96, 0x03, 0x9b, 0x24, 0x98, 0x0c, 0x08, 0xc4, 0x6a, 0x0b,
  0x83, 0x0c, 0x02, 0x3f, 0x66, 0xfa, 0x8c, 0xa6, 0xa7, 0xdd, 0xe7, 0x66,
  0x7a, 0x3e, 0x07, 0x02, 0xb3, 0x41, 0x6c, 0x95, 0x99, 0x3e, 0xa3, 0xe9,
  0xd0, 0x70, 0x9e, 0xfd, 0x0e, 0x93, 0x81, 0x40, 0xa0, 0xd6, 0x3a, 0xc0,
  0x60, 0xb8, 0x7c, 0xe7, 0xf1, 0x07, 0x44, 0x7a, 0x80, 0x49, 0x38, 0x56,
  0x00, 0x93, 0x3a, 0x84, 0x21, 0x1a, 0x09, 0x71, 0x1a, 0xc9, 0x47, 0x6e,
  0xbb, 0x0a, 0xbc, 0xc0, 0x2f, 0xe9, 0x26, 0x97, 0xf1, 0xc2, 0xba, 0xd9,
  0x5c, 0x96, 0x03, 0x81, 0x33, 0xeb, 0x8f, 0x24, 0xac, 0x9b, 0xcd, 0x65,
  0x39, 0x30, 0x09, 0x04, 0x06, 0x4d, 0x63, 0x1b, 0x2e, 0xdf, 0x79, 0x7c,
  0x21, 0xa0, 0x8a, 0x82, 0x88, 0x4a, 0x07, 0x18, 0x4a, 0xc2, 0x00, 0x04,
  0xcc, 0x47, 0x6e, 0xbb, 0x32, 0xd2, 0x20, 0xf0, 0x7b, 0x8e, 0xc7, 0xec,
  0xfa, 0x3c, 0xfd, 0x76, 0x37, 0xd3, 0xf3, 0x39, 0x10, 0x98, 0x0d, 0x62,
  0xab, 0xcf, 0xf1, 0x98, 0x5d, 0x9f, 0xa7, 0xdf, 0x6e, 0x68, 0x38, 0xcf,
  0x7e, 0x87, 0xc9, 0x40, 0x20, 0x50, 0x6b, 0x20, 0xd5, 0x70, 0xf9, 0xce,
  0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x44, 0x49, 0x54, 0xc4, 0xe2, 0x17, 0xb7,
  0x6d, 0x2f, 0x7e, 0x30, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13,
  0x11, 0x02, 0xcd, 0xb0, 0x10, 0x5f, 0xe4, 0x30, 0x2b, 0x21, 0x39, 0x54,
  0x24, 0x10, 0xec, 0x14, 0x51, 0xc2, 0xf4, 0x39, 0x51, 0x89, 0x04, 0xbe,
  0x34, 0x45, 0x94, 0x30, 0xf9, 0x2c, 0xc0, 0x3c, 0x0b, 0x11, 0xb1, 0x13,
  0x30, 0x11, 0xa6, 0x62, 0x06, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x45, 0x80,
  0x40, 0xac, 0x00, 0xe6, 0x4b, 0x53, 0x44, 0x09, 0x93, 0x8f, 0x0a, 0xc2,
  0x42, 0x49, 0x88, 0xd3, 0xa4, 0x00, 0xb6, 0x38, 0xc0, 0x50, 0x10, 0x6f,
  0x10, 0xf8, 0x1d, 0xcb, 0x74, 0x6b, 0x59, 0x4e, 0x2f, 0xe3, 0x83, 0x74,
  0xba, 0x3c, 0x2d, 0xae, 0xd3, 0xcb, 0x40, 0x60, 0x36, 0xf8, 0x0b, 0x56,
  0xad, 0x65, 0x39, 0xbd, 0x8c, 0x0f, 0xd2, 0xe9, 0xf2, 0xb4, 0xb8, 0x4e,
  0x2f, 0x03, 0x81, 0x49, 0xa0, 0xb6, 0x16, 0x9a, 0xc0, 0x4f, 0x1e, 0x76,
  0x93, 0x81, 0xc0, 0x6c, 0xb0, 0x89, 0xd5, 0x56, 0x44, 0x2b, 0x04, 0x7e,
  0xc3, 0x30, 0x7b, 0x5c, 0x67, 0x87, 0xe9, 0x65, 0x6b, 0x98, 0x5d, 0x2f,
  0x1b, 0xe5, 0xef, 0xb6, 0x30, 0x2c, 0xcf, 0x8f, 0xcb, 0x6e, 0xba, 0x3c,
  0x3d, 0x9e, 0x03, 0x81, 0xd9, 0xe0, 0x2f, 0x68, 0xfd, 0x91, 0xec, 0xe5,
  0x31, 0xfd, 0x2d, 0x07, 0x36, 0x49, 0x30, 0x19, 0x10, 0x68, 0x8d, 0x01,
  0x61, 0x30, 0xeb, 0x8f, 0x64, 0x2f, 0x8f, 0xe9, 0x6f, 0x39, 0xb0, 0x49,
  0x82, 0xc5, 0x80, 0x40, 0xa0, 0xd6, 0x46, 0xaa, 0xe1, 0xf2, 0x9d, 0xc7,
  0x9f, 0x88, 0x6b, 0xa2, 0x22, 0xa2, 0x74, 0x80, 0xc1, 0x2f, 0x6e, 0xbb,
  0x2e, 0x64, 0x21, 0xf0, 0x6b, 0xe6, 0x87, 0xec, 0xf7, 0xbc, 0x3c, 0xa7,
  0x23, 0xd3, 0xf4, 0x29, 0x3a, 0x4c, 0x2e, 0xcb, 0x81, 0xc0, 0x6c, 0x10,
  0x5b, 0x65, 0xa6, 0xcf, 0x68, 0x3a, 0x34, 0x9c, 0x67, 0xbf, 0xc3, 0x64,
  0x20, 0xb0, 0x2a, 0xac, 0xa7, 0xd9, 0xf4, 0xa4, 0x9b, 0x2a, 0x4f, 0x87,
  0xdd, 0x67, 0x76, 0x39, 0xe9, 0xa6, 0x97, 0xe5, 0xf3, 0xf2, 0x98, 0x9e,
  0x7e, 0xbb, 0x83, 0x74, 0xba, 0x3c, 0x2d, 0xae, 0xd3, 0xcb, 0x73, 0x20,
  0x10, 0xa8, 0xad, 0x80, 0x39, 0x08, 0xfc, 0xa4, 0x65, 0x37, 0xb9, 0x2c,
  0xa7, 0x86, 0xe5, 0xe7, 0x32, 0x1d, 0x08, 0x9c, 0x59, 0x7f, 0x24, 0xe9,
  0x95, 0x5a, 0xc6, 0xd3, 0xeb, 0xf2, 0xb2, 0x8c, 0x08, 0xb4, 0xfe, 0x48,
  0xf6, 0xf2, 0x98, 0xfe, 0x96, 0x03, 0x9b, 0x24, 0xd8, 0x0c, 0x08, 0x04,
  0x02, 0x83, 0x56, 0xb2, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0xe5, 0x44, 0xcb,
  0xb0, 0x02, 0x58, 0x87, 0x44, 0x84, 0x30, 0x21, 0x4e, 0xe3, 0x17, 0xb7,
  0x5d, 0x00, 0x6d, 0x10, 0xf8, 0x4d, 0xc7, 0x65, 0x77, 0x19, 0x08, 0x9c,
  0x55, 0xa5, 0xe1, 0x3c, 0x5d, 0x1e, 0x1e, 0xa7, 0xdd, 0xe7, 0xe0, 0x78,
  0x5c, 0x66, 0x97, 0xe5, 0x61, 0x7a, 0xfa, 0xed, 0x9e, 0xd2, 0xe5, 0xf5,
  0x31, 0xbd, 0x2e, 0x2f, 0x03, 0x81, 0xc1, 0x9a, 0x29, 0x05, 0x32, 0xde,
  0xf5, 0x86, 0xbb, 0xc6, 0xf2, 0x72, 0x98, 0x5e, 0x46, 0x86, 0xdd, 0x64,
  0x76, 0xd9, 0x28, 0x7f, 0xb7, 0xa5, 0xe5, 0xf9, 0xbb, 0x2e, 0x1f, 0x97,
  0xa7, 0x74, 0x79, 0x7d, 0x4c, 0x37, 0xbe, 0xe5, 0xcc, 0xb4, 0xd8, 0x35,
  0x66, 0x87, 0xe7, 0x73, 0x97, 0xb0, 0x6e, 0x36, 0x97, 0xe5, 0xbc, 0xba,
  0x7b, 0x9e, 0x3e, 0xbb, 0xcb, 0x64, 0x50, 0xda, 0x4d, 0xf7, 0x59, 0x88,
  0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb, 0x65,
  0x90, 0x06, 0x81, 0x5f, 0x90, 0x4e, 0x97, 0xa7, 0xc5, 0x75, 0x7a, 0x59,
  0x58, 0x37, 0x9b, 0xcb, 0x72, 0x20, 0x70, 0x56, 0x15, 0xe6, 0xe9, 0xe5,
  0x20, 0x99, 0x2c, 0x2f, 0xcf, 0xe7, 0xc2, 0xba, 0xd9, 0x5c, 0x96, 0x03,
  0x81, 0x41, 0x53, 0x40, 0x4c, 0x60, 0x22, 0x22, 0x04, 0x58, 0xac, 0x65,
  0x0e, 0x86, 0xcb, 0x77, 0x1e, 0x5f, 0x88, 0x08, 0x60, 0x22, 0x42, 0xa0,
  0x19, 0x16, 0xe2, 0x8b, 0x1c, 0x66, 0x25, 0x24, 0x87, 0x8a, 0x04, 0x82,
  0x9d, 0x22, 0x4a, 0x98, 0x3e, 0x27, 0x2a, 0x91, 0xc0, 0x37, 0x81, 0x89,
  0x88, 0x10, 0x60, 0xb1, 0x0f, 0x68, 0xb8, 0x7c, 0xe7, 0xf1, 0x03, 0xa4,
  0x01, 0x22, 0xcc, 0x2f, 0x6e, 0xdb, 0x44, 0xc4, 0x60, 0xb8, 0x7c, 0xe7,
  0xf1, 0xa7, 0x08, 0x10, 0x88, 0x15, 0xc0, 0x7c, 0x69, 0x8a, 0x28, 0x61,
  0xf2, 0x4b, 0xc4, 0x38, 0xa6, 0x14, 0xc0, 0x16, 0x07, 0x18, 0x2c, 0x21,
  0x31, 0x7e, 0x49, 0x20, 0x1a, 0x82, 0xdb, 0x6a, 0x22, 0x15, 0x02, 0xbf,
  0x63, 0x99, 0x1e, 0xa4, 0xd3, 0xe5, 0x69, 0x71, 0x9d, 0x5e, 0x9e, 0x03,
  0x81, 0xd9, 0xe0, 0x2f, 0x58, 0xb5, 0x96, 0xe5, 0xf4, 0x32, 0x3e, 0x48,
  0xa7, 0xcb, 0xd3, 0xe2, 0x3a, 0xbd, 0x0c, 0x04, 0x5a, 0x7f, 0x24, 0x7b,
  0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x49, 0x12, 0x4c, 0x06, 0x04, 0x5a, 0x7f,
  0x24, 0x7b, 0x79, 0x4c, 0x7f, 0xcb, 0x81, 0x4d, 0x12, 0x2c, 0x06, 0x04,
  0x02, 0xb5, 0x45, 0x10, 0x06, 0x81, 0x1f, 0xf4, 0x9d, 0x76, 0xd3, 0xa7,
  0xe1, 0x36, 0x9c, 0x5d, 0x96, 0x03, 0x81, 0xb3, 0xea, 0x34, 0xdc, 0x86,
  0xb3, 0xcb, 0xf2, 0x29, 0x3d, 0x4c, 0x2f, 0x03, 0x81, 0x41, 0x63, 0xa1,
  0x83, 0xe1, 0xf2, 0x9d, 0xc7, 0x17, 0x22, 0x02, 0x98, 0x88, 0x10, 0x68,
  0x86, 0x85, 0xf8, 0x22, 0x87, 0x59, 0x09, 0xc9, 0xa1, 0x22, 0x81, 0x60,
  0xa7, 0x88, 0x12, 0xa6, 0xcf, 0x89, 0x4a, 0x24, 0xf0, 0x8d, 0x5f, 0x12,
  0x88, 0x86, 0xe0, 0x36, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x04, 0x50, 0xa2, 0x02, 0x05, 0x2c, 0x50, 0xa4,
  0x02, 0x65, 0x57, 0x1a, 0xc5, 0x42, 0x42, 0x25, 0x30, 0x02, 0x40, 0x03,
  0x63, 0x04, 0x2c, 0xbd, 0xd7, 0xf2, 0x18, 0x00, 0xa4, 0x0b, 0x14, 0x63,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xd0, 0x01, 0x0f, 0x92, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0xe1, 0x14, 0x16, 0x62, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x58, 0x01, 0x15, 0x18, 0x63, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x58, 0x41, 0x15, 0x16, 0xa3, 0x02, 0x41, 0x2a, 0x20,
  0x80, 0xc4, 0x01, 0x60, 0x54, 0x60, 0x07, 0x30, 0x6c, 0x40, 0x90, 0x43,
  0x30, 0x00, 0x35, 0x08, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0x30, 0x0b, 0x50, 0x12, 0x07, 0xa3, 0x09, 0x01, 0x50, 0x43, 0x00, 0x17,
  0x0c, 0xd4, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0x2d, 0x4c,
  0x81, 0x05, 0x90, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15,
  0x6e, 0x81, 0x0a, 0x32, 0x08, 0x07, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x56, 0x16, 0x75, 0x88, 0xf4, 0x00, 0x93, 0x70, 0xac, 0x00, 0x26, 0x89,
  0xcd, 0x40, 0x5c, 0x76, 0x66, 0x75, 0x88, 0xf4, 0x00, 0x93, 0x70, 0xac,
  0x00, 0x26, 0x75, 0x08, 0x43, 0x34, 0x12, 0xe2, 0x34, 0x92, 0xc5, 0x0d,
  0x2c, 0xd2, 0xd8, 0xdc, 0xf0, 0x45, 0x82, 0x99, 0x49, 0x1d, 0x22, 0x3d,
  0xc0, 0x24, 0x1c, 0x2b, 0x80, 0x49, 0x62, 0x33, 0x10, 0x17, 0x6e, 0x64,
  0x89, 0xf1, 0x4b, 0x02, 0xd1, 0x10, 0xdc, 0x06, 0x01, 0x31, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x23, 0x08, 0x8d, 0x2d, 0x43, 0x12,
  0x84, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x39, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x04, 0x30, 0x03, 0x50, 0xc0, 0x02, 0x25, 0x52,
  0x1e, 0xc5, 0x47, 0x7b, 0x65, 0x50, 0x04, 0x25, 0x40, 0x03, 0x63, 0x04,
  0x6c, 0x3d, 0x9a, 0xe2, 0x37, 0x46, 0xc0, 0xd6, 0xa3, 0xa9, 0x7e, 0x44,
  0x30, 0x03, 0x40, 0x03, 0x63, 0x04, 0xa3, 0xdb, 0xc7, 0x2c, 0x18, 0xcc,
  0x00, 0x8c, 0x00, 0x00, 0x64, 0x0e, 0x0a, 0x83, 0xd0, 0x01, 0x61, 0x8c,
  0x21, 0x44, 0x77, 0x30, 0x86, 0x20, 0xcd, 0x81, 0x05, 0x02, 0x7d, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15, 0x64, 0x21, 0x0a, 0x86, 0x23,
  0x82, 0x43, 0xf8, 0x4c, 0x50, 0xe0, 0x33, 0xdd, 0x30, 0x04, 0x82, 0x05,
  0x8f, 0x7c, 0xc6, 0x10, 0x32, 0x3f, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x55, 0xc0, 0x05, 0x2b, 0xb0, 0x20, 0x92, 0xcf, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0xb0, 0x03, 0x2a, 0x68, 0xcc, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0xb8, 0x03, 0x2a, 0x6c, 0xce, 0x88, 0xc1, 0x03, 0x80, 0x20,
  0x18, 0xc4, 0x02, 0x2e, 0x64, 0x42, 0x60, 0x0c, 0x51, 0xd4, 0x75, 0x1d,
  0x34, 0x9a, 0x10, 0x00, 0x73, 0x0c, 0x55, 0x10, 0x07, 0xa3, 0x09, 0x43,
  0x30, 0xc7, 0x20, 0x04, 0xda, 0x68, 0x42, 0x21, 0xcc, 0x31, 0x08, 0x41,
  0x37, 0x9a, 0x70, 0x0c, 0x73, 0x0c, 0x42, 0x00, 0x06, 0x19, 0x84, 0x03,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe6, 0x46, 0x68, 0x13,
  0xd0, 0x18, 0x1d, 0xa1, 0x09, 0x8e, 0x64, 0x5a, 0xc3, 0x80, 0x44, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x04, 0x50, 0x1a, 0x25, 0x2a, 0x50, 0x76, 0xc5, 0x52, 0x30, 0x05, 0x2c,
  0x50, 0xa4, 0x02, 0x65, 0x44, 0x7b, 0x45, 0x50, 0x02, 0x24, 0x54, 0x02,
  0x23, 0x00, 0xb4, 0x31, 0x03, 0x40, 0x03, 0x23, 0x00, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xf8, 0x37, 0x46, 0x30, 0xba, 0x7d, 0xcc, 0x82, 0xc1, 0x18,
  0x01, 0x4b, 0xef, 0xb5, 0x3c, 0x06, 0x00, 0x00, 0x24, 0x0e, 0x14, 0x63,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xd0, 0x01, 0x14, 0x9a, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0xe1, 0x15, 0x24, 0x64, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x58, 0x01, 0x16, 0x26, 0x65, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x58, 0x41, 0x16, 0x1e, 0xa5, 0x02, 0x41, 0x2a, 0x20,
  0x80, 0xd4, 0x01, 0x60, 0x54, 0xe0, 0x07, 0x30, 0x6c, 0x40, 0xb0, 0x43,
  0x30, 0x00, 0x35, 0x08, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa5,
  0xb0, 0x0b, 0x59, 0x92, 0x07, 0xa3, 0x09, 0x01, 0x50, 0x43, 0x00, 0x17,
  0x0c, 0xd4, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0x2f, 0x7c,
  0x81, 0x05, 0x90, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15,
  0x7e, 0xc1, 0x0b, 0x4a, 0x19, 0x05, 0x18, 0x36, 0x20, 0xea, 0x21, 0x18,
  0x80, 0x62, 0x14, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x52, 0x20,
  0x07, 0x31, 0x90, 0x44, 0x61, 0x34, 0x21, 0x00, 0x6a, 0x08, 0xe0, 0x82,
  0x81, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x55, 0x30, 0x07, 0x34,
  0x08, 0x2c, 0xc8, 0xe4, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xaa,
  0x80, 0x0e, 0x67, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x2a,
  0xa4, 0xc3, 0x19, 0x28, 0x26, 0x74, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x55, 0x58, 0x87, 0x50, 0x08, 0x2c, 0x18, 0xe4, 0x33, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0xaa, 0xd0, 0x0e, 0x6f, 0x30, 0x58, 0x50,
  0xc8, 0xc7, 0xc6, 0x00, 0x8a, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0xb8, 0x42, 0x3b, 0xac, 0x41, 0x19, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0xa0, 0x0a, 0xf1, 0xf0, 0x06, 0xc1, 0x1c, 0x03, 0x1a, 0x18, 0xa5,
  0x30, 0xc7, 0x10, 0x14, 0x6c, 0x30, 0xc7, 0x10, 0x0c, 0x6e, 0x90, 0x41,
  0x38, 0x10, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xf6, 0x76, 0x75, 0x88,
  0xf4, 0x00, 0x93, 0x70, 0xac, 0x00, 0x26, 0x75, 0x08, 0x43, 0x34, 0x12,
  0xe2, 0x34, 0x52, 0x6f, 0x8d, 0x01, 0x05, 0x0b, 0x45, 0xd3, 0x6d, 0x87,
  0x01, 0x03, 0xe7, 0x48, 0x56, 0x18, 0x40, 0xb0, 0x50, 0x34, 0x99, 0x60,
  0xc0, 0xc0, 0x22, 0x8d, 0xed, 0x11, 0x5f, 0x24, 0xd4, 0xe6, 0x36, 0x75,
  0x88, 0xf4, 0x00, 0x93, 0x70, 0xac, 0x00, 0x26, 0x89, 0xcd, 0x40, 0x5c,
  0xb5, 0x6d, 0x6d, 0x53, 0x87, 0x48, 0x0f, 0x30, 0x09, 0xc7, 0x0a, 0x60,
  0x92, 0xd8, 0x0c, 0xc4, 0x55, 0xdf, 0xc6, 0xb6, 0x18, 0xbf, 0x24, 0x10,
  0x0d, 0xc1, 0x6d, 0x75, 0x6e, 0x8c, 0x01, 0xc4, 0x67, 0x02, 0x97, 0x11,
  0x06, 0x0c, 0x5f, 0x24, 0x58, 0x1e, 0xc1, 0x22, 0x8d, 0x6d, 0x89, 0x01,
  0x04, 0x8b, 0x34, 0x38, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x23, 0x08, 0x8d, 0x2d, 0x43, 0x12,
  0x84, 0xc6, 0x96, 0x61, 0x0a, 0x42, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x50, 0x1a, 0x25,
  0x2a, 0x50, 0x76, 0xc5, 0x52, 0xc0, 0x02, 0x45, 0x2a, 0x50, 0x30, 0xe5,
  0x46, 0x7b, 0x45, 0x50, 0x02, 0x24, 0x54, 0x02, 0x23, 0x00, 0x34, 0x30,
  0x02, 0x40, 0x1b, 0x33, 0x00, 0x34, 0x30, 0x46, 0x30, 0xba, 0x7d, 0xcc,
  0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x8d, 0x11, 0xb0, 0xf4,
  0x5e, 0xcb, 0x63, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00,
  0x44, 0x0e, 0x14, 0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xd0, 0x41,
  0x14, 0x9e, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0x21, 0x16,
  0xa6, 0x64, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0x41, 0x16, 0xa8,
  0x65, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0x81, 0x16, 0xa2, 0xa5,
  0x02, 0x41, 0x2a, 0x20, 0x80, 0xd8, 0x01, 0x60, 0x54, 0x00, 0x0a, 0x30,
  0x6c, 0x40, 0xb8, 0x43, 0x30, 0x00, 0x35, 0x08, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xa5, 0xd0, 0x0b, 0x5a, 0xb2, 0x07, 0xa3, 0x09, 0x01,
  0x50, 0x43, 0x00, 0x17, 0x0c, 0xd4, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0xa8, 0xc2, 0x2f, 0x80, 0x41, 0x60, 0x41, 0x24, 0x9f, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x50, 0x85, 0x70, 0xf8, 0x82, 0x52, 0x4a, 0x01, 0x86,
  0x0d, 0x88, 0x7b, 0x08, 0x06, 0xa0, 0x18, 0x05, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0x14, 0xcc, 0x61, 0x0c, 0x24, 0x52, 0x18, 0x4d, 0x08,
  0x80, 0x1a, 0x02, 0xb8, 0x60, 0xa0, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x40, 0x15, 0xd0, 0x21, 0x0d, 0x02, 0x0b, 0x34, 0xf9, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x81, 0x2a, 0xa8, 0x03, 0x1a, 0x04, 0xa6, 0x28, 0xf2,
  0x31, 0x2f, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42,
  0x3b, 0xa0, 0x41, 0x60, 0x44, 0x18, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x54, 0xe1, 0x1d, 0x4a, 0x21, 0xb0, 0x60, 0x90, 0xcf, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0x3c, 0xc8, 0xc1, 0x60, 0x41,
  0x21, 0x9f, 0x31, 0x84, 0x3a, 0x30, 0x85, 0x31, 0x04, 0x3b, 0x60, 0x83,
  0x31, 0x84, 0x3b, 0x70, 0x83, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x98,
  0x85, 0x78, 0x80, 0x83, 0x41, 0x08, 0x0c, 0xa2, 0x1a, 0x8e, 0x08, 0xd8,
  0x40, 0xf8, 0x0c, 0x0d, 0x90, 0xf8, 0x58, 0x1a, 0x1c, 0xf1, 0x31, 0x35,
  0xc8, 0xe2, 0x33, 0xdd, 0xb0, 0x0c, 0xc4, 0x74, 0x83, 0x32, 0x14, 0xd3,
  0x0d, 0xdc, 0x60, 0xcc, 0x31, 0xc8, 0xc1, 0x60, 0x0e, 0x73, 0x0c, 0xc1,
  0x60, 0x0e, 0x73, 0x0c, 0xc1, 0x30, 0x0e, 0x19, 0x84, 0x03, 0x01, 0x00,
  0x2b, 0x00, 0x00, 0x00, 0xb6, 0x18, 0x30, 0x70, 0x8e, 0x64, 0x97, 0x01,
  0x85, 0x4f, 0xfb, 0x08, 0x6d, 0x70, 0x53, 0x87, 0x48, 0x0f, 0x30, 0x09,
  0xc7, 0x0a, 0x60, 0x92, 0xd8, 0x0c, 0xc4, 0x55, 0xd7, 0x96, 0x18, 0x40,
  0xb0, 0x50, 0x34, 0x19, 0x61, 0xc0, 0xc0, 0x22, 0x8d, 0xbd, 0x4d, 0x1d,
  0x22, 0x3d, 0xc0, 0x24, 0x1c, 0x2b, 0x80, 0x49, 0x62, 0x33, 0x10, 0x57,
  0x6d, 0x1b, 0x66, 0x40, 0xe1, 0xd3, 0x3e, 0x52, 0x5b, 0x66, 0x40, 0xe1,
  0xd3, 0x3e, 0x62, 0x9b, 0x61, 0xc0, 0xf0, 0x45, 0x82, 0x71, 0x06, 0x08,
  0x3e, 0x6d, 0x71, 0x57, 0x87, 0x48, 0x0f, 0x30, 0x09, 0xc7, 0x0a, 0x60,
  0x52, 0x87, 0x30, 0x44, 0x23, 0x21, 0x4e, 0x23, 0xf1, 0xa6, 0x19, 0x80,
  0xf8, 0xb4, 0x4f, 0x3d, 0x93, 0x43, 0xdb, 0x66, 0x00, 0xe2, 0xd3, 0x3e,
  0xf5, 0x4c, 0x4e, 0x6d, 0x94, 0x01, 0x83, 0x8f, 0xd0, 0xa6, 0x65, 0x34,
  0x4e, 0xc4, 0x00, 0x8b, 0x59, 0x06, 0x0c, 0x3e, 0x62, 0x5b, 0x65, 0xc0,
  0xe0, 0x23, 0xb5, 0xf5, 0x11, 0x5f, 0x24, 0xd4, 0xb6, 0x47, 0xb0, 0x48,
  0x63, 0x5b, 0x63, 0x00, 0xc1, 0x22, 0xcd, 0x6d, 0x6e, 0x8b, 0xf1, 0x4b,
  0x02, 0xd1, 0x10, 0xdc, 0x56, 0xe3, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x23, 0x08, 0x8d, 0x2d, 0x43, 0x12,
  0x84, 0xc6, 0x96, 0x61, 0x0a, 0x42, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x04, 0x50, 0x76, 0x33,
  0x00, 0xc5, 0x55, 0xc0, 0x02, 0x25, 0x2a, 0x50, 0xa4, 0x02, 0xa5, 0x51,
  0x2c, 0x05, 0x53, 0xba, 0x02, 0x35, 0x50, 0x84, 0x01, 0x65, 0x18, 0x40,
  0x42, 0xe5, 0x51, 0x02, 0x23, 0x00, 0x34, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x08, 0x7f, 0x63, 0x04, 0x2c, 0xbd, 0xd7, 0xf2, 0x18, 0x8c, 0x11, 0xbc,
  0x33, 0x69, 0xa2, 0xdd, 0x18, 0x01, 0x08, 0xc2, 0x78, 0x38, 0x06, 0x44,
  0x30, 0x02, 0x40, 0x03, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x46,
  0x00, 0x82, 0x20, 0x88, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08,
  0x06, 0x00, 0x00, 0x00, 0x33, 0x11, 0x75, 0x00, 0xd4, 0x01, 0x29, 0xd0,
  0x3c, 0x04, 0x0c, 0x9a, 0x87, 0x82, 0x41, 0xec, 0x40, 0x31, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x00, 0x1d, 0x54, 0x21, 0x0b, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0x80, 0x15, 0x72, 0x21, 0x73, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x80, 0x15, 0x74, 0x41, 0x83, 0x4e, 0x18, 0xa8, 0x13, 0x06,
  0xca, 0x84, 0x08, 0x3e, 0x26, 0x48, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x56, 0x00, 0x07, 0x8f, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x56, 0x08, 0x87, 0xcf, 0x3a, 0x61, 0xa0, 0x4e, 0x18, 0x28, 0x33,
  0x04, 0xfa, 0x98, 0x21, 0xd0, 0xc7, 0x04, 0x49, 0x3e, 0x26, 0x4c, 0xf2,
  0x31, 0xa1, 0x82, 0x8f, 0x5d, 0x07, 0x7d, 0x0c, 0x3b, 0xe8, 0x53, 0x0b,
  0x24, 0x15, 0x48, 0x40, 0x22, 0x01, 0x30, 0x2a, 0xb0, 0x05, 0x18, 0x36,
  0x20, 0x48, 0x22, 0x18, 0x80, 0x1a, 0x04, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x52, 0x98, 0x87, 0x39, 0xb8, 0x62, 0x61, 0x34, 0x21, 0x00,
  0x6a, 0x08, 0xe0, 0x82, 0x81, 0x1a, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0x55, 0xa8, 0x87, 0x38, 0x08, 0x2c, 0x38, 0x03, 0xf9, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x81, 0x2a, 0xdc, 0x83, 0x1c, 0x04, 0xa5, 0xec, 0x02,
  0x0c, 0x1b, 0x10, 0x2d, 0x11, 0x0c, 0x40, 0x31, 0x0a, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x41, 0x29, 0xf0, 0x03, 0x1f, 0x80, 0x81, 0x2e, 0x8c,
  0x26, 0x04, 0x40, 0x0d, 0x01, 0x5c, 0x30, 0x50, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xa0, 0x0a, 0xfe, 0xa0, 0x07, 0x81, 0x05, 0x70, 0x20, 0x9f,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x05, 0x90, 0xd8, 0x83, 0xc0,
  0x14, 0x36, 0x90, 0x8f, 0x09, 0x6d, 0x20, 0x1f, 0x13, 0xde, 0x00, 0x3e,
  0x26, 0xc0, 0x01, 0x7c, 0x4c, 0xd8, 0xe4, 0x63, 0xc2, 0x26, 0x1f, 0xf3,
  0x04, 0xf8, 0x58, 0x1d, 0x80, 0x41, 0x7c, 0x2c, 0x18, 0xe0, 0x33, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0xa8, 0xb0, 0x12, 0xac, 0x00, 0x07, 0xf2,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3,
  0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa8, 0x00, 0x13,
  0xb1, 0x50, 0x07, 0xf6, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0xa8, 0x50, 0x13, 0xb6, 0xa0, 0x07, 0xf3, 0x30, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x8e,
  0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x30, 0x87, 0x95, 0xd0,
  0x85, 0x48, 0x09, 0xcc, 0x08, 0xa0, 0x63, 0x50, 0x25, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0x30, 0x07, 0x97, 0xe8, 0x05, 0x8a, 0x09, 0x2c,
  0x40, 0xa0, 0x63, 0x12, 0x26, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0x30, 0x87, 0x98, 0x00, 0x87, 0xcb, 0x09, 0x2c, 0x50, 0xa0, 0x63, 0xd4,
  0x26, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x30, 0x07, 0x9a, 0x18,
  0x07, 0x0d, 0x0a, 0x2c, 0x60, 0xa0, 0x63, 0x4a, 0x40, 0x1f, 0x43, 0x04,
  0xfa, 0x98, 0x31, 0xd0, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x50,
  0x21, 0x2d, 0xd4, 0xc1, 0x15, 0x58, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x18, 0xe2, 0x63, 0xc7, 0x10, 0x1f,
  0x3b, 0x86, 0xf8, 0xd8, 0x30, 0xc8, 0xc7, 0x86, 0x41, 0x3e, 0x26, 0x04,
  0xf0, 0x31, 0x82, 0x90, 0x8f, 0x09, 0x01, 0x7c, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x40, 0x15, 0xe8, 0xc2, 0x1d, 0x02, 0x4b, 0x02, 0xfa, 0x58,
  0x22, 0xd0, 0xc7, 0x92, 0x81, 0x3e, 0xbb, 0x66, 0x10, 0x07, 0xb0, 0x00,
  0x8b, 0x61, 0x03, 0x22, 0x38, 0x07, 0x02, 0xd8, 0x35, 0xc3, 0x38, 0x84,
  0x05, 0x58, 0x0c, 0x1b, 0x10, 0x41, 0x58, 0x10, 0xc0, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0xc0, 0x83, 0x59, 0xe4, 0xc3, 0x38, 0x8c, 0x18, 0x50,
  0x0c, 0x08, 0x82, 0x41, 0x2d, 0xd4, 0x05, 0x3d, 0x04, 0x63, 0x31, 0x0f,
  0x63, 0x21, 0x16, 0x63, 0x21, 0x45, 0xd0, 0x3a, 0x18, 0x05, 0xa1, 0x0e,
  0xe5, 0x40, 0x03, 0x01, 0x19, 0x43, 0x08, 0xc8, 0x62, 0x0c, 0x41, 0x20,
  0x8b, 0x31, 0x84, 0x21, 0x2c, 0xc6, 0x10, 0x08, 0x9f, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x79, 0x58, 0x8b, 0x7f, 0x40, 0x87, 0x11, 0x83,
  0x06, 0x00, 0x41, 0x30, 0xb8, 0x05, 0xbd, 0xc0, 0x87, 0x40, 0x24, 0xcc,
  0xa1, 0x1c, 0x44, 0x42, 0x24, 0x44, 0x42, 0x24, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x8c, 0x50,
  0xe0, 0x63, 0x84, 0x02, 0x1f, 0x23, 0x14, 0xf8, 0x18, 0xa1, 0xc0, 0x67,
  0xc4, 0xc0, 0x01, 0x40, 0x10, 0x0c, 0x72, 0x41, 0x34, 0x40, 0x42, 0x79,
  0x07, 0x77, 0x58, 0x09, 0x62, 0x10, 0x82, 0x7f, 0xc0, 0x70, 0x20, 0x00,
  0x6a, 0x00, 0x00, 0x00, 0x46, 0x1e, 0x50, 0xf8, 0x88, 0xbd, 0xd3, 0xb6,
  0x1d, 0x30, 0xf8, 0xc8, 0x6d, 0x9a, 0x01, 0x03, 0x8b, 0x34, 0x36, 0x18,
  0x50, 0xf8, 0x08, 0x8d, 0xd3, 0x56, 0x18, 0x50, 0xf8, 0x08, 0x8d, 0xdb,
  0x96, 0x1c, 0x50, 0xf8, 0x48, 0xad, 0xd3, 0x66, 0x18, 0x50, 0xf8, 0x08,
  0x8d, 0xeb, 0x26, 0x1d, 0x50, 0xf8, 0x48, 0xad, 0xdf, 0xd6, 0x19, 0x50,
  0xf8, 0x08, 0x8d, 0xf3, 0x96, 0x1d, 0x50, 0xf8, 0x48, 0xad, 0xef, 0x36,
  0x1e, 0x50, 0xf8, 0x48, 0xad, 0xf3, 0x46, 0x1a, 0x90, 0xf8, 0x48, 0x8d,
  0xdf, 0x7e, 0x43, 0x18, 0xf6, 0x1b, 0x60, 0x7c, 0x26, 0x30, 0xd8, 0xb6,
  0xf1, 0x06, 0x18, 0x9f, 0x09, 0x0c, 0x76, 0x6e, 0xb9, 0x01, 0xc6, 0x67,
  0x02, 0x83, 0xcd, 0xdb, 0x67, 0x40, 0xe1, 0x23, 0x74, 0x4e, 0x5b, 0x68,
  0x40, 0xe1, 0x23, 0x74, 0x6e, 0x1b, 0x5f, 0xe1, 0x23, 0xf5, 0x9d, 0x1b,
  0x60, 0x40, 0xe1, 0x23, 0xf5, 0xbd, 0x5b, 0x70, 0x40, 0xe1, 0x23, 0x74,
  0xbe, 0x9b, 0x60, 0x40, 0xe1, 0x23, 0xf5, 0xdd, 0x1b, 0x72, 0x40, 0xe1,
  0x23, 0x74, 0xde, 0xdb, 0x68, 0x40, 0xe1, 0x23, 0x74, 0x9e, 0x5b, 0x79,
  0x40, 0xe1, 0x23, 0xf7, 0x5e, 0x9b, 0x6d, 0x80, 0xf1, 0x99, 0xc0, 0x70,
  0xd7, 0x06, 0x1d, 0x40, 0xb0, 0x50, 0x34, 0x19, 0x61, 0x40, 0xe1, 0x23,
  0x35, 0x5e, 0xdb, 0xdd, 0xd4, 0x21, 0xd2, 0x03, 0x4c, 0xc2, 0xb1, 0x02,
  0x98, 0x24, 0x36, 0x03, 0x71, 0xd5, 0xbb, 0xe1, 0x4d, 0x1d, 0x22, 0x3d,
  0xc0, 0x24, 0x1c, 0x2b, 0x80, 0x49, 0x62, 0x33, 0x10, 0x57, 0xcd, 0xdb,
  0x61, 0x40, 0xe1, 0x23, 0x35, 0xbe, 0x9b, 0x67, 0x40, 0xe1, 0x23, 0x35,
  0xde, 0x9b, 0x72, 0x40, 0xe1, 0x23, 0xb6, 0x5e, 0x1b, 0x76, 0x40, 0xe1,
  0x23, 0xb4, 0x9e, 0x5b, 0x74, 0x40, 0xe1, 0x23, 0xb4, 0x6e, 0x1b, 0x67,
  0xc0, 0xf0, 0x45, 0x82, 0x4d, 0x07, 0x14, 0x3e, 0x62, 0xeb, 0xb8, 0x69,
  0x07, 0x14, 0x3e, 0x62, 0xeb, 0xbd, 0x89, 0x07, 0x14, 0x3e, 0x42, 0xeb,
  0xba, 0xe5, 0x0d, 0x3e, 0x42, 0xdb, 0x70, 0xc0, 0xe0, 0x23, 0xb6, 0xe9,
  0x0d, 0x3e, 0x52, 0xdb, 0x64, 0x00, 0xf1, 0x45, 0x42, 0x6d, 0xa0, 0x01,
  0x85, 0x8f, 0xd4, 0x79, 0x6d, 0x7e, 0x58, 0x87, 0x48, 0x0f, 0x30, 0x09,
  0xc7, 0x0a, 0x60, 0x52, 0x87, 0x30, 0x44, 0x23, 0x21, 0x4e, 0x23, 0xd5,
  0xba, 0xf5, 0x61, 0x1d, 0x22, 0x3d, 0xc0, 0x24, 0x1c, 0x2b, 0x80, 0x49,
  0x1d, 0xc2, 0x10, 0x8d, 0x84, 0x38, 0x8d, 0x54, 0xe7, 0x16, 0x18, 0x50,
  0xf8, 0x08, 0x7d, 0xf3, 0xf6, 0x57, 0xf8, 0x08, 0x7d, 0xeb, 0xd6, 0x1d,
  0xb0, 0xb4, 0xc4, 0x35, 0x51, 0x11, 0x51, 0x3a, 0xc0, 0x60, 0xc2, 0x01,
  0x85, 0x8f, 0xd4, 0x39, 0x6f, 0x7b, 0x85, 0x8f, 0xd0, 0x37, 0x6e, 0xa2,
  0x01, 0x85, 0x8f, 0xd4, 0xf9, 0x6d, 0x91, 0x01, 0x04, 0x8b, 0x34, 0xb6,
  0x95, 0x06, 0x14, 0x3e, 0x52, 0xe7, 0xba, 0xd9, 0x2d, 0xc6, 0x2f, 0x09,
  0x44, 0x43, 0x70, 0xdb, 0x7d, 0x03, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x5b, 0x0a, 0x2c, 0x08, 0x0d, 0x04, 0x35, 0xb6,
  0x14, 0x5a, 0x10, 0x1a, 0x08, 0x6a, 0x6c, 0x29, 0xc8, 0x20, 0x08, 0x0d,
  0x04, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x59, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x04, 0x50, 0x88, 0x01, 0x33, 0x00, 0x05, 0x2c,
  0x50, 0x30, 0xb4, 0x31, 0x03, 0x40, 0x25, 0x33, 0x00, 0x00, 0x00, 0x00,
  0xc4, 0x0b, 0x0e, 0xa3, 0x90, 0x33, 0xb8, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0xa0, 0x07, 0x39, 0x30, 0x84, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0x00, 0x87, 0x3e, 0x48, 0x02, 0x01, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x1b, 0x06, 0xf6, 0x86, 0x81, 0xbd, 0x61,
  0x60, 0xe7, 0x18, 0x98, 0x01, 0x0f, 0xe6, 0x18, 0x82, 0x01, 0x0f, 0xe6,
  0x18, 0x82, 0xa1, 0x0e, 0xb6, 0xc9, 0x50, 0xed, 0xc1, 0x1e, 0x0c, 0x1b,
  0x10, 0x81, 0x30, 0x00, 0xd5, 0xa8, 0xc1, 0x8e, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x01, 0x38, 0xa4, 0x42, 0xd5, 0x04, 0xd4, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xdc, 0x30, 0xb0, 0x37, 0x0c, 0xec,
  0x0d, 0x03, 0x3b, 0xc7, 0x80, 0x0d, 0xa4, 0x30, 0xc7, 0x10, 0x0c, 0xa4,
  0x30, 0xc7, 0x10, 0x0c, 0xa1, 0xb0, 0x4d, 0x86, 0x30, 0x38, 0x05, 0x53,
  0x18, 0x36, 0x20, 0x02, 0x61, 0x00, 0x2a, 0xeb, 0x76, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xc0, 0xa1, 0x16, 0xc2, 0x20, 0x0b, 0xc0, 0x60, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0xe0, 0x84, 0x81, 0x3d, 0x61, 0x60, 0xe7,
  0x18, 0xc2, 0x40, 0x70, 0x85, 0x39, 0x86, 0x40, 0x70, 0x85, 0x6d, 0x32,
  0xa8, 0x01, 0x2c, 0xac, 0xc2, 0xb0, 0x01, 0x11, 0x08, 0x03, 0x80, 0xe1,
  0x40, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x16, 0x18, 0x40, 0xf8,
  0x48, 0xbd, 0x1b, 0xde, 0xe1, 0x53, 0xcf, 0xe4, 0xd0, 0xbc, 0xe5, 0x1d,
  0x3e, 0xf5, 0x4c, 0x4e, 0xdd, 0x1b, 0x9b, 0xe1, 0x53, 0xcf, 0xe4, 0xd0,
  0x96, 0x36, 0xf8, 0x08, 0x6d, 0x6a, 0x83, 0x8f, 0xd4, 0xb6, 0x36, 0xf8,
  0x88, 0x6d, 0x6d, 0x86, 0x4f, 0x3d, 0x93, 0x53, 0x9b, 0x60, 0x00, 0xe2,
  0x53, 0xcf, 0xe4, 0xd0, 0x35, 0x6d, 0x5b, 0x05, 0xd2, 0x0c, 0xc4, 0x65,
  0x75, 0x84, 0x8f, 0xd0, 0xb7, 0x69, 0x29, 0x80, 0x61, 0xf8, 0x11, 0x21,
  0x51, 0xcb, 0x64, 0x80, 0x01, 0x84, 0x8f, 0xd0, 0xba, 0xdd, 0x11, 0x3e,
  0x62, 0xe7, 0x66, 0x47, 0xf8, 0x48, 0x8d, 0x03, 0x01, 0x31, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x27, 0x48, 0x8d, 0x2d, 0xc3, 0x16,
  0xa4, 0xc6, 0x96, 0xa1, 0x0c, 0x82, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb4, 0x31, 0x03, 0x00,
  0x63, 0x08, 0xc3, 0x1a, 0x8c, 0x21, 0x10, 0x6b, 0x30, 0x86, 0x50, 0xa0,
  0xc1, 0x18, 0x02, 0xe2, 0x06, 0x63, 0x08, 0xc8, 0x1b, 0x8c, 0x21, 0x28,
  0x6f, 0x30, 0x86, 0xa0, 0xc0, 0xc1, 0x18, 0x02, 0xd3, 0x06, 0x63, 0x08,
  0x8c, 0x1b, 0x8c, 0x21, 0x2c, 0x74, 0x60, 0xc6, 0x11, 0x1f, 0x2b, 0x8c,
  0xf8, 0x18, 0x51, 0xc4, 0xc7, 0x88, 0x41, 0x3e, 0x56, 0x0c, 0xf2, 0x31,
  0x63, 0x90, 0x8f, 0x0d, 0x0d, 0x7c, 0x6c, 0x60, 0xe0, 0x63, 0xc3, 0x02,
  0x9f, 0x31, 0x84, 0xaa, 0x0f, 0x8c, 0x8a, 0xe2, 0x63, 0x14, 0x14, 0x1f,
  0xa3, 0x9e, 0xf8, 0x18, 0x31, 0xc8, 0xc7, 0x8a, 0x41, 0x3e, 0x66, 0x0c,
  0xf2, 0x31, 0x65, 0x80, 0x8f, 0x29, 0x03, 0x7c, 0x4c, 0x19, 0xe0, 0x33,
  0xc7, 0xe0, 0x0d, 0xa8, 0x30, 0xc7, 0x10, 0x0c, 0xa8, 0x30, 0xc7, 0x10,
  0x0c, 0xa5, 0x90, 0x41, 0x38, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
  0x56, 0x47, 0xf8, 0x88, 0xdd, 0x1b, 0x9f, 0xe1, 0x53, 0xcf, 0xe4, 0xd0,
  0xd6, 0x67, 0xf8, 0xd4, 0x33, 0x39, 0xb5, 0x75, 0x31, 0x01, 0x10, 0x61,
  0x02, 0xd1, 0x4c, 0x11, 0x22, 0x48, 0x26, 0x56, 0x54, 0xb4, 0x8f, 0xd0,
  0x46, 0x56, 0x54, 0xb4, 0x8f, 0xd4, 0x66, 0x56, 0x54, 0xb4, 0x8f, 0xd8,
  0x06, 0x56, 0x54, 0xb6, 0x8f, 0xd4, 0x16, 0x56, 0x54, 0xb6, 0x8f, 0xd8,
  0xf6, 0x55, 0x54, 0xb6, 0x8f, 0xd0, 0xd6, 0x46, 0xf8, 0x48, 0x6d, 0x1b,
  0x1c, 0xe1, 0x23, 0x75, 0x6e, 0x74, 0x84, 0x8f, 0xd4, 0xbc, 0x69, 0x09,
  0x15, 0x6d, 0x5b, 0x42, 0x55, 0x1b, 0x97, 0x50, 0xd9, 0xa6, 0x36, 0xf8,
  0x48, 0x6d, 0x69, 0x83, 0x8f, 0xd0, 0x66, 0x57, 0xf8, 0x08, 0x5d, 0xd3,
  0xb6, 0x36, 0xf8, 0x88, 0x6d, 0x77, 0x85, 0x8f, 0xd4, 0x75, 0x6d, 0x63,
  0x45, 0x55, 0xfb, 0x08, 0x6d, 0x65, 0x45, 0x55, 0xfb, 0x48, 0x6d, 0x67,
  0x45, 0x55, 0xfb, 0x88, 0x6d, 0x79, 0x85, 0x8f, 0xd0, 0xf5, 0x6d, 0x78,
  0x85, 0x8f, 0xd8, 0xb5, 0x6d, 0x7a, 0x85, 0x8f, 0xd4, 0x35, 0x6e, 0x7b,
  0x85, 0x8f, 0xd8, 0x75, 0x6e, 0x6c, 0x84, 0x8f, 0xd0, 0xb5, 0xbd, 0x11,
  0x3e, 0x42, 0xe3, 0xe6, 0x46, 0xf8, 0x88, 0x7d, 0xdb, 0x1c, 0xe1, 0x23,
  0xf4, 0x6e, 0x71, 0x84, 0x8f, 0xd8, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x54, 0x32, 0x03, 0x00,
  0x63, 0x08, 0xc3, 0x1a, 0x8c, 0x21, 0x10, 0x6b, 0x30, 0x86, 0x70, 0xb4,
  0xc1, 0x18, 0xc2, 0xe1, 0x06, 0x63, 0x08, 0x89, 0x1b, 0x8c, 0x21, 0x24,
  0x6f, 0x30, 0x86, 0x80, 0xc4, 0x81, 0x11, 0x45, 0x7c, 0x6c, 0x20, 0xe2,
  0x63, 0x83, 0x20, 0x1f, 0x23, 0x04, 0xf9, 0x98, 0x90, 0xc0, 0xc7, 0x04,
  0x04, 0x3e, 0x63, 0x08, 0xcf, 0x1d, 0x98, 0xc3, 0xc4, 0xc7, 0x9c, 0x25,
  0x3e, 0x36, 0x08, 0xf2, 0x31, 0x42, 0x90, 0x8f, 0x1d, 0x02, 0x7c, 0xec,
  0x10, 0xe0, 0x33, 0xc7, 0x50, 0x09, 0x7f, 0x30, 0xc7, 0x10, 0x08, 0x7f,
  0x90, 0x41, 0x38, 0x10, 0x20, 0x00, 0x00, 0x00, 0x06, 0x47, 0xf8, 0x48,
  0xcd, 0x5b, 0x1c, 0xe1, 0x23, 0x74, 0x6f, 0x5a, 0x42, 0x45, 0xdb, 0x96,
  0x50, 0xd5, 0xc6, 0x25, 0x54, 0xb6, 0x75, 0x31, 0x01, 0x10, 0x61, 0x02,
  0xd1, 0x4c, 0x11, 0x22, 0x48, 0x66, 0x36, 0xf8, 0x08, 0x6d, 0x67, 0x83,
  0x8f, 0xd4, 0x26, 0x57, 0xf8, 0x48, 0x5d, 0xd3, 0x16, 0x56, 0x54, 0xb4,
  0x8f, 0xd0, 0x26, 0x56, 0x54, 0xb5, 0x8f, 0xd0, 0x46, 0x56, 0x54, 0xb5,
  0x8f, 0xd4, 0xf6, 0x55, 0x54, 0xb6, 0x8f, 0xd0, 0x36, 0x56, 0x54, 0xb4,
  0x8f, 0xd4, 0x06, 0x56, 0x54, 0xb6, 0x8f, 0xd4, 0x36, 0x67, 0xf8, 0xd4,
  0x33, 0x39, 0xb4, 0xa1, 0x11, 0x3e, 0x42, 0xd7, 0xa6, 0x46, 0xf8, 0x08,
  0x7d, 0x5b, 0x1a, 0xe1, 0x23, 0xb5, 0x6d, 0x6b, 0x84, 0x8f, 0xd4, 0xb8,
  0xb5, 0x11, 0x3e, 0x42, 0xe7, 0xe6, 0x46, 0xf8, 0x48, 0xad, 0xdb, 0x1b,
  0xe1, 0x23, 0xf4, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x5c, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x04, 0x50, 0x88, 0x01, 0x33, 0x00, 0x05, 0x53,
  0xc0, 0x02, 0xb4, 0x31, 0x03, 0x40, 0x25, 0x33, 0x00, 0x00, 0x00, 0x00,
  0xd4, 0x0b, 0x0e, 0x63, 0x0c, 0x21, 0x81, 0x83, 0x0a, 0xd2, 0xe0, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x1e, 0xe8, 0xc0, 0x18, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x00, 0x1c, 0xfe, 0x40, 0x09, 0x84, 0x64, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6e, 0x18, 0xd8,
  0x1b, 0x06, 0xf6, 0x86, 0x81, 0xad, 0x04, 0x0d, 0x76, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xc0, 0xe1, 0x14, 0xa4, 0x24, 0x88, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xe1, 0x86, 0x81, 0xbd, 0x61,
  0x60, 0x6f, 0x18, 0xd8, 0x8a, 0xae, 0x1d, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0x70, 0x78, 0x05, 0x2d, 0x0a, 0xb2, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0x13, 0x06, 0xf6, 0x84, 0x81, 0x1d, 0x43, 0x08, 0x83, 0x53,
  0xa8, 0x20, 0x14, 0x6e, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xc0, 0xc1,
  0x16, 0xc2, 0x00, 0x0b, 0xc0, 0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x6e, 0x18, 0xd8, 0x1b, 0x06, 0xf6, 0x86, 0x81,
  0x2d, 0xe4, 0x0f, 0x76, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xc0, 0xc1,
  0x17, 0xd2, 0x00, 0x0c, 0x02, 0x34, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x1b, 0x06, 0xf6, 0x86, 0x81, 0xbd, 0x61,
  0x60, 0x0b, 0x72, 0x83, 0x1d, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x70,
  0x30, 0x87, 0x38, 0x40, 0x83, 0x00, 0x0e, 0x46, 0x13, 0x02, 0x60, 0x34,
  0x41, 0x08, 0x4e, 0x18, 0xd8, 0x13, 0x06, 0x76, 0x0c, 0x01, 0x0f, 0x74,
  0xa1, 0x02, 0x5c, 0xb8, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x87,
  0x76, 0xc0, 0x83, 0x37, 0x08, 0xee, 0x60, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x6e, 0x18, 0xd8, 0x1b, 0x06, 0xf6, 0x86,
  0x81, 0x2d, 0xc4, 0x16, 0x76, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xc0,
  0xa1, 0x1e, 0x40, 0xe1, 0x0e, 0x82, 0x3f, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x1b, 0x06, 0xf6, 0x86, 0x81, 0xbd,
  0x61, 0x60, 0x0b, 0x2a, 0x85, 0x1d, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0x70, 0xe8, 0x07, 0x54, 0xf8, 0x83, 0xe0, 0x14, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x4e, 0x18, 0xd8, 0x13, 0x06, 0x76, 0x0c, 0xc1, 0x15,
  0xec, 0xc1, 0xd2, 0x00, 0x14, 0xe2, 0x63, 0x69, 0x00, 0x0a, 0xf1, 0xb1,
  0x34, 0x00, 0x85, 0xf8, 0xd8, 0x40, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x36,
  0x18, 0xf2, 0xb1, 0xc1, 0x14, 0xe0, 0x63, 0x83, 0x29, 0xc0, 0xc7, 0x06,
  0x53, 0x80, 0xcf, 0x18, 0x02, 0x2e, 0xfc, 0x83, 0x71, 0xaa, 0x10, 0x1f,
  0xe3, 0x54, 0x21, 0x3e, 0xc6, 0xa9, 0x42, 0x7c, 0x6c, 0x20, 0xe4, 0x63,
  0x43, 0x21, 0x1f, 0x1b, 0x0c, 0xf9, 0x98, 0x32, 0xc0, 0xc7, 0x94, 0x01,
  0x3e, 0xa6, 0x0c, 0xf0, 0xb1, 0x61, 0x90, 0x8f, 0x0d, 0x83, 0x7c, 0x4c,
  0x08, 0xe0, 0x63, 0x04, 0x21, 0x1f, 0x13, 0x02, 0xf8, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x81, 0x2a, 0x9c, 0x05, 0x39, 0x04, 0x96, 0x04, 0xf4,
  0xb1, 0x44, 0xa0, 0x8f, 0x25, 0x03, 0x7d, 0xe6, 0x18, 0xcc, 0x61, 0x98,
  0x89, 0x39, 0x86, 0x60, 0x98, 0x89, 0x39, 0x86, 0x60, 0x80, 0x89, 0x6d,
  0x32, 0xc0, 0x83, 0x4d, 0xd8, 0xc4, 0xb0, 0x01, 0x11, 0x08, 0x03, 0x60,
  0xa1, 0x80, 0x0b, 0xf1, 0xb1, 0x50, 0xc0, 0x85, 0xf8, 0x58, 0x28, 0xe0,
  0x42, 0x7c, 0x6c, 0x20, 0x03, 0xf9, 0xd8, 0x50, 0x06, 0xf2, 0xb1, 0xc1,
  0x0c, 0xe4, 0x63, 0x83, 0x2f, 0xc0, 0xc7, 0x06, 0x5f, 0x80, 0x8f, 0x0d,
  0xbe, 0x00, 0x1f, 0x9b, 0x83, 0x70, 0x88, 0x8f, 0xcd, 0x41, 0x38, 0xc4,
  0xc7, 0xe6, 0x20, 0x1c, 0xe2, 0x63, 0xc3, 0x18, 0xc8, 0xc7, 0x06, 0x32,
  0x90, 0x8f, 0x0d, 0x65, 0x20, 0x1f, 0x4b, 0x06, 0xf8, 0x58, 0x32, 0xc0,
  0xc7, 0x92, 0x01, 0x3e, 0x36, 0x0c, 0xf2, 0xb1, 0x61, 0x90, 0x8f, 0x09,
  0x01, 0x7c, 0x8c, 0x20, 0xe4, 0x63, 0x42, 0x00, 0x9f, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x50, 0x05, 0xd3, 0x18, 0x89, 0xc0, 0x92, 0x80, 0x3e,
  0x96, 0x08, 0xf4, 0xb1, 0x64, 0xa0, 0xcf, 0x1c, 0x43, 0x49, 0x0c, 0x72,
  0x31, 0xc7, 0x10, 0x0c, 0x72, 0x31, 0xc7, 0x10, 0x0c, 0x6f, 0xb1, 0x4d,
  0x86, 0x97, 0xa8, 0x0b, 0xba, 0x18, 0x36, 0x20, 0x02, 0x61, 0x00, 0x2c,
  0x17, 0xe0, 0x21, 0x3e, 0x96, 0x0b, 0xf0, 0x10, 0x1f, 0x13, 0x44, 0x41,
  0x3e, 0x26, 0x8c, 0x82, 0x7c, 0x4c, 0xa0, 0x07, 0xf8, 0x98, 0x40, 0x0f,
  0xf0, 0x31, 0x54, 0xb0, 0x87, 0xf8, 0x18, 0x2a, 0xd8, 0x43, 0x7c, 0x4c,
  0xf0, 0x03, 0xf9, 0x98, 0xf0, 0x07, 0xf2, 0x31, 0x43, 0x80, 0x8f, 0x19,
  0x02, 0x7c, 0xe6, 0x18, 0x68, 0x42, 0x10, 0x8d, 0x39, 0x86, 0x40, 0x10,
  0x8d, 0x6d, 0x32, 0xf8, 0x04, 0x69, 0xfc, 0xc5, 0xb0, 0x01, 0x11, 0x08,
  0x03, 0x80, 0xe1, 0x40, 0x9c, 0x00, 0x00, 0x00, 0x56, 0x1b, 0x50, 0xf8,
  0x08, 0x8d, 0xd3, 0x26, 0x19, 0x50, 0xf8, 0x48, 0x6d, 0xdb, 0xa6, 0x19,
  0x50, 0xf8, 0x48, 0x6d, 0xe3, 0x86, 0x1b, 0x50, 0xf8, 0x08, 0x8d, 0xdf,
  0x26, 0x1a, 0x50, 0xf8, 0x48, 0x6d, 0xef, 0xb6, 0x1b, 0x50, 0xf8, 0x08,
  0x8d, 0xeb, 0x46, 0x1c, 0x50, 0xf8, 0x08, 0x8d, 0xf7, 0x96, 0x1a, 0x50,
  0xf8, 0x48, 0x7d, 0xd3, 0x56, 0x57, 0xf8, 0x88, 0x5d, 0xdb, 0xc6, 0x1a,
  0x50, 0xf8, 0x48, 0x7d, 0xdb, 0xb6, 0x1c, 0x50, 0xf8, 0x08, 0x9d, 0xdb,
  0xf6, 0x1a, 0x50, 0xf8, 0x48, 0x7d, 0xe7, 0x46, 0x18, 0x50, 0xf8, 0x88,
  0x5d, 0xef, 0xe6, 0x1c, 0x50, 0xf8, 0x08, 0x9d, 0xe7, 0x26, 0x1b, 0x50,
  0xf8, 0x48, 0x7d, 0xf3, 0x16, 0x1d, 0x50, 0xf8, 0x08, 0x9d, 0xf3, 0x76,
  0x1c, 0x80, 0xf8, 0xd4, 0x33, 0x39, 0x34, 0x9f, 0x9b, 0x79, 0x00, 0xe2,
  0x53, 0xcf, 0xe4, 0xd0, 0x7c, 0x6f, 0xc3, 0x01, 0x04, 0x0b, 0x45, 0x93,
  0x31, 0x06, 0x14, 0x3e, 0x62, 0xdb, 0xb4, 0xd9, 0x06, 0x14, 0x3e, 0x52,
  0xe3, 0xb5, 0x51, 0x07, 0x14, 0x3e, 0x42, 0xeb, 0xb5, 0x6d, 0x06, 0x14,
  0x3e, 0x62, 0xdb, 0xb9, 0xe5, 0x06, 0x14, 0x3e, 0x52, 0xe3, 0xb8, 0x5d,
  0x07, 0x14, 0x3e, 0x42, 0xeb, 0xb8, 0x8d, 0x06, 0x14, 0x3e, 0x62, 0xdb,
  0xbc, 0xf1, 0x06, 0x14, 0x3e, 0x52, 0xe3, 0xbb, 0x69, 0x29, 0x80, 0x61,
  0xf8, 0x11, 0x21, 0x51, 0xcb, 0x64, 0xda, 0x01, 0x85, 0x8f, 0xd0, 0xfa,
  0x6e, 0xf6, 0x01, 0x88, 0x4f, 0x3d, 0x93, 0x43, 0xf7, 0xb5, 0xad, 0x0d,
  0x3e, 0x42, 0x1b, 0xdb, 0xe0, 0x23, 0xb5, 0xb5, 0x0d, 0x3e, 0x62, 0x5b,
  0x71, 0x40, 0xe1, 0x23, 0x75, 0x4e, 0xdb, 0x78, 0x40, 0xe1, 0x23, 0xf4,
  0x4e, 0x5b, 0x6b, 0x40, 0xe1, 0x23, 0xf6, 0x7d, 0x1b, 0x73, 0x40, 0xe1,
  0x23, 0x75, 0x7e, 0x9b, 0x7a, 0x40, 0xe1, 0x23, 0xf4, 0x7e, 0x1b, 0x6c,
  0x40, 0xe1, 0x23, 0xf6, 0xad, 0x1b, 0x7b, 0x40, 0xe1, 0x23, 0xf4, 0x9e,
  0xdb, 0x73, 0x40, 0xe1, 0x23, 0x75, 0xae, 0x1b, 0x72, 0x00, 0xe2, 0x53,
  0xcf, 0xe4, 0xd4, 0xbc, 0x6e, 0xb3, 0x01, 0x85, 0x8f, 0xd8, 0x77, 0x6f,
  0xd2, 0x01, 0x85, 0x8f, 0xd4, 0x79, 0x6f, 0xf0, 0x01, 0x85, 0x8f, 0xd0,
  0x7b, 0x6f, 0xee, 0x01, 0x85, 0x8f, 0xd0, 0xfb, 0x6e, 0xb7, 0x01, 0x85,
  0x8f, 0xd8, 0xb8, 0x6d, 0xd5, 0x01, 0x85, 0x8f, 0xd4, 0xba, 0x6d, 0xf2,
  0x01, 0x85, 0x8f, 0xd0, 0x7c, 0x6d, 0xba, 0x01, 0x85, 0x8f, 0xd8, 0x78,
  0x6e, 0xd8, 0x01, 0x85, 0x8f, 0xd4, 0x7a, 0x6e, 0xbd, 0x01, 0x85, 0x8f,
  0xd8, 0x38, 0x6f, 0xdb, 0x01, 0x85, 0x8f, 0xd4, 0x3a, 0x6f, 0xf4, 0x01,
  0x85, 0x8f, 0xd0, 0xfc, 0x6d, 0xe7, 0x01, 0x88, 0x4f, 0x3d, 0x93, 0x53,
  0xf7, 0xb4, 0x6d, 0x21, 0x48, 0x33, 0x20, 0x02, 0x42, 0x48, 0x36, 0x57,
  0xf8, 0x08, 0x5d, 0xd3, 0xa6, 0x57, 0xf8, 0x08, 0x5d, 0xdf, 0x26, 0x18,
  0x50, 0xf8, 0x08, 0x5d, 0xe7, 0x66, 0x1c, 0x50, 0xf8, 0x88, 0x9d, 0xd7,
  0xa6, 0x18, 0x50, 0xf8, 0x08, 0x5d, 0xf3, 0x46, 0x1e, 0x50, 0xf8, 0x48,
  0xbd, 0xd7, 0xd6, 0x1c, 0x50, 0xf8, 0x88, 0x9d, 0xe3, 0xb6, 0x1e, 0x50,
  0xf8, 0x48, 0xbd, 0xe3, 0x06, 0x1d, 0x50, 0xf8, 0x88, 0x9d, 0xef, 0xd6,
  0x1e, 0x50, 0xf8, 0x48, 0xbd, 0xeb, 0xf6, 0x1e, 0x50, 0xf8, 0x48, 0xbd,
  0xf3, 0x26, 0x1e, 0x50, 0xb0, 0x50, 0x34, 0xf5, 0xc6, 0xc5, 0x04, 0x40,
  0x84, 0x09, 0x44, 0x33, 0x45, 0x88, 0x20, 0x59, 0x64, 0x40, 0xe1, 0x23,
  0xb4, 0x5d, 0x5b, 0x66, 0x40, 0xe1, 0x23, 0xb4, 0x7d, 0x5b, 0x68, 0x40,
  0xe1, 0x23, 0xb4, 0xad, 0xdb, 0x74, 0x40, 0xe1, 0x23, 0xb6, 0x4e, 0x5b,
  0x7c, 0x40, 0xe1, 0x23, 0x35, 0x4f, 0xdb, 0x7c, 0x40, 0xe1, 0x23, 0x35,
  0x6f, 0x1b, 0x6a, 0x40, 0xe1, 0x23, 0xb4, 0xdd, 0x5b, 0x7d, 0x40, 0xe1,
  0x23, 0x35, 0x8f, 0x5b, 0x76, 0x40, 0xe1, 0x23, 0xb6, 0xae, 0x9b, 0x75,
  0x40, 0xe1, 0x23, 0xb6, 0x7e, 0x1b, 0x77, 0x40, 0xe1, 0x23, 0xb6, 0xde,
  0x1b, 0x5d, 0xe1, 0x23, 0x75, 0x5d, 0xdb, 0x6a, 0x40, 0xe1, 0x23, 0xf4,
  0x5d, 0xdb, 0x5e, 0xe1, 0x23, 0x75, 0x8d, 0x9b, 0x6b, 0x40, 0xe1, 0x23,
  0xf4, 0x8d, 0xdb, 0x60, 0x40, 0xe1, 0x23, 0x75, 0xad, 0x5b, 0x6c, 0x40,
  0xe1, 0x23, 0xf4, 0xbd, 0xdb, 0x62, 0x40, 0xe1, 0x23, 0x75, 0xdd, 0x5b,
  0x79, 0x40, 0xe1, 0x23, 0xf6, 0x6e, 0x03, 0x00, 0x01, 0x31, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x74, 0x08, 0x52, 0x63, 0xcb, 0x80,
  0x12, 0x41, 0x6a, 0x6c, 0x19, 0x70, 0x22, 0x48, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x44, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x04, 0x50, 0xc0, 0x02, 0x33, 0x00, 0x65, 0x57, 0x7c, 0xb4, 0x57, 0x02,
  0x34, 0x30, 0x02, 0x40, 0x04, 0x33, 0x00, 0x34, 0x30, 0x03, 0x00, 0x00,
  0x94, 0x0b, 0x17, 0x63, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xd4, 0xe1,
  0x0e, 0x92, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x4a, 0x61, 0x15,
  0x90, 0x20, 0x0e, 0x46, 0x13, 0x82, 0x61, 0xb8, 0x21, 0x98, 0x03, 0x30,
  0x98, 0x65, 0x10, 0x82, 0x80, 0xc2, 0x01, 0x61, 0x50, 0x39, 0x28, 0x8c,
  0x6d, 0x32, 0x40, 0x76, 0x10, 0x07, 0x14, 0x94, 0x8c, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x60, 0x07, 0x3f, 0x88, 0x88, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x70, 0x07, 0x3f, 0x90, 0x88, 0x31, 0x84, 0xa1, 0x0c, 0xc6,
  0x10, 0x08, 0x68, 0xc4, 0xe0, 0x01, 0x40, 0x10, 0x0c, 0x62, 0x01, 0x16,
  0x24, 0x62, 0x10, 0x02, 0xc7, 0xa1, 0x28, 0x0a, 0x1a, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x98, 0x25,
  0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x15, 0x74, 0x01, 0x8b,
  0x40, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x46, 0x13, 0x88, 0x61, 0x96, 0x60, 0x18, 0xa8, 0x18, 0xa4, 0x00, 0x11,
  0x06, 0x2a, 0x06, 0x29, 0x40, 0x84, 0x81, 0x8a, 0x41, 0x0a, 0x10, 0x61,
  0xa0, 0x62, 0x90, 0x02, 0x44, 0x98, 0x63, 0xe8, 0x08, 0x55, 0x98, 0x63,
  0x08, 0x08, 0x55, 0x98, 0x63, 0x08, 0x88, 0x53, 0x98, 0x63, 0x08, 0x08,
  0x52, 0xc8, 0x20, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xe6, 0x87, 0xf8, 0xb4, 0x4f, 0x3d, 0x93, 0x43, 0x9b, 0x5e, 0xe1, 0xd3,
  0x3e, 0x42, 0xdb, 0x5e, 0xe1, 0xd3, 0x3e, 0x52, 0x9b, 0x96, 0x02, 0x4c,
  0x53, 0x84, 0x04, 0xd4, 0x44, 0x48, 0xc6, 0x57, 0xf8, 0xb4, 0x8f, 0xd8,
  0xd6, 0x57, 0xf8, 0xb4, 0x8f, 0xdc, 0xf6, 0x87, 0xf8, 0xb4, 0x4f, 0x3d,
  0x93, 0x53, 0x1b, 0x60, 0x00, 0xe2, 0xd3, 0x3e, 0xf5, 0x4c, 0x8e, 0x6d,
  0x81, 0x01, 0x82, 0x4f, 0x1b, 0x19, 0x62, 0x02, 0x13, 0x11, 0x21, 0xc0,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0x24, 0x48, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x50, 0xa6, 0x02,
  0x85, 0x2a, 0x50, 0xb4, 0x02, 0x24, 0x54, 0x04, 0x23, 0x00, 0x25, 0x40,
  0x1b, 0x33, 0x00, 0x00, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xb0, 0x0b,
  0x7b, 0x70, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xb0, 0x0b, 0x7c,
  0x80, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xb0, 0x0b, 0x7d, 0x90,
  0x18, 0x23, 0x06, 0x05, 0x00, 0x82, 0x60, 0xd0, 0x0b, 0x7d, 0x80, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x2e, 0x80, 0x82, 0x72, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0xc1, 0x2e, 0x84, 0xc2, 0x72, 0x8c, 0x18, 0x18,
  0x00, 0x08, 0x82, 0xc1, 0x2e, 0x88, 0x02, 0xa3, 0xd8, 0x40, 0xc8, 0xc7,
  0x86, 0x42, 0x3e, 0x36, 0x18, 0xf2, 0xb1, 0x41, 0x81, 0x8f, 0x0d, 0x0a,
  0x7c, 0x6c, 0x50, 0xe0, 0x33, 0xc7, 0xe0, 0x0c, 0x7a, 0x30, 0xc7, 0x10,
  0x0c, 0x7a, 0x30, 0xc7, 0x10, 0x0c, 0x77, 0x90, 0x41, 0x38, 0x10, 0x00,
  0x23, 0x00, 0x00, 0x00, 0xd6, 0x46, 0xf8, 0x88, 0xbd, 0x1b, 0xd9, 0xb2,
  0x02, 0x58, 0xcb, 0x51, 0x51, 0x44, 0x34, 0x93, 0x99, 0x49, 0xb0, 0x13,
  0x2d, 0xc3, 0x0a, 0x60, 0x1d, 0x12, 0x11, 0xc2, 0x84, 0x38, 0x4d, 0x6d,
  0x67, 0x12, 0xec, 0x44, 0xcb, 0xb0, 0x02, 0x58, 0x87, 0x44, 0x84, 0x30,
  0x21, 0x4e, 0x63, 0x1b, 0xda, 0xe0, 0x23, 0xb4, 0xa5, 0x0d, 0x3e, 0x52,
  0x9b, 0xda, 0xe0, 0x23, 0xb6, 0xb9, 0x19, 0x3e, 0xf5, 0x4c, 0x0e, 0x6d,
  0x6f, 0x86, 0x4f, 0x3d, 0x93, 0x53, 0x9b, 0xd8, 0x03, 0x3b, 0xd1, 0x32,
  0xac, 0x00, 0x86, 0x46, 0x88, 0x81, 0x34, 0xb7, 0x8d, 0x3d, 0xb0, 0x13,
  0x2d, 0xc3, 0x0a, 0x60, 0x68, 0x84, 0x18, 0x48, 0x83, 0x5b, 0x59, 0x04,
  0x3b, 0xd1, 0x32, 0xac, 0x00, 0xd6, 0x21, 0x11, 0x21, 0x4c, 0x88, 0xd3,
  0x58, 0x98, 0x03, 0x3b, 0xd1, 0x32, 0xac, 0x00, 0x86, 0x46, 0x88, 0x81,
  0x34, 0xb6, 0x46, 0xf8, 0x08, 0x9d, 0x1b, 0x1b, 0xe1, 0x23, 0xb5, 0x0e,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x44, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x04, 0x50, 0xc0, 0x02, 0x33, 0x00, 0xa5, 0x2b, 0x50, 0xfe, 0x03, 0x25,
  0x52, 0x1e, 0xc5, 0x47, 0x7b, 0x45, 0x50, 0x02, 0x34, 0x30, 0x46, 0xf0,
  0xce, 0xa4, 0x89, 0x76, 0x63, 0x04, 0x20, 0x08, 0xe3, 0xe1, 0x18, 0x8c,
  0x11, 0x8c, 0x6e, 0x1f, 0xb3, 0x60, 0x30, 0x46, 0xc0, 0xd6, 0xa3, 0x29,
  0x7e, 0x63, 0x04, 0x6c, 0x3d, 0x9a, 0xea, 0x47, 0x04, 0x23, 0x00, 0x33,
  0x00, 0x34, 0x30, 0x03, 0x30, 0x02, 0x00, 0x00, 0x33, 0x11, 0x75, 0x00,
  0xd4, 0x01, 0x29, 0x14, 0xb5, 0x07, 0x30, 0xdc, 0x10, 0xd0, 0x01, 0x19,
  0xcc, 0x32, 0x04, 0x42, 0x40, 0xf2, 0x10, 0x30, 0x76, 0xcd, 0x40, 0xfc,
  0xc1, 0x1f, 0x0c, 0x1b, 0x10, 0x41, 0x42, 0x00, 0xbb, 0x66, 0x28, 0x40,
  0xe1, 0x0f, 0x86, 0x0d, 0x88, 0xa0, 0x20, 0x80, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x80, 0x87, 0x52, 0xc0, 0x86, 0x31, 0x04, 0xae, 0x0d, 0xc6,
  0x10, 0x3a, 0x69, 0x0c, 0xc1, 0xa3, 0xc6, 0x10, 0x3c, 0x38, 0x18, 0x43,
  0xf8, 0xaa, 0x31, 0x04, 0x30, 0xb8, 0x46, 0x0c, 0x28, 0x06, 0x04, 0xc1,
  0xa0, 0x16, 0x74, 0xa1, 0x3b, 0x4a, 0x81, 0x43, 0x85, 0x53, 0x40, 0x05,
  0xa3, 0x20, 0xac, 0x41, 0x08, 0xaa, 0x86, 0x12, 0x02, 0x32, 0x86, 0x10,
  0xa4, 0xc2, 0x18, 0x82, 0x90, 0x0a, 0x63, 0x08, 0x83, 0x29, 0x8c, 0x21,
  0x10, 0xa3, 0x30, 0x4b, 0x30, 0xd0, 0x3f, 0x20, 0x0c, 0xfa, 0x07, 0x85,
  0x31, 0x86, 0x80, 0x06, 0xaf, 0x30, 0x86, 0x90, 0x06, 0xab, 0x60, 0x81,
  0x40, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x05, 0x75, 0x28,
  0x83, 0x60, 0x38, 0x22, 0xc8, 0x84, 0xcf, 0x04, 0x30, 0x80, 0xcf, 0x74,
  0xc3, 0x10, 0x08, 0x16, 0x84, 0x81, 0x7c, 0xc6, 0x10, 0xe0, 0xc0, 0x16,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15, 0xe0, 0x41, 0x0d, 0x02,
  0x0b, 0xc6, 0x40, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0x0e,
  0xe0, 0x10, 0x07, 0xcd, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xb8, 0x03,
  0x38, 0xc8, 0x41, 0x33, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0xb1, 0x00,
  0x0f, 0x6d, 0x20, 0x04, 0xc6, 0x30, 0x06, 0x63, 0x20, 0x07, 0x72, 0x20,
  0x07, 0x62, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x30, 0x4b, 0x30, 0x0c, 0x54, 0x0c, 0x70, 0x10,
  0x20, 0xc2, 0x40, 0xc5, 0x00, 0x07, 0x01, 0x22, 0x0c, 0x54, 0x0c, 0x70,
  0x10, 0x20, 0xc2, 0x40, 0xc5, 0x00, 0x07, 0x01, 0x22, 0xcc, 0x31, 0xb4,
  0x01, 0x51, 0x0e, 0x73, 0x0c, 0x01, 0x51, 0x0e, 0x73, 0x0c, 0x01, 0x21,
  0x0e, 0x73, 0x0c, 0x01, 0xf1, 0x0b, 0x19, 0x84, 0x03, 0x01, 0x00, 0x00,
  0x1f, 0x00, 0x00, 0x00, 0xb6, 0x95, 0x0c, 0x48, 0x44, 0x08, 0x13, 0xe2,
  0x34, 0x66, 0x18, 0x40, 0x68, 0x13, 0xd0, 0x18, 0x63, 0x00, 0xa1, 0x09,
  0x8e, 0x64, 0x96, 0x01, 0x85, 0x4f, 0xfb, 0x48, 0x6d, 0x5a, 0x86, 0x13,
  0x21, 0x06, 0xd2, 0x18, 0x66, 0x40, 0xe1, 0xd3, 0x3e, 0x72, 0xdb, 0x65,
  0x40, 0xe1, 0xd3, 0x3e, 0x62, 0x5b, 0x65, 0x40, 0xe1, 0xd3, 0x3e, 0x42,
  0xdb, 0xdf, 0xe0, 0x23, 0xb6, 0xf5, 0x0d, 0x3e, 0x42, 0x9b, 0xdf, 0xe0,
  0x23, 0xb5, 0x69, 0x06, 0x20, 0x3e, 0xed, 0x53, 0xcf, 0xe4, 0xd4, 0x06,
  0x18, 0x30, 0xf8, 0xc8, 0x6d, 0x5c, 0x4e, 0x44, 0x08, 0x54, 0x24, 0x21,
  0x4e, 0x53, 0x12, 0x15, 0xb1, 0x58, 0x66, 0x00, 0xe2, 0xd3, 0x3e, 0xf5,
  0x4c, 0x0e, 0x6d, 0x9b, 0x01, 0x88, 0x4f, 0xfb, 0xd4, 0x33, 0x39, 0xb6,
  0x71, 0x06, 0x08, 0x3e, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0xd6, 0x04, 0x00, 0x00, 0x13, 0x04, 0x51, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x04, 0x30, 0x03, 0x50,
  0xc0, 0x02, 0x85, 0x18, 0x50, 0xa6, 0x02, 0x65, 0x57, 0x30, 0x85, 0x2a,
  0x50, 0x1a, 0xc5, 0x52, 0xa2, 0x02, 0x45, 0x2b, 0x50, 0xba, 0x02, 0xe5,
  0x3f, 0x50, 0x6e, 0xc5, 0x57, 0xa4, 0x02, 0x25, 0x52, 0x1e, 0x85, 0x1d,
  0x50, 0x2e, 0xa5, 0x42, 0x42, 0x45, 0x50, 0x02, 0x23, 0x00, 0x34, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x63, 0x04, 0xef, 0x4c, 0x9a, 0x68,
  0x37, 0x46, 0x00, 0x82, 0x30, 0x1e, 0x8e, 0xc1, 0x18, 0xc1, 0xe8, 0xf6,
  0x31, 0x0b, 0x06, 0x63, 0x04, 0x6c, 0x3d, 0x9a, 0xe2, 0x37, 0x46, 0xc0,
  0xd6, 0xa3, 0xa9, 0x7e, 0x63, 0x04, 0x20, 0x08, 0x82, 0xe0, 0x2f, 0x8c,
  0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88,
  0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0xa0, 0x0a, 0x06, 0x44, 0x30, 0x02,
  0x30, 0x03, 0x40, 0x03, 0x33, 0x00, 0x63, 0x04, 0x2c, 0xbd, 0xd7, 0xf2,
  0x18, 0x8c, 0x00, 0x00, 0x33, 0x11, 0x75, 0x00, 0xd4, 0x01, 0x29, 0xcc,
  0x44, 0xd4, 0x01, 0x50, 0x07, 0xa4, 0x40, 0x21, 0xa1, 0x30, 0x68, 0x24,
  0x14, 0x06, 0x81, 0x04, 0xc2, 0x20, 0x91, 0x70, 0x18, 0x44, 0x12, 0x0c,
  0x83, 0x50, 0x02, 0x61, 0xd0, 0x4a, 0x04, 0x0c, 0x12, 0x89, 0x8b, 0x41,
  0x24, 0x41, 0x31, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x1d, 0xc2,
  0x21, 0x0e, 0x84, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x40, 0x87, 0x71,
  0x90, 0x03, 0x61, 0x26, 0xa2, 0x0f, 0x80, 0x3a, 0x20, 0x85, 0x11, 0x83,
  0x02, 0x00, 0x41, 0x30, 0x10, 0x07, 0x74, 0x18, 0x83, 0x0a, 0x6a, 0x41,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x1e, 0xc0, 0xc1, 0x0e, 0x94,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x07, 0x76, 0xb0, 0x83, 0x40,
  0xc0, 0x83, 0xd1, 0x84, 0x00, 0x28, 0x22, 0x1c, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xc0, 0xe1, 0x1d, 0xf2, 0x80, 0x08, 0xf6, 0x60, 0x34,
  0x21, 0x00, 0xea, 0x00, 0x07, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0x70, 0x90, 0x07, 0x3e, 0x38, 0x02, 0x3f, 0x18, 0x4d, 0x08, 0x80, 0x7d,
  0x33, 0x84, 0x02, 0x3a, 0xa0, 0x03, 0x05, 0x25, 0xa3, 0x12, 0x71, 0xb8,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0xa0, 0x87, 0x76, 0x10, 0x85, 0x6b,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xc0, 0x01, 0x1f, 0x44, 0x21, 0x10,
  0x48, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6e, 0x18, 0xd8, 0x1b, 0x06, 0xf6, 0x86, 0x81, 0xad, 0xc4, 0x14, 0x76,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xc0, 0x01, 0x24, 0x54, 0x21, 0x09,
  0x58, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0xe0, 0x84, 0x81, 0x3d,
  0x61, 0x60, 0xab, 0x8a, 0x87, 0x1b, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0x70, 0x30, 0x09, 0x58, 0x78, 0x02, 0x59, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x1b, 0x06, 0xf6, 0x86, 0x81, 0xbd,
  0x61, 0x60, 0x0b, 0xa1, 0x85, 0x1d, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0x70, 0x70, 0x09, 0x5c, 0xb8, 0x02, 0x5d, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x38, 0x61, 0x60, 0x4f, 0x18, 0xd8, 0x02, 0x83, 0x7f, 0xb8,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x07, 0x9a, 0xf0, 0x85, 0x2e,
  0x00, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb8, 0x61, 0x60, 0x6f, 0x18, 0xd8, 0x1b, 0x06, 0xb6, 0x10, 0x71, 0xd8,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x00, 0x07, 0x9e, 0x30, 0x87, 0x32,
  0x08, 0xd0, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0xe0, 0x84, 0x81,
  0x3d, 0x61, 0x60, 0xc7, 0x10, 0xd8, 0xa0, 0x26, 0x0c, 0x33, 0x83, 0xf8,
  0x18, 0x66, 0x06, 0xf1, 0x31, 0xcc, 0x0c, 0xe2, 0x63, 0x03, 0x21, 0x1f,
  0x1b, 0x0a, 0xf9, 0xd8, 0x60, 0xc8, 0xc7, 0x06, 0x36, 0x80, 0x8f, 0x0d,
  0x6c, 0x00, 0x1f, 0x1b, 0xd8, 0x00, 0x3e, 0x63, 0x08, 0x76, 0xe0, 0x13,
  0x46, 0xc1, 0x41, 0x7c, 0x8c, 0x82, 0x83, 0xf8, 0x18, 0x05, 0x07, 0xf1,
  0xb1, 0x81, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x6c, 0x30, 0xe4, 0x63, 0xca,
  0x00, 0x1f, 0x53, 0x06, 0xf8, 0x98, 0x32, 0xc0, 0xc7, 0x86, 0x41, 0x3e,
  0x36, 0x0c, 0xf2, 0x31, 0x21, 0x80, 0x8f, 0x11, 0x84, 0x7c, 0x4c, 0x08,
  0xe0, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xaa, 0x60, 0x1a, 0x21,
  0x11, 0x58, 0x12, 0xd0, 0xc7, 0x12, 0x81, 0x3e, 0x96, 0x0c, 0xf4, 0xb1,
  0x36, 0xd8, 0x83, 0xf8, 0x58, 0x1b, 0xec, 0x41, 0x7c, 0x4c, 0xf8, 0xe4,
  0x63, 0x02, 0x18, 0xc8, 0xc7, 0x84, 0x3f, 0x80, 0x8f, 0x09, 0x7f, 0x00,
  0x1f, 0x2b, 0x83, 0x50, 0x88, 0x8f, 0x95, 0x41, 0x28, 0xc4, 0xc7, 0x84,
  0x4d, 0x3e, 0x26, 0x70, 0xf2, 0x31, 0x43, 0x80, 0x8f, 0x19, 0x02, 0x7c,
  0x76, 0xcd, 0x80, 0x13, 0x7e, 0xd1, 0x17, 0x14, 0x00, 0x8c, 0xe1, 0x86,
  0xe0, 0x2f, 0xc0, 0x60, 0x96, 0x41, 0x08, 0x82, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0xd8, 0x05, 0xd8, 0x98, 0x09, 0x91, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x83, 0x5d, 0x88, 0x0d, 0x9a, 0x20, 0x89, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0xd8, 0x05, 0xd9, 0xa8, 0x09, 0x93, 0x98, 0x25, 0x28,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x60, 0x17, 0x64, 0x23, 0x27, 0x4a,
  0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x76, 0x61, 0x36, 0x74, 0xe2,
  0x24, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x60, 0x17, 0x68, 0x63, 0x27,
  0x52, 0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x76, 0xc1, 0x36, 0x72,
  0x02, 0x25, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x60, 0x17, 0x6e, 0x43,
  0x27, 0x54, 0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x76, 0x01, 0x37,
  0x76, 0x82, 0x25, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x15, 0xc0,
  0x23, 0x27, 0x56, 0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x58, 0x21,
  0x3c, 0x74, 0xa2, 0x25, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x15,
  0xc6, 0xa3, 0x26, 0x5a, 0xa2, 0x02, 0x41, 0x2a, 0x20, 0x60, 0xf7, 0x0c,
  0xf3, 0xf0, 0x1a, 0xaf, 0x31, 0x4b, 0x30, 0x0c, 0x54, 0x00, 0xed, 0x30,
  0x80, 0x8d, 0x30, 0x50, 0x31, 0xa4, 0xc3, 0x20, 0x26, 0xc2, 0x88, 0x41,
  0x01, 0x80, 0x20, 0x18, 0xf4, 0xc2, 0x6f, 0x80, 0x85, 0x31, 0x81, 0x7c,
  0x8c, 0x11, 0xe4, 0x63, 0xcc, 0x20, 0x1f, 0x1b, 0x24, 0xf8, 0xd8, 0x20,
  0xc1, 0xc7, 0x06, 0x09, 0x3e, 0x54, 0x22, 0x00, 0xa3, 0x82, 0xdc, 0x80,
  0x61, 0x03, 0xe2, 0x44, 0x82, 0x01, 0xa8, 0x46, 0x80, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0x28, 0x05, 0xfb, 0x80, 0x8b, 0x90, 0xa0, 0x8d, 0xd1,
  0x84, 0x00, 0xa8, 0x21, 0x80, 0x0b, 0x06, 0x6a, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x54, 0x01, 0x3f, 0xe2, 0x22, 0xb0, 0x80, 0x26, 0xe4, 0x33,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xaa, 0xa0, 0x1f, 0x72, 0x11, 0x94,
  0xe2, 0x1b, 0x30, 0x6c, 0x40, 0xc0, 0x48, 0x30, 0x00, 0x65, 0x29, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa5, 0xf0, 0x1f, 0x79, 0xa1, 0x12,
  0xbd, 0x31, 0x9a, 0x10, 0x00, 0x35, 0x04, 0x70, 0xc1, 0x40, 0x8d, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x81, 0x2a, 0x84, 0x88, 0x5e, 0x04, 0x16, 0xf4,
  0x84, 0x7c, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15, 0x46, 0x64,
  0x2f, 0x82, 0x9a, 0xc6, 0x03, 0x86, 0x0d, 0x88, 0x1c, 0x09, 0x06, 0xa0,
  0x3e, 0x05, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x14, 0x50, 0x44,
  0x34, 0x66, 0xc2, 0x3c, 0x46, 0x13, 0x02, 0xa0, 0x86, 0x00, 0x2e, 0x18,
  0xa8, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x05, 0x15, 0x19, 0x8d,
  0xc0, 0x02, 0xb3, 0x90, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0xa8,
  0x02, 0x8b, 0x90, 0x46, 0x60, 0x93, 0x29, 0xc0, 0xc7, 0x16, 0x53, 0x80,
  0x8f, 0x0d, 0xa6, 0x00, 0x1f, 0x1b, 0x06, 0xf9, 0xd8, 0x30, 0xc8, 0xc7,
  0x02, 0x01, 0x3e, 0x46, 0x10, 0xf2, 0x31, 0x21, 0x80, 0xcf, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0x8d, 0xc0, 0x46, 0x60, 0x49, 0x40,
  0x1f, 0x4b, 0x04, 0xfa, 0x58, 0x32, 0xd0, 0x67, 0xd8, 0x80, 0x90, 0x03,
  0x10, 0x21, 0x80, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x80, 0x87, 0x12,
  0xc1, 0x0d, 0xb5, 0x18, 0x31, 0xa0, 0x18, 0x10, 0x04, 0x03, 0x72, 0x60,
  0x91, 0xd7, 0x08, 0xde, 0xc3, 0x35, 0x44, 0x24, 0x44, 0x42, 0x84, 0x0d,
  0xd6, 0x40, 0x0d, 0x42, 0x83, 0x18, 0x04, 0xd0, 0x30, 0x0b, 0x9a, 0x03,
  0x00, 0x32, 0xdc, 0x10, 0x8c, 0x48, 0x18, 0xd8, 0x1c, 0xf8, 0x05, 0x7c,
  0xa6, 0x1b, 0x02, 0x3a, 0x10, 0xcc, 0x0e, 0x4a, 0x04, 0x06, 0xc3, 0x0d,
  0xc1, 0x88, 0x80, 0xc1, 0x2c, 0x03, 0x31, 0x04, 0x03, 0x0d, 0x83, 0x31,
  0xcc, 0x12, 0x14, 0x03, 0x15, 0x03, 0x4b, 0x04, 0x20, 0x41, 0x0c, 0x54,
  0x0c, 0x30, 0x11, 0x90, 0x04, 0x31, 0x50, 0x31, 0xd0, 0x44, 0x80, 0x12,
  0xc4, 0x40, 0xc5, 0x80, 0x33, 0x01, 0x42, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0xc1, 0x2c, 0x80, 0x09, 0x6e, 0x08, 0x03, 0xe1, 0x0b, 0xbd, 0xc0,
  0x0b, 0x16, 0x9c, 0x86, 0x7c, 0x2c, 0x00, 0x07, 0xf9, 0x98, 0x00, 0x0e,
  0xf2, 0xb1, 0x01, 0x1c, 0xe4, 0x63, 0xc7, 0x10, 0x1f, 0x4b, 0x86, 0xf8,
  0xd8, 0x32, 0xc4, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x50, 0xc1,
  0x4d, 0xd2, 0x63, 0x2f, 0x6a, 0x64, 0x34, 0x21, 0x08, 0x2c, 0x78, 0x0d,
  0xf8, 0x58, 0x10, 0xc8, 0xc7, 0x86, 0xdc, 0x80, 0x8f, 0x05, 0x81, 0x7c,
  0x6c, 0x08, 0xe8, 0x63, 0xbc, 0x11, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40,
  0x10, 0x0c, 0x66, 0x01, 0x4e, 0xd0, 0x63, 0x51, 0x12, 0x77, 0x68, 0x07,
  0x76, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x55, 0xb0, 0x93, 0x18,
  0x09, 0xec, 0x37, 0x82, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81,
  0x2a, 0xe0, 0x49, 0x79, 0x04, 0x16, 0xe0, 0x86, 0x7c, 0x46, 0x0c, 0x0c,
  0x00, 0x04, 0xc1, 0x40, 0x15, 0xf4, 0xc4, 0x3c, 0x02, 0x0b, 0x0e, 0xf9,
  0x58, 0x90, 0xc0, 0x67, 0x38, 0x22, 0x20, 0x0f, 0xe1, 0x9b, 0x65, 0x38,
  0x8c, 0xa0, 0xce, 0xa1, 0x4c, 0x60, 0x96, 0x40, 0x19, 0x31, 0x28, 0x00,
  0x10, 0x04, 0x83, 0x5e, 0xa0, 0x93, 0xfa, 0xa8, 0x74, 0x38, 0x13, 0x18,
  0x6e, 0x08, 0xc0, 0x84, 0x0c, 0x66, 0x19, 0x90, 0x24, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0x5d, 0xc0, 0x93, 0xff, 0x58, 0x0f, 0x03, 0x03,
  0x42, 0x3e, 0x16, 0x08, 0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83,
  0x5d, 0xd8, 0x13, 0x11, 0x79, 0x0f, 0x23, 0x83, 0x43, 0x3e, 0x16, 0x08,
  0xf0, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x5d, 0xf0, 0x93, 0x12,
  0x99, 0x0f, 0x43, 0x03, 0x45, 0x3e, 0x16, 0x08, 0xf0, 0xd9, 0x35, 0xc3,
  0x78, 0xcc, 0xc9, 0x9c, 0x0c, 0x1b, 0x10, 0x81, 0x7a, 0x10, 0xc0, 0xae,
  0x19, 0xc8, 0x83, 0x4e, 0xe6, 0x64, 0xd8, 0x80, 0x08, 0x1a, 0x02, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x78, 0xc8, 0x13, 0x16, 0xf1, 0x8d,
  0x11, 0x03, 0x8a, 0x01, 0x41, 0x30, 0xa8, 0x05, 0x54, 0x19, 0x91, 0x60,
  0x4e, 0x44, 0xc4, 0x4e, 0xea, 0xc4, 0x4e, 0x94, 0x83, 0xa8, 0x0f, 0x32,
  0x18, 0x03, 0x31, 0xa0, 0x0f, 0xf3, 0xa0, 0x81, 0x80, 0x8c, 0x21, 0x04,
  0x77, 0x32, 0x86, 0x20, 0xdc, 0xc9, 0x18, 0xc2, 0x40, 0x27, 0x63, 0x08,
  0x44, 0x9c, 0xcc, 0x12, 0x28, 0x76, 0x06, 0x69, 0x40, 0x9f, 0x11, 0x03,
  0x03, 0x00, 0x41, 0x30, 0x50, 0x05, 0x5a, 0x21, 0x91, 0x60, 0x38, 0x22,
  0x78, 0x0f, 0xe1, 0x33, 0x61, 0x3f, 0xe0, 0x33, 0xdd, 0x30, 0x04, 0x82,
  0x05, 0xfc, 0x21, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x50, 0x85,
  0x5c, 0x41, 0x11, 0x37, 0xb0, 0xa0, 0x3f, 0xe4, 0x33, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0xec, 0x90, 0x2a, 0x3a, 0xd2, 0x1e, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xe0, 0x0e, 0xa9, 0xb2, 0x23, 0xf2, 0x31, 0x62, 0xf0,
  0x00, 0x20, 0x08, 0x06, 0xb1, 0x90, 0x2b, 0x2f, 0x22, 0x04, 0xc5, 0x90,
  0x1f, 0xf9, 0xd1, 0x23, 0x3d, 0xd2, 0x23, 0xf7, 0x31, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x4b,
  0xa0, 0x0c, 0x74, 0x00, 0xa8, 0x60, 0x90, 0x42, 0x42, 0x0a, 0xc8, 0x40,
  0xc7, 0xa0, 0x3f, 0x86, 0x92, 0xa0, 0x01, 0x32, 0xd0, 0x31, 0xf0, 0x8f,
  0xa1, 0x24, 0x68, 0x80, 0x0c, 0x74, 0x0c, 0xfe, 0x63, 0x28, 0x09, 0x1a,
  0x20, 0x03, 0x1d, 0x03, 0x08, 0x19, 0x4a, 0x82, 0x06, 0xc8, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0xb0, 0x42, 0xb9, 0xf8, 0x08, 0x8c, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x01, 0x2b, 0x98, 0xcb, 0x8f, 0xc8, 0xc8, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0xb0, 0x02, 0xba, 0xe8, 0x88, 0x8c, 0x54,
  0x20, 0x48, 0x05, 0x04, 0x10, 0xc8, 0x00, 0x8c, 0x0a, 0x68, 0x05, 0x86,
  0x0d, 0x08, 0x91, 0x09, 0x06, 0xa0, 0x06, 0x01, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0x14, 0xe2, 0x65, 0x4d, 0xf8, 0xe3, 0x55, 0x46, 0x13,
  0x02, 0xa0, 0x86, 0x00, 0x2e, 0x18, 0xa8, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x50, 0x85, 0x79, 0x61, 0x93, 0xc0, 0x82, 0x17, 0x91, 0xcf, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0xa8, 0x42, 0xbd, 0xb4, 0x49, 0x50, 0x4a,
  0xae, 0xc0, 0xb0, 0x01, 0xb1, 0x32, 0xc1, 0x00, 0x14, 0xa3, 0xc0, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x94, 0x82, 0xbe, 0xd0, 0x49, 0x89, 0xe0,
  0xca, 0x68, 0x42, 0x00, 0xd4, 0x10, 0xc0, 0x05, 0x03, 0x35, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0xaa, 0xc0, 0x2f, 0x75, 0x12, 0x58, 0x80, 0x23,
  0xf2, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x55, 0xf0, 0x17, 0x3b,
  0x09, 0x6a, 0xf2, 0x15, 0x18, 0x36, 0x20, 0x68, 0x26, 0x18, 0x80, 0xaa,
  0x14, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x52, 0x18, 0x99, 0x3e,
  0x71, 0x91, 0x70, 0x19, 0x4d, 0x08, 0x80, 0x1a, 0x02, 0xb8, 0x60, 0xa0,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15, 0x4a, 0xc6, 0x4f, 0x02,
  0x0b, 0xc2, 0x44, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xa0, 0x0a,
  0x27, 0xf3, 0x27, 0x81, 0x4d, 0xa1, 0x01, 0x1f, 0x5b, 0x42, 0x03, 0x3e,
  0x36, 0x84, 0x06, 0x7c, 0x6c, 0x18, 0xe4, 0x63, 0xc3, 0x20, 0x1f, 0x0b,
  0x04, 0xf8, 0x18, 0x41, 0xc8, 0xc7, 0x84, 0x00, 0x3e, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xa0, 0x0a, 0x30, 0xb3, 0x2a, 0x81, 0x25, 0x01, 0x7d,
  0x2c, 0x11, 0xe8, 0x63, 0xc9, 0x40, 0x9f, 0x11, 0x83, 0x02, 0x00, 0x41,
  0x30, 0xe8, 0x85, 0x94, 0x51, 0x95, 0xe1, 0x86, 0x39, 0xa0, 0x17, 0x32,
  0x98, 0x65, 0x58, 0x98, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x76,
  0x81, 0x65, 0x66, 0xe5, 0x4f, 0x8c, 0x1e, 0x06, 0xf9, 0x58, 0x20, 0xc0,
  0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x76, 0xe1, 0x65, 0x6c, 0x65,
  0x54, 0x0c, 0x1f, 0x0c, 0xf9, 0x58, 0x20, 0xc0, 0x67, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x76, 0x41, 0x66, 0x72, 0xe5, 0x54, 0x8c, 0x1f, 0x12,
  0xf9, 0x58, 0x20, 0xc0, 0x67, 0xd7, 0x0c, 0x78, 0x72, 0x32, 0x27, 0x33,
  0x6c, 0x40, 0x04, 0x7e, 0x42, 0x00, 0xbb, 0x66, 0xc8, 0x13, 0x94, 0x39,
  0x99, 0x61, 0x03, 0x22, 0xf8, 0x03, 0x02, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x78, 0x68, 0x19, 0x70, 0x91, 0x93, 0x11, 0x03, 0x8a, 0x01,
  0x41, 0x30, 0xa8, 0x05, 0x9e, 0xb9, 0x95, 0xe0, 0x64, 0x6c, 0x45, 0x65,
  0x52, 0x46, 0x65, 0x94, 0x83, 0x48, 0x95, 0x08, 0x7a, 0x50, 0x65, 0x4f,
  0x68, 0x20, 0x20, 0x63, 0x08, 0xc1, 0xca, 0x8c, 0x21, 0x08, 0x2b, 0x33,
  0x86, 0x30, 0xa0, 0xcc, 0x18, 0x02, 0x51, 0x32, 0xb3, 0x04, 0x8d, 0x51,
  0x16, 0x7d, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x40, 0x15, 0xd0, 0x06,
  0x57, 0x82, 0xe1, 0x88, 0x60, 0x54, 0x84, 0xcf, 0x84, 0x57, 0x81, 0xcf,
  0x74, 0xc3, 0x10, 0x08, 0x16, 0xc0, 0x8a, 0x7c, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x40, 0x15, 0xda, 0x86, 0x57, 0x36, 0x0b, 0x62, 0x45, 0x3e,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0x0e, 0x3d, 0xe3, 0x2e, 0xa1,
  0x32, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xee, 0xd0, 0x33, 0xef, 0x62,
  0x2a, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0x10, 0x0b, 0x6d, 0x33, 0x2e,
  0x42, 0x50, 0x0c, 0xad, 0xd2, 0x2a, 0xf1, 0x12, 0x2f, 0xf1, 0xb2, 0x2a,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a,
  0x40, 0x0c, 0xb3, 0x04, 0xcd, 0x40, 0xc5, 0x60, 0x06, 0x0b, 0xc2, 0x0c,
  0x54, 0x0c, 0x66, 0xb0, 0x20, 0xcc, 0x40, 0xc5, 0x60, 0x06, 0x0b, 0xc2,
  0x0c, 0x54, 0x0c, 0x66, 0xb0, 0x20, 0xcc, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0xcc, 0x42, 0xdd, 0xb4, 0xcb, 0x7c, 0xc8, 0x47, 0x7c, 0xa4, 0x01,
  0x1a, 0x9c, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x94, 0x42, 0xdf,
  0xdc, 0x4b, 0xaa, 0x8c, 0xcd, 0x68, 0x42, 0x30, 0x0c, 0x37, 0x04, 0x65,
  0x03, 0x06, 0xb3, 0x0c, 0x8f, 0x13, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0x3b, 0xb0, 0x4d, 0xbf, 0xcc, 0xca, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0xb8, 0x03, 0xdb, 0xf8, 0x8b, 0xad, 0x8c, 0x18, 0x3c, 0x00, 0x08,
  0x82, 0x41, 0x2c, 0xf0, 0x8d, 0xbc, 0x08, 0x01, 0x7b, 0xac, 0x07, 0xaf,
  0xf0, 0x0a, 0xc8, 0x80, 0x0c, 0xc8, 0xe8, 0xca, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x2c, 0x01,
  0x34, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xa8, 0x60, 0x3a, 0x21, 0x33,
  0x2b, 0x6c, 0x33, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x30, 0x4b, 0x00, 0x0d, 0x54, 0x0c, 0x92, 0x83,
  0x3c, 0x03, 0x15, 0x83, 0xe4, 0x20, 0xcf, 0x40, 0xc5, 0x20, 0x39, 0xc8,
  0x33, 0x50, 0x31, 0x48, 0x0e, 0xf2, 0x18, 0x85, 0xc9, 0xc7, 0x82, 0x42,
  0x3e, 0x66, 0x65, 0xf2, 0xb1, 0xc0, 0x90, 0x8f, 0x61, 0x9a, 0x7c, 0x2c,
  0x38, 0xe4, 0x63, 0xda, 0x26, 0x1f, 0x0b, 0x10, 0xf9, 0xd8, 0x3c, 0x1c,
  0xf1, 0xb1, 0x79, 0x30, 0xe2, 0x63, 0xf3, 0x50, 0xc4, 0xc7, 0xe6, 0x81,
  0x88, 0x8f, 0x11, 0x3e, 0x21, 0x1f, 0x23, 0x7e, 0x42, 0x3e, 0x46, 0x80,
  0x85, 0x7c, 0x8c, 0x08, 0x0b, 0xf9, 0x18, 0xf1, 0xc0, 0xc7, 0x08, 0x07,
  0x3e, 0x46, 0x34, 0xf0, 0x31, 0x82, 0x81, 0x8f, 0x11, 0x7e, 0x21, 0x1f,
  0x23, 0xfe, 0x42, 0x3e, 0x46, 0x80, 0x86, 0x7c, 0x8c, 0x08, 0x0d, 0xf9,
  0xcc, 0x31, 0x8c, 0x0c, 0xe1, 0x3a, 0x73, 0x0c, 0x01, 0xe1, 0x3a, 0x73,
  0x0c, 0x01, 0xb1, 0x3a, 0x73, 0x0c, 0x01, 0x81, 0x3a, 0xbb, 0x66, 0x60,
  0x1b, 0xd9, 0x91, 0x9d, 0x61, 0x03, 0x22, 0x10, 0x06, 0x00, 0xc3, 0x81,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x36, 0x2e, 0x60, 0xf8,
  0x48, 0x5d, 0xeb, 0xb5, 0xc9, 0x0f, 0x18, 0x3e, 0x42, 0xd7, 0x3d, 0x6d,
  0xd4, 0x02, 0x43, 0xe9, 0x18, 0xc6, 0x2e, 0x60, 0xf8, 0x48, 0x5d, 0xeb,
  0xb8, 0xd9, 0x0f, 0x18, 0x3e, 0x42, 0xd7, 0x3d, 0x6e, 0xa5, 0x03, 0x86,
  0x8f, 0xd4, 0xb5, 0xbe, 0xd7, 0xaf, 0xc0, 0x76, 0x7d, 0xcb, 0xd9, 0x64,
  0x69, 0x38, 0x4f, 0x4c, 0xcb, 0xcb, 0x63, 0x7a, 0xfa, 0xed, 0xbe, 0xe5,
  0x5c, 0x70, 0x79, 0xb9, 0x05, 0x47, 0xa7, 0x4d, 0x7f, 0xc0, 0xf0, 0x11,
  0xba, 0xee, 0x79, 0xc3, 0x1c, 0x28, 0x58, 0xa4, 0xa9, 0x6b, 0x7b, 0x1c,
  0x28, 0x58, 0xa4, 0xa9, 0x6f, 0x33, 0x15, 0x28, 0x58, 0xa4, 0xa9, 0x75,
  0x1b, 0x1c, 0x98, 0x3a, 0x44, 0x7a, 0x80, 0x49, 0x38, 0x56, 0x00, 0x93,
  0xc4, 0x66, 0x20, 0xae, 0x3b, 0xb7, 0x4e, 0x81, 0x82, 0x45, 0x9a, 0x9a,
  0x37, 0xc2, 0x81, 0xa9, 0x43, 0xa4, 0x07, 0x98, 0x84, 0x63, 0x05, 0x30,
  0x49, 0x6c, 0x06, 0xe2, 0xba, 0x71, 0xd3, 0x1c, 0x28, 0xbe, 0x48, 0xa8,
  0x69, 0x8b, 0x1c, 0x28, 0xbe, 0x48, 0xa8, 0x6d, 0x4b, 0x14, 0x30, 0x7c,
  0xc4, 0xae, 0xf1, 0xda, 0x50, 0x05, 0x8a, 0x2f, 0x12, 0xea, 0xdc, 0x3e,
  0x05, 0x8a, 0x2f, 0x12, 0xea, 0xdd, 0x2c, 0x05, 0x8a, 0x2f, 0x12, 0xea,
  0xde, 0x56, 0x05, 0x0c, 0x1f, 0xb1, 0x6b, 0x7c, 0xb7, 0xda, 0x01, 0x08,
  0x76, 0xa2, 0x65, 0x58, 0x01, 0x0c, 0x8d, 0x10, 0x03, 0x69, 0xf4, 0xdc,
  0x70, 0x07, 0x20, 0xd8, 0x89, 0x96, 0x61, 0x05, 0x30, 0x34, 0x42, 0x0c,
  0xa4, 0xd1, 0xf5, 0xf2, 0x15, 0xd8, 0xae, 0x6f, 0x39, 0x9b, 0x2c, 0x0d,
  0xe7, 0x89, 0x69, 0x79, 0x79, 0x4c, 0x4f, 0xbf, 0xdd, 0x38, 0x98, 0x0b,
  0x2e, 0x2f, 0xb7, 0xe0, 0xe8, 0xb4, 0x51, 0x0a, 0x14, 0x2c, 0xd2, 0xd8,
  0xb4, 0x15, 0x0e, 0x60, 0x1d, 0x22, 0x3d, 0xc0, 0x24, 0x1c, 0x2b, 0x80,
  0x49, 0x1d, 0xc2, 0x10, 0x8d, 0x84, 0x38, 0x8d, 0x74, 0xd7, 0x66, 0x1f,
  0x70, 0xf8, 0x4f, 0x44, 0xd8, 0x76, 0x6f, 0xb7, 0x03, 0x86, 0x8f, 0xd4,
  0xf5, 0xae, 0x9b, 0xeb, 0x80, 0xe1, 0x23, 0x75, 0xbd, 0xd3, 0xd6, 0x3f,
  0x60, 0xf8, 0xc8, 0x6d, 0xd3, 0xb5, 0x31, 0x0a, 0x18, 0x3e, 0x62, 0xd7,
  0x38, 0x6e, 0xfb, 0x01, 0x13, 0xec, 0x44, 0xcb, 0xb0, 0x02, 0x58, 0x87,
  0x44, 0x84, 0x30, 0x21, 0x4e, 0xb3, 0xdf, 0xc6, 0x1f, 0x30, 0xc1, 0x4e,
  0xb4, 0x0c, 0x2b, 0x80, 0x75, 0x48, 0x44, 0x08, 0x13, 0xe2, 0x34, 0x3b,
  0x6e, 0xfd, 0x01, 0x13, 0xec, 0x44, 0xcb, 0xb0, 0x02, 0x58, 0x87, 0x44,
  0x84, 0x30, 0x21, 0x4e, 0xb3, 0xe7, 0x46, 0x2b, 0x60, 0xf8, 0x88, 0x5d,
  0xe7, 0xb4, 0x79, 0x0b, 0x40, 0xb0, 0x13, 0x2d, 0xc3, 0x0a, 0x60, 0x68,
  0x84, 0x18, 0x48, 0xb3, 0xd3, 0x16, 0x2e, 0x00, 0xc1, 0x4e, 0xb4, 0x0c,
  0x2b, 0x80, 0xa1, 0x11, 0x62, 0x20, 0xcd, 0x5e, 0x1b, 0xb9, 0x00, 0x04,
  0x3b, 0xd1, 0x32, 0xac, 0x00, 0x86, 0x46, 0x88, 0x81, 0x34, 0xbb, 0x6d,
  0xb6, 0x03, 0x86, 0x8f, 0xd4, 0xf5, 0x7e, 0x5b, 0xb9, 0x80, 0xe1, 0x23,
  0x76, 0x9d, 0xf7, 0x86, 0x1f, 0x00, 0xc1, 0x4e, 0xb4, 0x0c, 0x2b, 0x80,
  0xa1, 0x11, 0x62, 0x20, 0xcd, 0xae, 0x5b, 0x7e, 0x00, 0x04, 0x3b, 0xd1,
  0x32, 0xac, 0x00, 0x86, 0x46, 0x88, 0x81, 0x34, 0xfb, 0x6e, 0xfa, 0x01,
  0x10, 0xec, 0x44, 0xcb, 0xb0, 0x02, 0x18, 0x1a, 0x21, 0x06, 0xd2, 0xec,
  0xbc, 0x15, 0x0b, 0x18, 0x3e, 0x62, 0xd7, 0xf9, 0x6d, 0xf7, 0x01, 0x87,
  0xff, 0x44, 0x84, 0x7d, 0xd3, 0xf6, 0x1f, 0x30, 0x75, 0x88, 0xf4, 0x00,
  0x93, 0x70, 0xac, 0x00, 0x26, 0x89, 0xcd, 0x40, 0x5c, 0xb9, 0x6d, 0xda,
  0x02, 0x87, 0xff, 0x44, 0x84, 0x7d, 0xd7, 0xe6, 0x1f, 0x30, 0x75, 0x88,
  0xf4, 0x00, 0x93, 0x70, 0xac, 0x00, 0x26, 0x89, 0xcd, 0x40, 0x5c, 0xf9,
  0x6d, 0xec, 0x03, 0x86, 0x8f, 0xd4, 0x35, 0x7f, 0x1b, 0xb2, 0x80, 0xe1,
  0x23, 0x76, 0x9d, 0xeb, 0x06, 0x28, 0x80, 0x75, 0x88, 0xf4, 0x00, 0x93,
  0x70, 0xac, 0x00, 0x26, 0x75, 0x08, 0x43, 0x34, 0x12, 0xe2, 0x34, 0x12,
  0xde, 0x1b, 0xf0, 0x80, 0xe1, 0x23, 0x75, 0xbd, 0xf7, 0xd6, 0x3e, 0x60,
  0xf8, 0x48, 0x5d, 0xf3, 0xbb, 0x99, 0x0b, 0x18, 0x3e, 0x62, 0xd7, 0xba,
  0x6d, 0xf3, 0x03, 0x86, 0x8f, 0xd4, 0x75, 0x5f, 0x5b, 0xbb, 0x80, 0xe1,
  0x23, 0x76, 0xad, 0xe7, 0x36, 0x48, 0x90, 0xf8, 0xd4, 0x33, 0x39, 0xb5,
  0x6d, 0xef, 0x76, 0x3f, 0x60, 0xf8, 0x48, 0x5d, 0xf7, 0xb9, 0x99, 0x0e,
  0x18, 0x3e, 0x62, 0xd7, 0x3a, 0x6f, 0x5a, 0xc7, 0x03, 0x60, 0x8b, 0x03,
  0x0c, 0xb6, 0x3f, 0x60, 0xf8, 0x48, 0x5d, 0xf7, 0xbd, 0x11, 0x12, 0x18,
  0x3e, 0xf5, 0x4c, 0x8e, 0x6d, 0x81, 0x04, 0x86, 0x8f, 0xdc, 0x36, 0x9d,
  0xdb, 0xeb, 0x80, 0xe1, 0x23, 0x76, 0xbd, 0xd7, 0x96, 0x3b, 0x60, 0xf8,
  0x88, 0x5d, 0xef, 0xb8, 0x25, 0x0f, 0x10, 0x9a, 0xe0, 0x48, 0xa6, 0x3b,
  0x60, 0xf8, 0x88, 0x5d, 0xef, 0xbb, 0xd5, 0x0b, 0x18, 0x9a, 0xe0, 0x48,
  0x35, 0x7e, 0x02, 0x8a, 0xff, 0x44, 0xc4, 0x41, 0x00, 0x03, 0x11, 0x59,
  0xf0, 0x80, 0xe1, 0x23, 0x76, 0xcd, 0xd3, 0x06, 0x3b, 0xb0, 0xac, 0x00,
  0xd6, 0x72, 0x54, 0x14, 0x11, 0xcd, 0x64, 0xee, 0x03, 0x86, 0x8f, 0xd8,
  0x35, 0x8f, 0xdb, 0xfb, 0x80, 0xe1, 0x23, 0x76, 0xcd, 0xf3, 0xb6, 0x1a,
  0x50, 0xf8, 0x08, 0xdd, 0xe3, 0x26, 0x1b, 0x50, 0xf8, 0x08, 0xdd, 0xeb,
  0x96, 0x1b, 0x50, 0xf8, 0x08, 0xdd, 0xf7, 0xe6, 0x18, 0xa0, 0x98, 0xc0,
  0x44, 0x44, 0x08, 0xb0, 0xf4, 0x77, 0xf9, 0x0b, 0x20, 0x2e, 0xb8, 0xbc,
  0xdc, 0x82, 0xa3, 0xd3, 0xf6, 0x18, 0xb0, 0x18, 0xbf, 0x24, 0x10, 0x0d,
  0xc1, 0x6d, 0xbd, 0x6d, 0xf4, 0x03, 0x86, 0x8f, 0xd8, 0x75, 0x6f, 0x1b,
  0xfe, 0x80, 0xe1, 0x23, 0x76, 0xdd, 0xeb, 0xb6, 0x2d, 0xd0, 0xac, 0x00,
  0xd6, 0x72, 0x54, 0x14, 0x11, 0xcd, 0xc4, 0xdb, 0x66, 0x28, 0xd0, 0xac,
  0x00, 0xd6, 0x72, 0x54, 0x14, 0x11, 0xcd, 0xc4, 0xdf, 0x06, 0x1c, 0x60,
  0xf8, 0x08, 0x5d, 0xd3, 0xb5, 0x8d, 0x0e, 0x0c, 0x5f, 0x24, 0xd8, 0x71,
  0x80, 0xe1, 0x23, 0x74, 0x4d, 0xe3, 0xa6, 0x1c, 0x60, 0xf8, 0x08, 0x5d,
  0xd3, 0xba, 0x35, 0x07, 0x18, 0x3e, 0x42, 0xd7, 0x74, 0x6f, 0xb1, 0x02,
  0x06, 0x0b, 0x45, 0x93, 0x5e, 0x1b, 0xeb, 0x80, 0xc1, 0x42, 0xd1, 0xa4,
  0xdb, 0x56, 0x1f, 0x40, 0xf8, 0x4f, 0x44, 0x18, 0x6b, 0x40, 0xe1, 0x23,
  0x75, 0x9f, 0xdb, 0x6c, 0x40, 0xe1, 0x23, 0x75, 0xbf, 0x1b, 0x74, 0x80,
  0xe1, 0x23, 0x74, 0x5d, 0xdb, 0x26, 0x3d, 0x60, 0xf8, 0xb4, 0xee, 0x23,
  0xb4, 0x4d, 0x0f, 0x18, 0x3e, 0xad, 0xfb, 0x48, 0x6d, 0xd4, 0x01, 0x86,
  0x8f, 0xd0, 0x75, 0x9d, 0x5b, 0xf5, 0x80, 0xe1, 0xd3, 0xba, 0x8f, 0xdc,
  0xa4, 0x86, 0x3f, 0x08, 0xf8, 0x39, 0x2a, 0xa3, 0x63, 0x4a, 0x3b, 0x43,
  0xa3, 0x1b, 0x7a, 0x63, 0x7b, 0x93, 0x03, 0x02, 0xca, 0x0a, 0xfa, 0x09,
  0xb2, 0xfa, 0x21, 0xb1, 0x2b, 0x1b, 0xa3, 0x7b, 0x93, 0x03, 0x6a, 0x22,
  0x81, 0x99, 0x01, 0x02, 0xb2, 0xfa, 0x21, 0xb1, 0x2b, 0x1b, 0xa3, 0x7b,
  0x93, 0x03, 0x6a, 0x22, 0x81, 0x91, 0x01, 0x02, 0x82, 0x49, 0x02, 0xd2,
  0x72, 0x29, 0xc3, 0x4b, 0xa3, 0xab, 0xb1, 0xeb, 0x00, 0xc3, 0x47, 0xe8,
  0xba, 0xe6, 0x8d, 0x7a, 0xc0, 0xf0, 0x69, 0xdd, 0x47, 0x6c, 0x23, 0x1e,
  0x20, 0xb4, 0x09, 0x68, 0x4c, 0x78, 0xc0, 0xf0, 0x91, 0xbb, 0xe6, 0x6b,
  0xe3, 0x15, 0xc0, 0xfc, 0x87, 0x88, 0x04, 0xa2, 0x99, 0x5e, 0x44, 0x42,
  0x82, 0x85, 0xf0, 0x69, 0xde, 0x5f, 0x04, 0x49, 0x02, 0x0c, 0x7e, 0xc0,
  0xf0, 0x91, 0xbb, 0xe6, 0x73, 0x0b, 0x1d, 0x18, 0x58, 0xa4, 0xb1, 0xf8,
  0x01, 0xc3, 0x47, 0xee, 0x9a, 0xef, 0x0d, 0x5e, 0xc0, 0xd0, 0x26, 0xa0,
  0xc9, 0x73, 0xd3, 0x0e, 0x30, 0x7c, 0x84, 0xae, 0xed, 0xda, 0xfc, 0x07,
  0x0c, 0x1f, 0xa1, 0x6d, 0xda, 0xb6, 0xf1, 0x00, 0xc3, 0x47, 0xe8, 0xda,
  0xc6, 0xcd, 0x3c, 0xc0, 0xf0, 0x11, 0xba, 0xb6, 0xf7, 0xea, 0x15, 0xd8,
  0xae, 0x6f, 0x39, 0x9b, 0x2c, 0x0d, 0xe7, 0x89, 0x69, 0x79, 0x79, 0x4c,
  0x4f, 0xbf, 0xdd, 0xb8, 0x98, 0x0b, 0x2e, 0x2f, 0xb7, 0xe0, 0xe8, 0xb4,
  0xa1, 0x07, 0x18, 0x3e, 0x42, 0xd7, 0x76, 0x6f, 0xf5, 0x03, 0x86, 0x8f,
  0xdc, 0x75, 0x7f, 0x9b, 0xb4, 0x00, 0xc2, 0x02, 0x13, 0x15, 0x01, 0x13,
  0x61, 0xf9, 0x03, 0x86, 0x8f, 0xdc, 0x75, 0xbf, 0x9b, 0x6e, 0x80, 0xe1,
  0x23, 0x75, 0x4d, 0xd3, 0x46, 0x1b, 0x50, 0xf8, 0x88, 0xdd, 0xf3, 0x16,
  0x1c, 0x60, 0xf8, 0x48, 0x5d, 0xd3, 0xb6, 0xa9, 0x07, 0x18, 0x3e, 0x42,
  0xd7, 0x77, 0x6d, 0xc8, 0x01, 0x86, 0x8f, 0xd4, 0x35, 0x9d, 0x1b, 0x7b,
  0x80, 0xe1, 0x23, 0x74, 0x7d, 0xdf, 0xb6, 0x1c, 0x60, 0xf8, 0x48, 0x5d,
  0xd3, 0xbb, 0xb9, 0x07, 0x18, 0x3e, 0x42, 0xd7, 0x77, 0x6e, 0xf0, 0x01,
  0x86, 0x8f, 0xd0, 0xf5, 0xbd, 0xdb, 0xa1, 0x80, 0xe1, 0x23, 0x74, 0x7d,
  0xf7, 0x76, 0x19, 0xc0, 0x6c, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x03,
  0x8f, 0x9b, 0x66, 0x00, 0xb3, 0x51, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x7c, 0x6e, 0x91, 0x01, 0x4b, 0x1a, 0x21, 0x0c, 0x32, 0x21, 0x15, 0x21,
  0x76, 0x26, 0x1e, 0x40, 0xb0, 0x50, 0x34, 0x19, 0x65, 0x80, 0xb2, 0x51,
  0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0xe6, 0x1c, 0x60, 0xf8, 0x48, 0x5d,
  0xd7, 0xb4, 0x99, 0x0f, 0x18, 0x3e, 0xbd, 0xfb, 0x08, 0x6d, 0xd1, 0x01,
  0x86, 0x8f, 0xd4, 0x75, 0x7d, 0x9b, 0xa2, 0x80, 0xe1, 0x23, 0x74, 0x8d,
  0xdb, 0x86, 0x3e, 0x60, 0xf8, 0xf4, 0xee, 0x23, 0xb6, 0x55, 0x07, 0x18,
  0x3e, 0x52, 0xd7, 0xb5, 0x6e, 0xa9, 0x02, 0x86, 0x8f, 0xd0, 0x35, 0x9e,
  0x5b, 0xfa, 0x80, 0xe1, 0xd3, 0xbb, 0x8f, 0xdc, 0x26, 0x2b, 0x60, 0xf8,
  0x08, 0x5d, 0xe3, 0xbc, 0x61, 0x07, 0x18, 0x3e, 0x52, 0xd7, 0x75, 0x6f,
  0xa4, 0x01, 0x83, 0x8f, 0xd0, 0x24, 0x08, 0x50, 0x08, 0xf8, 0x39, 0x2a,
  0xa3, 0x23, 0x4a, 0x33, 0x33, 0xab, 0x9b, 0x2b, 0x1b, 0x7a, 0x63, 0x7b,
  0x93, 0x03, 0x02, 0xca, 0x0a, 0xfa, 0x09, 0xb2, 0xfa, 0x21, 0xb1, 0x2b,
  0x1b, 0xa3, 0x7b, 0x93, 0x03, 0x6a, 0x22, 0x81, 0x99, 0x01, 0x02, 0xaa,
  0xb2, 0x2a, 0x93, 0xa3, 0x2b, 0xc3, 0x0b, 0xa2, 0xa3, 0x93, 0x4b, 0x13,
  0xab, 0xa3, 0x2b, 0x03, 0x02, 0x02, 0xd2, 0x72, 0x29, 0xc3, 0x4b, 0xa3,
  0x33, 0xd3, 0x80, 0xc1, 0x47, 0x6c, 0x92, 0x82, 0x1f, 0x04, 0xfc, 0x1c,
  0x95, 0xd1, 0x31, 0xa5, 0x9d, 0xa1, 0xd1, 0x0d, 0xbd, 0xb1, 0xbd, 0xc9,
  0x01, 0x01, 0x65, 0x05, 0xfd, 0x04, 0x59, 0xfd, 0x90, 0xd8, 0x95, 0x8d,
  0xd1, 0xbd, 0xc9, 0x01, 0x35, 0x91, 0xc0, 0xcc, 0x00, 0x01, 0x59, 0xfd,
  0x90, 0xd8, 0x95, 0x8d, 0xd1, 0xbd, 0xc9, 0x01, 0x35, 0x91, 0xc0, 0xc8,
  0x00, 0x01, 0xc1, 0x24, 0x01, 0x69, 0xb9, 0x94, 0xe1, 0xa5, 0xd1, 0xd9,
  0xf9, 0x80, 0xe1, 0xd3, 0xbb, 0x8f, 0xd4, 0x66, 0x2d, 0x30, 0x78, 0xd7,
  0x63, 0xa5, 0x01, 0x83, 0x8f, 0xd4, 0xe6, 0x2e, 0x30, 0xf8, 0xc8, 0x6d,
  0xdb, 0x01, 0x86, 0x8f, 0xd4, 0xb5, 0x6d, 0xdb, 0xb0, 0x80, 0xe1, 0x23,
  0x74, 0x9d, 0xd7, 0x46, 0x1e, 0x60, 0xf8, 0x48, 0x5d, 0xdb, 0xb9, 0x19,
  0x0b, 0x18, 0x3e, 0x42, 0xd7, 0x39, 0x6e, 0xb9, 0x02, 0x92, 0xff, 0x10,
  0x91, 0x40, 0x34, 0xd3, 0x8b, 0x48, 0x48, 0xb0, 0x10, 0x3e, 0xcd, 0xdb,
  0x79, 0x80, 0xe1, 0x23, 0x75, 0x6d, 0xf3, 0xf6, 0x2d, 0x60, 0xf8, 0x08,
  0x5d, 0xe7, 0x3b, 0xc9, 0x40, 0x16, 0x5c, 0xd8, 0xde, 0xde, 0xe0, 0xca,
  0xf0, 0xd2, 0xe8, 0x5c, 0x02, 0x7e, 0x8e, 0xca, 0xe8, 0x98, 0xd2, 0xce,
  0xd0, 0xe8, 0x86, 0xde, 0xd8, 0xde, 0xe4, 0x80, 0x80, 0xb2, 0x82, 0x7e,
  0x82, 0xac, 0x7e, 0x48, 0xec, 0xca, 0xc6, 0xe8, 0xde, 0xe4, 0x80, 0x9a,
  0x48, 0x60, 0x66, 0x80, 0x80, 0xac, 0x7e, 0x48, 0xec, 0xca, 0xc6, 0xe8,
  0xde, 0xe4, 0x80, 0x9a, 0x48, 0x60, 0x64, 0x80, 0x80, 0x60, 0x92, 0x80,
  0xb4, 0x5c, 0xca, 0xf0, 0xd2, 0xe8, 0xbe, 0xc6, 0xe4, 0xd2, 0xe8, 0xbe,
  0xca, 0xc8, 0xce, 0xca, 0xec, 0x7f, 0xc0, 0xf0, 0x91, 0xda, 0xa6, 0x6f,
  0x2b, 0x14, 0x88, 0x1e, 0x22, 0x12, 0x88, 0x66, 0x7a, 0x11, 0x09, 0x09,
  0x16, 0xc2, 0xa7, 0x79, 0xdb, 0x22, 0x80, 0x69, 0x8a, 0x2c, 0x3d, 0xc0,
  0xf0, 0x91, 0xba, 0xbe, 0x69, 0x13, 0x0e, 0x30, 0x7c, 0xc4, 0xae, 0xe9,
  0xdb, 0xd6, 0x03, 0x0c, 0x1f, 0xa9, 0xeb, 0xdb, 0x36, 0x70, 0x01, 0xc3,
  0x47, 0xe8, 0x5a, 0xa7, 0xad, 0x3d, 0xc0, 0xf0, 0x91, 0xba, 0xbe, 0x71,
  0x5b, 0x17, 0x30, 0x7c, 0x84, 0xae, 0xf5, 0xdb, 0x98, 0x03, 0x0c, 0x1f,
  0xb1, 0x6b, 0x9a, 0xb7, 0xf7, 0x00, 0xc3, 0x47, 0xea, 0xfa, 0xd6, 0x2d,
  0x3e, 0xc0, 0xf0, 0x91, 0xba, 0xbe, 0x79, 0x23, 0x1d, 0x30, 0x7c, 0x84,
  0xae, 0x75, 0xdd, 0x5a, 0x07, 0x0c, 0x1f, 0xa1, 0x6b, 0xbd, 0xb7, 0xe7,
  0x00, 0xc3, 0x47, 0xec, 0xba, 0xae, 0x0d, 0x51, 0xc0, 0xf0, 0x91, 0xba,
  0xc6, 0x69, 0x03, 0x16, 0x80, 0x1e, 0x22, 0x12, 0x88, 0x66, 0x7a, 0x11,
  0x09, 0x09, 0x16, 0xc2, 0xb7, 0x4d, 0x3a, 0xc0, 0xf0, 0x11, 0xbb, 0xae,
  0x71, 0x5b, 0x14, 0x30, 0x7c, 0xa4, 0xae, 0xf1, 0xfb, 0x0a, 0x12, 0x7f,
  0x71, 0x9c, 0x87, 0xb8, 0x90, 0xc9, 0x54, 0x05, 0x0c, 0x1f, 0xa9, 0x6b,
  0x5c, 0xb7, 0xd9, 0x01, 0xc3, 0x47, 0xe8, 0x7a, 0xb7, 0xcd, 0x3a, 0xc0,
  0xf0, 0x11, 0xbb, 0xae, 0x77, 0x9b, 0x15, 0x30, 0x7c, 0xa4, 0xae, 0xf1,
  0xde, 0x68, 0x07, 0x0c, 0x1f, 0xa1, 0xeb, 0x3d, 0xb7, 0xdf, 0x01, 0xc3,
  0x47, 0xe8, 0x7a, 0xe7, 0x8f, 0x40, 0xf2, 0x17, 0xc7, 0x79, 0x88, 0x0b,
  0x99, 0xfc, 0xc5, 0x71, 0x1e, 0xe2, 0x42, 0xa6, 0x0b, 0xa0, 0x7c, 0x7f,
  0x71, 0x9c, 0x87, 0xb8, 0x90, 0xe9, 0x17, 0x22, 0x64, 0xfa, 0x89, 0xc1,
  0x20, 0x8c, 0x7f, 0xc0, 0xf0, 0x11, 0xdb, 0xa6, 0x69, 0xcb, 0x0e, 0x30,
  0x7c, 0xc4, 0xae, 0x6d, 0xda, 0xb8, 0x03, 0x0c, 0x1f, 0xb1, 0x6b, 0xfb,
  0x36, 0x42, 0x01, 0x02, 0xf1, 0xe9, 0xde, 0x88, 0x05, 0x0c, 0x1f, 0xa9,
  0xeb, 0xdc, 0xb6, 0xf2, 0x00, 0xc3, 0x47, 0xec, 0xda, 0xd6, 0xed, 0x58,
  0xc0, 0xf0, 0x91, 0xba, 0xce, 0x73, 0x53, 0x1f, 0x30, 0x7c, 0x84, 0xae,
  0x79, 0xdb, 0xc4, 0x05, 0x0c, 0x1f, 0xa9, 0xeb, 0x9c, 0xb7, 0xf5, 0x01,
  0xc3, 0x47, 0xe8, 0x9a, 0xd7, 0x0d, 0x90, 0xc0, 0xf0, 0x11, 0xdb, 0xa6,
  0x71, 0xfb, 0x17, 0xc0, 0x22, 0xa2, 0x58, 0x08, 0x61, 0x22, 0x86, 0x05,
  0x31, 0x8e, 0x89, 0x73, 0x16, 0x27, 0xf2, 0x69, 0x1f, 0xa1, 0x0d, 0x70,
  0x00, 0x8b, 0x88, 0x62, 0x21, 0x84, 0x89, 0x18, 0x16, 0xc4, 0x38, 0x26,
  0xce, 0x59, 0x9c, 0xc8, 0xa7, 0x7d, 0xa4, 0xb6, 0xc0, 0x01, 0x2c, 0x22,
  0x8a, 0x85, 0x10, 0x26, 0x62, 0x58, 0x10, 0xe3, 0x98, 0x38, 0x67, 0x71,
  0x22, 0x9f, 0xf6, 0x11, 0xdb, 0x04, 0x07, 0xb0, 0x88, 0x28, 0x16, 0x42,
  0x98, 0x88, 0x61, 0x41, 0x8c, 0x63, 0xe2, 0x9c, 0xc5, 0x89, 0x7c, 0xda,
  0x47, 0x6e, 0x13, 0x24, 0x48, 0x7c, 0xea, 0x99, 0x1c, 0xda, 0xb6, 0x75,
  0x93, 0x1d, 0x70, 0x60, 0x27, 0x5a, 0x86, 0x15, 0xc0, 0xd0, 0x08, 0x31,
  0x90, 0xc6, 0x76, 0x05, 0x10, 0xe2, 0x42, 0x26, 0xc1, 0x69, 0x06, 0x00,
  0x01, 0x31, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x5b, 0x06, 0x2d, 0x48,
  0x8d, 0x2d, 0x03, 0x3c, 0x04, 0xa1, 0xb1, 0x65, 0x68, 0x89, 0x20, 0x34,
  0xb6, 0x0c, 0x2f, 0x11, 0x84, 0xc6, 0x96, 0x21, 0x27, 0x82, 0xd0, 0xd8,
  0x32, 0x8c, 0x45, 0x10, 0x1a, 0x5b, 0x86, 0x1b, 0x09, 0x42, 0x63, 0xcb,
  0x90, 0x23, 0x41, 0x68, 0x6c, 0x19, 0xc6, 0x24, 0x08, 0x8d, 0x2d, 0x43,
  0x9b, 0x04, 0xa1, 0xb1, 0x65, 0x10, 0x9b, 0x20, 0x35, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x04, 0x50, 0xa8, 0x02, 0x33, 0x00, 0x05, 0x2c, 0x50, 0x22, 0xe5, 0x51,
  0x7c, 0xb4, 0x57, 0x06, 0x45, 0x50, 0x02, 0x24, 0x54, 0x04, 0x25, 0x30,
  0x02, 0x40, 0x04, 0x33, 0x00, 0x34, 0x30, 0x46, 0xc0, 0xd6, 0xa3, 0xa9,
  0x7e, 0x63, 0x04, 0x6c, 0x3d, 0x9a, 0xe2, 0x37, 0x46, 0x30, 0xba, 0x7d,
  0xcc, 0x82, 0xc1, 0x0c, 0xc0, 0x08, 0x00, 0x00, 0xa4, 0x0e, 0x0a, 0x83,
  0xd8, 0x01, 0x61, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x2e, 0xa8,
  0x02, 0x95, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x2e, 0xac, 0x42,
  0xb5, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x2e, 0xb0, 0x82, 0xd5,
  0x58, 0x30, 0xd0, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x54, 0xe1,
  0x16, 0xaa, 0x60, 0x38, 0x22, 0x40, 0x84, 0xcf, 0x84, 0x05, 0x3e, 0xd3,
  0x0d, 0x43, 0x20, 0x58, 0xe0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0x54, 0x81, 0x17, 0x32, 0xc4, 0x82, 0x48, 0x3e, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xc0, 0x0e, 0xac, 0xd0, 0x31, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xe0, 0x0e, 0xac, 0xe0, 0x39, 0x23, 0x06, 0x0f, 0x00, 0x82,
  0x60, 0x10, 0x0b, 0xbc, 0xc0, 0x09, 0x41, 0x31, 0x44, 0x11, 0x18, 0x80,
  0x01, 0x18, 0x40, 0xa3, 0x09, 0x01, 0x30, 0xc7, 0x70, 0x05, 0x75, 0x30,
  0x9a, 0x30, 0x04, 0x73, 0x0c, 0x42, 0xd0, 0x8d, 0x26, 0x14, 0xc2, 0x1c,
  0x83, 0x10, 0x80, 0xc1, 0x68, 0xc2, 0x31, 0xcc, 0x31, 0x08, 0xc1, 0x18,
  0xec, 0x9a, 0x61, 0x0d, 0x62, 0x21, 0x16, 0x86, 0x0d, 0x88, 0x40, 0x18,
  0x00, 0x0c, 0x07, 0x02, 0x11, 0x00, 0x00, 0x00, 0x36, 0x47, 0x68, 0x13,
  0xd0, 0xd8, 0x5b, 0x04, 0x3b, 0xd1, 0x32, 0xac, 0x00, 0xd6, 0x21, 0x11,
  0x21, 0x4c, 0x88, 0xd3, 0x18, 0x1e, 0xa1, 0x09, 0x8e, 0x64, 0x70, 0x12,
  0xec, 0x44, 0xcb, 0xb0, 0x02, 0x58, 0x87, 0x44, 0x84, 0x30, 0x21, 0x4e,
  0x53, 0x5b, 0x9c, 0x04, 0x3b, 0xd1, 0x32, 0xac, 0x00, 0xd6, 0x21, 0x11,
  0x21, 0x4c, 0x88, 0xd3, 0xd8, 0xa6, 0x75, 0x3c, 0x00, 0xb6, 0x38, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x13, 0x04, 0xc1, 0xee, 0x19, 0x82, 0x33, 0x38,
  0x83, 0x61, 0x03, 0x22, 0x40, 0x83, 0x01, 0xc0, 0x70, 0x20, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xa6, 0x75, 0x3c, 0x00, 0xb6, 0x38, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
